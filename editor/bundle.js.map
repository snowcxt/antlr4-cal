{"version":3,"sources":["webpack:///webpack/bootstrap 0c0754cf603c52ce8b72","webpack:///./node_modules/antlr4/Utils.js","webpack:///./node_modules/antlr4/Token.js","webpack:///./node_modules/antlr4/IntervalSet.js","webpack:///./node_modules/antlr4/error/Errors.js","webpack:///./node_modules/antlr4/atn/ATNState.js","webpack:///./node_modules/antlr4/tree/Tree.js","webpack:///./node_modules/antlr4/PredictionContext.js","webpack:///./node_modules/antlr4/atn/Transition.js","webpack:///./node_modules/antlr4/atn/ATN.js","webpack:///./node_modules/antlr4/atn/ATNConfigSet.js","webpack:///./node_modules/antlr4/atn/SemanticContext.js","webpack:///./node_modules/antlr4/dfa/DFAState.js","webpack:///./node_modules/antlr4/error/ErrorListener.js","webpack:///./node_modules/antlr4/InputStream.js","webpack:///./node_modules/antlr4/Lexer.js","webpack:///./node_modules/antlr4/atn/ATNConfig.js","webpack:///./node_modules/antlr4/RuleContext.js","webpack:///./node_modules/antlr4/dfa/DFASerializer.js","webpack:///./node_modules/antlr4/index.js","webpack:///./node_modules/antlr4/ParserRuleContext.js","webpack:///./node_modules/antlr4/polyfills/codepointat.js","webpack:///./node_modules/antlr4/polyfills/fromcodepoint.js","webpack:///./node_modules/antlr4/CommonTokenStream.js","webpack:///./node_modules/antlr4/Recognizer.js","webpack:///./node_modules/antlr4/tree/Trees.js","webpack:///./node_modules/antlr4/atn/ATNDeserializer.js","webpack:///./node_modules/antlr4/atn/ATNDeserializationOptions.js","webpack:///./node_modules/antlr4/atn/LexerAction.js","webpack:///./node_modules/antlr4/atn/ATNSimulator.js","webpack:///./node_modules/antlr4/atn/PredictionMode.js","webpack:///./node_modules/antlr4/error/ErrorStrategy.js","webpack:///./editor/index.js","webpack:///external \"ace\"","webpack:///./editor/my-mode.js","webpack:///./lib/validate.js","webpack:///./node_modules/antlr4/BufferedTokenStream.js","webpack:///./node_modules/antlr4/CommonTokenFactory.js","webpack:///./lib/parsers/ExprLexer.js","webpack:///./node_modules/antlr4/atn/index.js","webpack:///./node_modules/antlr4/LL1Analyzer.js","webpack:///./node_modules/antlr4/atn/ATNType.js","webpack:///./node_modules/antlr4/atn/LexerATNSimulator.js","webpack:///./node_modules/antlr4/atn/LexerActionExecutor.js","webpack:///./node_modules/antlr4/atn/ParserATNSimulator.js","webpack:///./node_modules/antlr4/dfa/index.js","webpack:///./node_modules/antlr4/dfa/DFA.js","webpack:///./node_modules/antlr4/tree/index.js","webpack:///./node_modules/antlr4/error/index.js","webpack:///./node_modules/antlr4/error/DiagnosticErrorListener.js","webpack:///./node_modules/antlr4/CharStreams.js","webpack:///./node_modules/antlr4/FileStream.js","webpack:///./node_modules/antlr4/Parser.js","webpack:///./lib/parsers/ExprParser.js","webpack:///./lib/parsers/ExprVisitor.js","webpack:///./lib/run.js","webpack:///./lib/EvalVisitor.js"],"names":["arrayToString","a","join","String","prototype","seed","Math","round","random","pow","hashCode","remainder","bytes","h1","h1b","c1","c1b","c2","c2b","k1","i","key","toString","length","charCodeAt","standardEqualsFunction","b","equals","standardHashCodeFunction","Set","hashFunction","equalsFunction","data","Object","defineProperty","get","l","indexOf","add","value","hash","values","push","contains","concat","BitSet","or","set","bits","keys","map","alt","remove","minValue","min","apply","Hash","update","finish","other","Map","hashKey","put","entries","entry","oldValue","containsKey","getKeys","e","getValues","ss","AltDict","DoubleDict","count","arguments","Array","isArray","k","updateHashCode","hashStuff","d","o","escapeWhitespace","s","escapeSpaces","replace","titleCase","str","txt","charAt","toUpperCase","substr","equalArrays","exports","Token","source","type","channel","start","stop","tokenIndex","line","column","_text","INVALID_TYPE","EPSILON","MIN_USER_TOKEN_TYPE","EOF","DEFAULT_CHANNEL","HIDDEN_CHANNEL","text","getTokenSource","getInputStream","CommonToken","call","undefined","EMPTY_SOURCE","create","constructor","clone","t","input","n","size","getText","require","Interval","item","IntervalSet","intervals","readOnly","first","v","addOne","addInterval","addRange","h","splice","max","reduce","addSet","intervalslength","r","pop","complement","result","removeRange","len","removeOne","x","literalNames","symbolicNames","elemsAreChar","toTokenString","toCharString","toIndexString","names","fromCharCode","j","elementName","PredicateTransition","RecognitionException","params","Error","captureStackTrace","stack","message","recognizer","ctx","offendingToken","offendingState","state","getExpectedTokens","atn","LexerNoViableAltException","lexer","startIndex","deadEndConfigs","symbol","NoViableAltException","startToken","_ctx","getCurrentToken","InputMismatchException","FailedPredicateException","predicate","formatMessage","_interp","states","trans","transitions","ruleIndex","predicateIndex","predIndex","ParseCancellationException","INITIAL_NUM_TRANSITIONS","ATNState","stateNumber","INVALID_STATE_NUMBER","stateType","epsilonOnlyTransitions","nextTokenWithinRule","BASIC","RULE_START","BLOCK_START","PLUS_BLOCK_START","STAR_BLOCK_START","TOKEN_START","RULE_STOP","BLOCK_END","STAR_LOOP_BACK","STAR_LOOP_ENTRY","PLUS_LOOP_BACK","LOOP_END","serializationNames","isNonGreedyExitState","addTransition","index","isEpsilon","BasicState","DecisionState","decision","nonGreedy","BlockStartState","endState","BasicBlockStartState","BlockEndState","startState","RuleStopState","RuleStartState","stopState","isPrecedenceRule","PlusLoopbackState","PlusBlockStartState","loopBackState","StarBlockStartState","StarLoopbackState","StarLoopEntryState","isPrecedenceDecision","LoopEndState","TokensStartState","INVALID_INTERVAL","Utils","Tree","SyntaxTree","ParseTree","RuleNode","TerminalNode","ErrorNode","ParseTreeVisitor","visit","child","accept","visitChildren","children","visitTerminal","node","visitErrorNode","ParseTreeListener","enterEveryRule","exitEveryRule","TerminalNodeImpl","parentCtx","getChild","getSymbol","getParent","getPayload","getSourceInterval","getChildCount","visitor","ErrorNodeImpl","token","isErrorNode","ParseTreeWalker","walk","listener","errorNode","enterRule","exitRule","getRuleContext","DEFAULT","RuleContext","PredictionContext","cachedHashCode","EMPTY","EMPTY_RETURN_STATE","globalNodeCount","id","isEmpty","hasEmptyPath","getReturnState","PredictionContextCache","cache","existing","SingletonPredictionContext","parent","returnState","contructor","up","EmptyPredictionContext","ArrayPredictionContext","parents","returnStates","predictionContextFromRuleContext","outerContext","invokingState","transition","followState","merge","rootIsWildcard","mergeCache","mergeSingletons","mergeArrays","previous","rootMerge","mergeRoot","spc","singleParent","payloads","apc","a_","mergedReturnStates","mergedParents","a_parent","b_parent","payload","bothDollars","ax_ax","mergedParent","p","slice","M","combineCommonParents","uniqueParents","q","getCachedPredictionContext","context","contextCache","visited","changed","updated","getAllContextNodes","nodes","Predicate","PrecedencePredicate","Transition","target","label","RANGE","RULE","PREDICATE","ATOM","ACTION","SET","NOT_SET","WILDCARD","PRECEDENCE","serializationTypes","EpsilonTransition","RangeTransition","RuleTransition","AtomTransition","ActionTransition","SetTransition","NotSetTransition","WildcardTransition","PrecedencePredicateTransition","label_","makeLabel","serializationType","matches","minVocabSymbol","maxVocabSymbol","ruleStart","precedence","outermostPrecedenceReturn","AbstractPredicateTransition","isCtxDependent","getPredicate","actionIndex","LL1Analyzer","ATN","grammarType","maxTokenType","decisionToState","ruleToStartState","ruleToStopState","modeNameToStartState","ruleToTokenType","lexerActions","modeToStartState","nextTokensInContext","anal","LOOK","nextTokensNoContext","nextTokens","addState","removeState","defineDecisionState","getDecisionState","following","expected","rt","INVALID_ALT_NUMBER","SemanticContext","hashATNConfig","c","hashCodeForConfigSet","equalATNConfigs","equalsForConfigSet","ATNConfigSet","fullCtx","configLookup","configs","uniqueAlt","conflictingAlts","hasSemanticContext","dipsIntoOuterContext","config","semanticContext","NONE","reachesIntoOuterContext","merged","precedenceFilterSuppressed","getStates","getPredicates","preds","optimizeConfigs","interpreter","getCachedContext","addAll","coll","containsFast","clear","setReadonly","OrderedATNConfigSet","evaluate","parser","evalPrecedence","andContext","AND","opnds","orContext","OR","localctx","sempred","precpred","compareTo","filterPrecedencePredicates","operands","precedencePredicates","reduced","differs","evaluated","sort","PredPrediction","pred","DFAState","edges","isAcceptState","prediction","lexerActionExecutor","requiresFullContext","predicates","getAltSet","alts","ErrorListener","syntaxError","offendingSymbol","msg","reportAmbiguity","dfa","stopIndex","exact","ambigAlts","reportAttemptingFullContext","reportContextSensitivity","ConsoleErrorListener","INSTANCE","console","error","ProxyErrorListener","delegates","_loadString","stream","decodeToUnicodeCodePoints","_index","strdata","codePoint","codePointAt","codeUnit","_size","InputStream","name","reset","consume","LA","offset","pos","LT","mark","release","marker","seek","fromCodePoint","Recognizer","CommonTokenFactory","TokenSource","Lexer","_input","_factory","_tokenFactorySourcePair","_token","_tokenStartCharIndex","_tokenStartLine","_tokenStartColumn","_hitEOF","_channel","_type","_modeStack","_mode","DEFAULT_MODE","MORE","SKIP","DEFAULT_TOKEN_CHANNEL","HIDDEN","MIN_CHAR_VALUE","MAX_CHAR_VALUE","nextToken","tokenStartMarker","emitEOF","continueOuter","ttype","match","notifyListeners","recover","log","emit","skip","more","mode","m","pushMode","debug","popMode","sourceName","emitToken","getCharIndex","cpos","lpos","eof","getAllTokens","tokens","getErrorDisplay","getErrorListenerDispatch","getErrorDisplayForChar","getCharErrorDisplay","re","checkParams","isCfg","props","ATNConfig","checkContext","LexerATNConfig","passedThroughNonGreedyDecision","checkNonGreedyDecision","depth","getAltNumber","setAltNumber","altNumber","Trees","toStringTree","ruleNames","recog","ri","ruleName","DFASerializer","s0","buf","sortedStates","getStateString","getEdgeLabel","baseStateStr","LexerDFASerializer","codepointat","fromcodepoint","tree","CharStreams","FileStream","CommonTokenStream","Parser","pc","ParserRuleContext","invokingStateNumber","exception","copyFrom","addChild","removeLastChild","addTokenNode","addErrorNode","badToken","getToken","getTokens","getTypedRuleContext","ctxType","getTypedRuleContexts","contexts","InterpreterRuleContext","object","$defineProperty","position","TypeError","string","Number","second","stringFromCharCode","floor","_","MAX_SIZE","codeUnits","highSurrogate","lowSurrogate","isFinite","RangeError","BufferedTokenStream","adjustSeekIndex","nextTokenOnChannel","LB","previousTokenOnChannel","lazyInit","sync","getNumberOfOnChannelTokens","fill","_listeners","_stateNumber","tokenTypeMapCache","ruleIndexMapCache","checkVersion","toolVersion","runtimeVersion","addErrorListener","removeErrorListeners","getTokenTypeMap","tokenNames","getTokenNames","getRuleIndexMap","getTokenType","tokenName","getErrorHeader","getOffendingToken","getTokenErrorDisplay","getNodeText","res","getChildren","list","getAncestors","ancestors","findAllTokenNodes","findAllNodes","findAllRuleNodes","findTokens","_findAllNodes","descendants","ATNType","ATNStates","Transitions","ATNDeserializationOptions","LexerActions","LexerActionType","LexerSkipAction","LexerChannelAction","LexerCustomAction","LexerMoreAction","LexerTypeAction","LexerPushModeAction","LexerPopModeAction","LexerModeAction","BASE_SERIALIZED_UUID","ADDED_UNICODE_SMP","SUPPORTED_UUIDS","SERIALIZED_VERSION","SERIALIZED_UUID","initArray","tmp","ATNDeserializer","options","defaultOptions","deserializationOptions","stateFactories","actionFactories","isFeatureSupported","feature","actualUuid","idx1","idx2","deserialize","checkUUID","readATN","readStates","readRules","readModes","sets","readSets","readInt","bind","uuid","readInt32","readEdges","readDecisions","readLexerActions","markPrecedenceDecisions","verifyATN","generateRuleBypassTransitions","PARSER","adjust","temp","split","version","readUUID","pair","loopBackStateNumbers","endStateNumbers","nstates","stype","stateFactory","loopBackStateNumber","endStateNumber","numNonGreedyStates","numPrecedenceStates","nrules","LEXER","tokenType","nmodes","readUnicode","iset","containsEof","i1","i2","nedges","src","trg","arg1","arg2","arg3","edgeFactory","srcState","ndecisions","decState","actionType","data1","data2","lexerAction","lexerActionFactory","generateRuleBypassTransition","idx","bypassStart","bypassStop","excludeTransition","stateIsEndStateFor","matchState","maybeLoopEndState","checkCondition","condition","low","high","readLong","createByteToHex","bth","byteToHex","bb","int","sf","af","CHANNEL","CUSTOM","MODE","POP_MODE","PUSH_MODE","TYPE","LexerAction","action","isPositionDependent","execute","LexerIndexedCustomAction","ATNSimulator","sharedContextCache","ERROR","PredictionMode","SLL","LL","LL_EXACT_AMBIG_DETECTION","hasSLLConflictTerminatingPrediction","allConfigsInRuleStopStates","dup","items","altsets","getConflictingAltSubsets","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConfigInRuleStopState","resolvesToJustOneViableAlt","getSingleViableAlt","allSubsetsConflict","hasNonConflictingAltSet","allSubsetsEqual","getUniqueAlt","all","getAlts","configToAlts","cfg","getStateToAltMap","minAlt","Errors","ErrorStrategy","recoverInline","inErrorRecoveryMode","reportError","DefaultErrorStrategy","errorRecoveryMode","lastErrorIndex","lastErrorStates","endErrorCondition","beginErrorCondition","reportMatch","reportNoViableAlternative","reportInputMismatch","reportFailedPredicate","notifyErrorListeners","getMessage","followSet","getErrorRecoverySet","consumeUntil","la","getTokenStream","singleTokenDeletion","reportUnwantedToken","expecting","whatFollowsLoopIterationOrRule","escapeWSAndQuote","reportMissingToken","matchedSymbol","singleTokenInsertion","getMissingSymbol","currentSymbolType","currentState","next","expectingAtLL2","nextTokenType","currentSymbol","expectedTokenType","tokenText","current","lookback","getTokenFactory","recoverSet","follow","BailErrorStrategy","editor","edit","setTheme","getSession","setMode","Range","markers","on","errors","getValue","session","forEach","removeMarker","setAnnotations","row","addMarker","document","getElementById","onclick","alert","ace","define","module","oop","TextMode","Mode","TextHighlightRules","MyHighlightRules","keywordMapper","createKeywordMapper","$rules","regex","inherits","MyMode","HighlightRules","$id","validate","MyErrorListener","col","chars","buildParseTrees","prog","TokenStream","tokenSource","fetchedEOF","skipEofCheck","fetched","fetch","types","subset","setup","setTokenSource","getHiddenTokensToRight","nextOnChannel","from_","to","filterForChannel","getHiddenTokensToLeft","prevOnChannel","left","right","hidden","getSourceName","interval","TokenFactory","copyText","createThin","antlr4","serializedATN","decisionsToDFA","ds","DFA","ExprLexer","LexerATNSimulator","T__0","T__1","T__2","T__3","T__4","T__5","T__6","NEWLINE","INT","ID","WS","channelNames","modeNames","grammarFileName","ParserATNSimulator","HIT_PRED","getDecisionLookahead","look","lookBusy","seeThruPreds","_LOOK","lookContext","calledRuleStack","addEOF","removed","newContext","LexerActionExecutor","resetSimState","sim","dfaState","SimState","decisionToDFA","prevAccept","dfa_debug","MIN_DFA_EDGE","MAX_DFA_EDGE","match_calls","copyState","simulator","matchATN","execATN","old_mode","s0_closure","computeStartState","suppressEdge","addDFAState","predict","toLexerString","ds0","captureSimState","getExistingTargetState","computeTargetState","failOrAccept","reach","getReachableConfigSet","addDFAEdge","closure","skipAlt","currentAltReachedAcceptState","getTokenName","getReachableTarget","fixOffsetBeforeMatch","treatEofAsEpsilon","charPos","initialContext","speculative","getEpsilonTarget","evaluatePredicate","append","savedcolumn","savedLine","settings","tk","cfgs","proposed","firstConfigWithRuleStopState","newState","getDFA","curChar","tt","updatedLexerActions","requiresSeek","numActions","predictionMode","_startIndex","_outerContext","_dfa","debug_closure","debug_add","debug_list_atn_decisions","retry_debug","adaptivePredict","getLookaheadName","precedenceDfa","getPrecedenceStartState","getPrecedence","atnStartState","applyPrecedenceFilter","setPrecedenceStartState","previousD","D","noViableAlt","getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule","conflictIndex","evalSemanticContext","execATNWithFullContext","computeReachSet","predictedAlt","altSubSets","getConflictingAlts","predicateDFAState","decisionState","nalts","altsToCollectPredsFrom","getConflictingAltsOrUniqueAlt","altToPred","getPredsForAmbigAlts","getPredicatePredictions","foundExactAmbig","intermediate","skippedStopStates","closureBusy","removeAllConfigsNotInRuleStopState","lookToEndOfRule","endOfRuleState","statesFromAlt1","configSet","updatedContext","nPredAlts","pairs","containsPredicate","splitAccordingToSemanticValidity","semValidConfigs","semInvalidConfigs","getAltThatFinishedDecisionEntryRule","succeeded","failed","predicateEvaluationResult","predPredictions","complete","predictions","collectPredicates","initialDepth","closureCheckingStopState","getRuleName","closure_","parms","canDropLoopEntryEdgeInLeftRecursiveRule","continueCollecting","newDepth","numCtxs","decisionStartState","blockEndStateNum","blockEndState","returnStateNumber","returnStateTarget","inContext","ruleTransition","precedenceTransition","predTransition","actionTransition","pt","getRuleInvocationStack","currentPosition","predSucceeds","newSemCtx","dumpDeadEndConfigs","nvae","decs","getDeadEndConfigs","neg","_states","precedenceState","setPrecedenceDfa","DFAStatesSet","serializer","DiagnosticErrorListener","exactOnly","getDecisionDescription","reportedAlts","isNodeJs","window","importScripts","fs","fromString","fromBlob","blob","encoding","onLoad","onError","reader","FileReader","onload","is","onerror","readAsText","fromBuffer","buffer","fromPath","path","callback","readFile","err","fromPathSync","readFileSync","fileName","TraceListener","_errHandler","_precedenceStack","_tracer","_parseListeners","_syntaxErrors","setInputStream","bypassAltsAtnCache","setTrace","matchWildcard","_buildParseTrees","getParseListeners","addParseListener","removeParseListener","removeParseListeners","triggerEnterRuleEvent","triggerExitRuleEvent","reverse","setTokenFactory","factory","getATNWithBypassAlts","serializedAtn","getSerializedATN","compileParseTreePattern","pattern","patternRuleIndex","ParseTreePatternMatcher","compile","setTokenStream","hasListener","addContextToParseTree","enterOuterAlt","altNum","enterRecursionRule","pushNewRecursionContext","unrollRecursionContexts","retCtx","getInvokingContext","isExpectedToken","getExpectedTokensWithinCurrentRule","getRuleIndex","getDFAStrings","dumpDFA","seenOne","printer","println","print","trace","ExprVisitor","ExprParser","RULE_prog","RULE_stat","RULE_expr","ProgContext","stat","StatContext","visitProg","_la","PrintContext","expr","ExprContext","visitPrint","BlankContext","visitBlank","AssignContext","visitAssign","la_","OpExprContext","op","visitOpExpr","AtomExprContext","visitAtomExpr","ParenExprContext","visitParenExpr","IdExprContext","visitIdExpr","_p","_parentctx","_parentState","_prevctx","_startState","_alt","expr_sempred","run","results","ex","EvalVisitor","memory"],"mappings":"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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,eAAeE,EAAf,GAAoB,CAApB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAF,eAAeG,wBAAf,GAA0C,CAA1C;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAH,eAAeI,mCAAf,GAAqD,UAAU3P,IAAV,EAAgB/H,OAAhB,EAAyB;AAC1E;AACA;AACA;AACA;AACA;AACA,QAAIsX,eAAeK,0BAAf,CAA0C3X,OAA1C,CAAJ,EAAwD;AACpD,eAAO,IAAP;AACH;AACD;AACA,QAAI+H,SAASuP,eAAeC,GAA5B,EAAiC;AAC7B;AACA;AACA;AACA,YAAIvX,QAAQG,kBAAZ,EAAgC;AAC5B;AACA,gBAAIyX,MAAM,IAAI/X,YAAJ,EAAV;AACA,iBAAI,IAAItY,IAAE,CAAV,EAAYA,IAAEyY,QAAQ6X,KAAR,CAAcnwB,MAA5B,EAAmCH,GAAnC,EAAwC;AACvC,oBAAIkY,IAAIO,QAAQ6X,KAAR,CAActwB,CAAd,CAAR;AACGkY,oBAAI,IAAI2J,SAAJ,CAAc,EAAC9I,iBAAgBf,gBAAgBgB,IAAjC,EAAd,EAAsDd,CAAtD,CAAJ;AACAmY,oBAAInvB,GAAJ,CAAQgX,CAAR;AACH;AACDO,sBAAU4X,GAAV;AACH;AACD;AACH;AACD;AACA,QAAIE,UAAUR,eAAeS,wBAAf,CAAwC/X,OAAxC,CAAd;AACA,WAAOsX,eAAeU,oBAAf,CAAoCF,OAApC,KAAgD,CAACR,eAAeW,4BAAf,CAA4CjY,OAA5C,CAAxD;AACH,CA7BD;;AA+BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAsX,eAAeY,wBAAf,GAA0C,UAASlY,OAAT,EAAkB;AAC3D,SAAI,IAAIzY,IAAE,CAAV,EAAYA,IAAEyY,QAAQ6X,KAAR,CAAcnwB,MAA5B,EAAmCH,GAAnC,EAAwC;AACvC,YAAIkY,IAAIO,QAAQ6X,KAAR,CAActwB,CAAd,CAAR;AACM,YAAIkY,EAAE3O,KAAF,YAAmByD,aAAvB,EAAsC;AAClC,mBAAO,IAAP;AACH;AACP;AACE,WAAO,KAAP;AACH,CARD;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA+iB,eAAeK,0BAAf,GAA4C,UAAS3X,OAAT,EAAkB;AAC7D,SAAI,IAAIzY,IAAE,CAAV,EAAYA,IAAEyY,QAAQ6X,KAAR,CAAcnwB,MAA5B,EAAmCH,GAAnC,EAAwC;AACvC,YAAIkY,IAAIO,QAAQ6X,KAAR,CAActwB,CAAd,CAAR;AACM,YAAI,EAAEkY,EAAE3O,KAAF,YAAmByD,aAArB,CAAJ,EAAyC;AACrC,mBAAO,KAAP;AACH;AACP;AACE,WAAO,IAAP;AACH,CARD;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA+iB,eAAea,0BAAf,GAA4C,UAASL,OAAT,EAAkB;AAC1D,WAAOR,eAAec,kBAAf,CAAkCN,OAAlC,CAAP;AACH,CAFD;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,eAAee,kBAAf,GAAoC,UAASP,OAAT,EAAkB;AAClD,WAAO,CAAER,eAAegB,uBAAf,CAAuCR,OAAvC,CAAT;AACH,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAR,eAAegB,uBAAf,GAAyC,UAASR,OAAT,EAAkB;AAC1D,SAAI,IAAIvwB,IAAE,CAAV,EAAYA,IAAEuwB,QAAQpwB,MAAtB,EAA6BH,GAA7B,EAAkC;AACjC,YAAI6b,OAAO0U,QAAQvwB,CAAR,CAAX;AACM,YAAI6b,KAAK1b,MAAL,KAAc,CAAlB,EAAqB;AACjB,mBAAO,IAAP;AACH;AACP;AACE,WAAO,KAAP;AACH,CARD;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA4vB,eAAeU,oBAAf,GAAsC,UAASF,OAAT,EAAkB;AACvD,SAAI,IAAIvwB,IAAE,CAAV,EAAYA,IAAEuwB,QAAQpwB,MAAtB,EAA6BH,GAA7B,EAAkC;AACjC,YAAI6b,OAAO0U,QAAQvwB,CAAR,CAAX;AACM,YAAI6b,KAAK1b,MAAL,GAAY,CAAhB,EAAmB;AACf,mBAAO,IAAP;AACH;AACP;AACE,WAAO,KAAP;AACH,CARD;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA4vB,eAAeiB,eAAf,GAAiC,UAAST,OAAT,EAA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IAAI,KAAKlqB,cAAL,IAAuBhO,MAAMgO,cAAjC,EAAiD;AACvD,SAAO,KAAP;AACA,EAFM,MAEA,IAAI,KAAK0G,YAAL,CAAkB9W,MAAlB,IAA4BoC,MAAM0U,YAAN,CAAmB9W,MAAnD,EAA2D;AACjE,SAAO,KAAP;AACA,EAFM,MAEA;AACN,MAAI89B,aAAa,KAAKhnB,YAAL,CAAkB9W,MAAnC;AACA,OAAK,IAAI2tB,MAAM,CAAf,EAAkBA,MAAMmQ,UAAxB,EAAoC,EAAEnQ,GAAtC,EAA2C;AAC1C,OAAI,CAAC,KAAK7W,YAAL,CAAkB6W,GAAlB,EAAuBvtB,MAAvB,CAA8BgC,MAAM0U,YAAN,CAAmB6W,GAAnB,CAA9B,CAAL,EAA6D;AAC5D,WAAO,KAAP;AACA;AACD;AACD,SAAO,IAAP;AACA;AACD,CAlBD;;AAoBArpB,QAAQg2B,mBAAR,GAA8BA,mBAA9B,C;;;;;;;;;ACrKA;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 32);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0c0754cf603c52ce8b72","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction arrayToString(a) {\n    return \"[\" + a.join(\", \") + \"]\";\n}\n\nString.prototype.seed = String.prototype.seed || Math.round(Math.random() * Math.pow(2, 32));\n\nString.prototype.hashCode = function () {\n    var remainder, bytes, h1, h1b, c1, c1b, c2, c2b, k1, i,\n        key = this.toString();\n\n    remainder = key.length & 3; // key.length % 4\n    bytes = key.length - remainder;\n    h1 = String.prototype.seed;\n    c1 = 0xcc9e2d51;\n    c2 = 0x1b873593;\n    i = 0;\n\n    while (i < bytes) {\n        k1 =\n            ((key.charCodeAt(i) & 0xff)) |\n            ((key.charCodeAt(++i) & 0xff) << 8) |\n            ((key.charCodeAt(++i) & 0xff) << 16) |\n            ((key.charCodeAt(++i) & 0xff) << 24);\n        ++i;\n\n        k1 = ((((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16))) & 0xffffffff;\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16))) & 0xffffffff;\n\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1b = ((((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16))) & 0xffffffff;\n        h1 = (((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16));\n    }\n\n    k1 = 0;\n\n    switch (remainder) {\n        case 3:\n            k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;\n        case 2:\n            k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;\n        case 1:\n            k1 ^= (key.charCodeAt(i) & 0xff);\n\n            k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;\n            k1 = (k1 << 15) | (k1 >>> 17);\n            k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;\n            h1 ^= k1;\n    }\n\n    h1 ^= key.length;\n\n    h1 ^= h1 >>> 16;\n    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;\n    h1 ^= h1 >>> 13;\n    h1 = ((((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16))) & 0xffffffff;\n    h1 ^= h1 >>> 16;\n\n    return h1 >>> 0;\n};\n\nfunction standardEqualsFunction(a, b) {\n    return a.equals(b);\n}\n\nfunction standardHashCodeFunction(a) {\n    return a.hashCode();\n}\n\nfunction Set(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n    return this;\n}\n\nObject.defineProperty(Set.prototype, \"length\", {\n    get: function () {\n        var l = 0;\n        for (var key in this.data) {\n            if (key.indexOf(\"hash_\") === 0) {\n                l = l + this.data[key].length;\n            }\n        }\n        return l;\n    }\n});\n\nSet.prototype.add = function (value) {\n    var hash = this.hashFunction(value);\n    var key = \"hash_\" + hash;\n    if (key in this.data) {\n        var values = this.data[key];\n        for (var i = 0; i < values.length; i++) {\n            if (this.equalsFunction(value, values[i])) {\n                return values[i];\n            }\n        }\n        values.push(value);\n        return value;\n    } else {\n        this.data[key] = [value];\n        return value;\n    }\n};\n\nSet.prototype.contains = function (value) {\n    return this.get(value) != null;\n};\n\nSet.prototype.get = function (value) {\n    var hash = this.hashFunction(value);\n    var key = \"hash_\" + hash;\n    if (key in this.data) {\n        var values = this.data[key];\n        for (var i = 0; i < values.length; i++) {\n            if (this.equalsFunction(value, values[i])) {\n                return values[i];\n            }\n        }\n    }\n    return null;\n};\n\nSet.prototype.values = function () {\n    var l = [];\n    for (var key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n            l = l.concat(this.data[key]);\n        }\n    }\n    return l;\n};\n\nSet.prototype.toString = function () {\n    return arrayToString(this.values());\n};\n\nfunction BitSet() {\n    this.data = [];\n    return this;\n}\n\nBitSet.prototype.add = function (value) {\n    this.data[value] = true;\n};\n\nBitSet.prototype.or = function (set) {\n    var bits = this;\n    Object.keys(set.data).map(function (alt) {\n        bits.add(alt);\n    });\n};\n\nBitSet.prototype.remove = function (value) {\n    delete this.data[value];\n};\n\nBitSet.prototype.contains = function (value) {\n    return this.data[value] === true;\n};\n\nBitSet.prototype.values = function () {\n    return Object.keys(this.data);\n};\n\nBitSet.prototype.minValue = function () {\n    return Math.min.apply(null, this.values());\n};\n\nBitSet.prototype.hashCode = function () {\n    var hash = new Hash();\n    hash.update(this.values());\n    return hash.finish();\n};\n\nBitSet.prototype.equals = function (other) {\n    if (!(other instanceof BitSet)) {\n        return false;\n    }\n    return this.hashCode() === other.hashCode();\n};\n\nObject.defineProperty(BitSet.prototype, \"length\", {\n    get: function () {\n        return this.values().length;\n    }\n});\n\nBitSet.prototype.toString = function () {\n    return \"{\" + this.values().join(\", \") + \"}\";\n};\n\nfunction Map(hashFunction, equalsFunction) {\n    this.data = {};\n    this.hashFunction = hashFunction || standardHashCodeFunction;\n    this.equalsFunction = equalsFunction || standardEqualsFunction;\n    return this;\n}\n\nObject.defineProperty(Map.prototype, \"length\", {\n    get: function () {\n        var l = 0;\n        for (var hashKey in this.data) {\n            if (hashKey.indexOf(\"hash_\") === 0) {\n                l = l + this.data[hashKey].length;\n            }\n        }\n        return l;\n    }\n});\n\nMap.prototype.put = function (key, value) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if (hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key)) {\n                var oldValue = entry.value;\n                entry.value = value;\n                return oldValue;\n            }\n        }\n        entries.push({key:key, value:value});\n        return value;\n    } else {\n        this.data[hashKey] = [{key:key, value:value}];\n        return value;\n    }\n};\n\nMap.prototype.containsKey = function (key) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if(hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key))\n                return true;\n        }\n    }\n    return false;\n};\n\nMap.prototype.get = function (key) {\n    var hashKey = \"hash_\" + this.hashFunction(key);\n    if(hashKey in this.data) {\n        var entries = this.data[hashKey];\n        for (var i = 0; i < entries.length; i++) {\n            var entry = entries[i];\n            if (this.equalsFunction(key, entry.key))\n                return entry.value;\n        }\n    }\n    return null;\n};\n\nMap.prototype.entries = function () {\n    var l = [];\n    for (var key in this.data) {\n        if (key.indexOf(\"hash_\") === 0) {\n            l = l.concat(this.data[key]);\n        }\n    }\n    return l;\n};\n\n\nMap.prototype.getKeys = function () {\n    return this.entries().map(function(e) {\n        return e.key;\n    });\n};\n\n\nMap.prototype.getValues = function () {\n    return this.entries().map(function(e) {\n            return e.value;\n    });\n};\n\n\nMap.prototype.toString = function () {\n    var ss = this.entries().map(function(entry) {\n        return '{' + entry.key + ':' + entry.value + '}';\n    });\n    return '[' + ss.join(\", \") + ']';\n};\n\n\nfunction AltDict() {\n    this.data = {};\n    return this;\n}\n\n\nAltDict.prototype.get = function (key) {\n    key = \"k-\" + key;\n    if (key in this.data) {\n        return this.data[key];\n    } else {\n        return null;\n    }\n};\n\nAltDict.prototype.put = function (key, value) {\n    key = \"k-\" + key;\n    this.data[key] = value;\n};\n\nAltDict.prototype.values = function () {\n    var data = this.data;\n    var keys = Object.keys(this.data);\n    return keys.map(function (key) {\n        return data[key];\n    });\n};\n\nfunction DoubleDict() {\n    return this;\n}\n\nfunction Hash() {\n    this.count = 0;\n    this.hash = 0;\n    return this;\n}\n\nHash.prototype.update = function () {\n    for(var i=0;i<arguments.length;i++) {\n        var value = arguments[i];\n        if (value == null)\n            continue;\n        if(Array.isArray(value))\n            this.update.apply(value);\n        else {\n            var k = 0;\n            switch (typeof(value)) {\n                case 'undefined':\n                case 'function':\n                    continue;\n                case 'number':\n                case 'boolean':\n                    k = value;\n                    break;\n                case 'string':\n                    k = value.hashCode();\n                    break;\n                default:\n                    value.updateHashCode(this);\n                    continue;\n            }\n            k = k * 0xCC9E2D51;\n            k = (k << 15) | (k >>> (32 - 15));\n            k = k * 0x1B873593;\n            this.count = this.count + 1;\n            var hash = this.hash ^ k;\n            hash = (hash << 13) | (hash >>> (32 - 13));\n            hash = hash * 5 + 0xE6546B64;\n            this.hash = hash;\n        }\n    }\n}\n\nHash.prototype.finish = function () {\n    var hash = this.hash ^ (this.count * 4);\n    hash = hash ^ (hash >>> 16);\n    hash = hash * 0x85EBCA6B;\n    hash = hash ^ (hash >>> 13);\n    hash = hash * 0xC2B2AE35;\n    hash = hash ^ (hash >>> 16);\n    return hash;\n}\n\nfunction hashStuff() {\n    var hash = new Hash();\n    hash.update.apply(arguments);\n    return hash.finish();\n}\n\nDoubleDict.prototype.get = function (a, b) {\n    var d = this[a] || null;\n    return d === null ? null : (d[b] || null);\n};\n\nDoubleDict.prototype.set = function (a, b, o) {\n    var d = this[a] || null;\n    if (d === null) {\n        d = {};\n        this[a] = d;\n    }\n    d[b] = o;\n};\n\n\nfunction escapeWhitespace(s, escapeSpaces) {\n    s = s.replace(\"\\t\", \"\\\\t\");\n    s = s.replace(\"\\n\", \"\\\\n\");\n    s = s.replace(\"\\r\", \"\\\\r\");\n    if (escapeSpaces) {\n        s = s.replace(\" \", \"\\u00B7\");\n    }\n    return s;\n}\n\nfunction titleCase(str) {\n    return str.replace(/\\w\\S*/g, function (txt) {\n        return txt.charAt(0).toUpperCase() + txt.substr(1);\n    });\n};\n\nfunction equalArrays(a, b)\n{\n    if (!Array.isArray(a) || !Array.isArray(b))\n        return false;\n    if (a == b)\n        return true;\n    if (a.length != b.length)\n        return false;\n    for (var i = 0; i < a.length; i++) {\n        if (a[i] == b[i])\n            continue;\n        if (!a[i].equals(b[i]))\n            return false;\n    }\n    return true;\n};\n\nexports.Hash = Hash;\nexports.Set = Set;\nexports.Map = Map;\nexports.BitSet = BitSet;\nexports.AltDict = AltDict;\nexports.DoubleDict = DoubleDict;\nexports.hashStuff = hashStuff;\nexports.escapeWhitespace = escapeWhitespace;\nexports.arrayToString = arrayToString;\nexports.titleCase = titleCase;\nexports.equalArrays = equalArrays;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/Utils.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// A token has properties: text, type, line, character position in the line\n// (so we can ignore tabs), token channel, index, and source from which\n// we obtained this token.\n\nfunction Token() {\n\tthis.source = null;\n\tthis.type = null; // token type of the token\n\tthis.channel = null; // The parser ignores everything not on DEFAULT_CHANNEL\n\tthis.start = null; // optional; return -1 if not implemented.\n\tthis.stop = null; // optional; return -1 if not implemented.\n\tthis.tokenIndex = null; // from 0..n-1 of the token object in the input stream\n\tthis.line = null; // line=1..n of the 1st character\n\tthis.column = null; // beginning of the line at which it occurs, 0..n-1\n\tthis._text = null; // text of the token.\n\treturn this;\n}\n\nToken.INVALID_TYPE = 0;\n\n// During lookahead operations, this \"token\" signifies we hit rule end ATN state\n// and did not follow it despite needing to.\nToken.EPSILON = -2;\n\nToken.MIN_USER_TOKEN_TYPE = 1;\n\nToken.EOF = -1;\n\n// All tokens go to the parser (unless skip() is called in that rule)\n// on a particular \"channel\". The parser tunes to a particular channel\n// so that whitespace etc... can go to the parser on a \"hidden\" channel.\n\nToken.DEFAULT_CHANNEL = 0;\n\n// Anything on different channel than DEFAULT_CHANNEL is not parsed\n// by parser.\n\nToken.HIDDEN_CHANNEL = 1;\n\n// Explicitly set the text for this token. If {code text} is not\n// {@code null}, then {@link //getText} will return this value rather than\n// extracting the text from the input.\n//\n// @param text The explicit text of the token, or {@code null} if the text\n// should be obtained from the input along with the start and stop indexes\n// of the token.\n\nObject.defineProperty(Token.prototype, \"text\", {\n\tget : function() {\n\t\treturn this._text;\n\t},\n\tset : function(text) {\n\t\tthis._text = text;\n\t}\n});\n\nToken.prototype.getTokenSource = function() {\n\treturn this.source[0];\n};\n\nToken.prototype.getInputStream = function() {\n\treturn this.source[1];\n};\n\nfunction CommonToken(source, type, channel, start, stop) {\n\tToken.call(this);\n\tthis.source = source !== undefined ? source : CommonToken.EMPTY_SOURCE;\n\tthis.type = type !== undefined ? type : null;\n\tthis.channel = channel !== undefined ? channel : Token.DEFAULT_CHANNEL;\n\tthis.start = start !== undefined ? start : -1;\n\tthis.stop = stop !== undefined ? stop : -1;\n\tthis.tokenIndex = -1;\n\tif (this.source[0] !== null) {\n\t\tthis.line = source[0].line;\n\t\tthis.column = source[0].column;\n\t} else {\n\t\tthis.column = -1;\n\t}\n\treturn this;\n}\n\nCommonToken.prototype = Object.create(Token.prototype);\nCommonToken.prototype.constructor = CommonToken;\n\n// An empty {@link Pair} which is used as the default value of\n// {@link //source} for tokens that do not have a source.\nCommonToken.EMPTY_SOURCE = [ null, null ];\n\n// Constructs a new {@link CommonToken} as a copy of another {@link Token}.\n//\n// <p>\n// If {@code oldToken} is also a {@link CommonToken} instance, the newly\n// constructed token will share a reference to the {@link //text} field and\n// the {@link Pair} stored in {@link //source}. Otherwise, {@link //text} will\n// be assigned the result of calling {@link //getText}, and {@link //source}\n// will be constructed from the result of {@link Token//getTokenSource} and\n// {@link Token//getInputStream}.</p>\n//\n// @param oldToken The token to copy.\n//\nCommonToken.prototype.clone = function() {\n\tvar t = new CommonToken(this.source, this.type, this.channel, this.start,\n\t\t\tthis.stop);\n\tt.tokenIndex = this.tokenIndex;\n\tt.line = this.line;\n\tt.column = this.column;\n\tt.text = this.text;\n\treturn t;\n};\n\nObject.defineProperty(CommonToken.prototype, \"text\", {\n\tget : function() {\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t}\n\t\tvar input = this.getInputStream();\n\t\tif (input === null) {\n\t\t\treturn null;\n\t\t}\n\t\tvar n = input.size;\n\t\tif (this.start < n && this.stop < n) {\n\t\t\treturn input.getText(this.start, this.stop);\n\t\t} else {\n\t\t\treturn \"<EOF>\";\n\t\t}\n\t},\n\tset : function(text) {\n\t\tthis._text = text;\n\t}\n});\n\nCommonToken.prototype.toString = function() {\n\tvar txt = this.text;\n\tif (txt !== null) {\n\t\ttxt = txt.replace(/\\n/g, \"\\\\n\").replace(/\\r/g, \"\\\\r\").replace(/\\t/g, \"\\\\t\");\n\t} else {\n\t\ttxt = \"<no text>\";\n\t}\n\treturn \"[@\" + this.tokenIndex + \",\" + this.start + \":\" + this.stop + \"='\" +\n\t\t\ttxt + \"',<\" + this.type + \">\" +\n\t\t\t(this.channel > 0 ? \",channel=\" + this.channel : \"\") + \",\" +\n\t\t\tthis.line + \":\" + this.column + \"]\";\n};\n\nexports.Token = Token;\nexports.CommonToken = CommonToken;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/Token.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n/*jslint smarttabs:true */\n\nvar Token = require('./Token').Token;\n\n/* stop is not included! */\nfunction Interval(start, stop) {\n\tthis.start = start;\n\tthis.stop = stop;\n\treturn this;\n}\n\nInterval.prototype.contains = function(item) {\n\treturn item >= this.start && item < this.stop;\n};\n\nInterval.prototype.toString = function() {\n\tif(this.start===this.stop-1) {\n\t\treturn this.start.toString();\n\t} else {\n\t\treturn this.start.toString() + \"..\" + (this.stop-1).toString();\n\t}\n};\n\n\nObject.defineProperty(Interval.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.stop - this.start;\n\t}\n});\n\nfunction IntervalSet() {\n\tthis.intervals = null;\n\tthis.readOnly = false;\n}\n\nIntervalSet.prototype.first = function(v) {\n\tif (this.intervals === null || this.intervals.length===0) {\n\t\treturn Token.INVALID_TYPE;\n\t} else {\n\t\treturn this.intervals[0].start;\n\t}\n};\n\nIntervalSet.prototype.addOne = function(v) {\n\tthis.addInterval(new Interval(v, v + 1));\n};\n\nIntervalSet.prototype.addRange = function(l, h) {\n\tthis.addInterval(new Interval(l, h + 1));\n};\n\nIntervalSet.prototype.addInterval = function(v) {\n\tif (this.intervals === null) {\n\t\tthis.intervals = [];\n\t\tthis.intervals.push(v);\n\t} else {\n\t\t// find insert pos\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tvar i = this.intervals[k];\n\t\t\t// distinct range -> insert\n\t\t\tif (v.stop < i.start) {\n\t\t\t\tthis.intervals.splice(k, 0, v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// contiguous range -> adjust\n\t\t\telse if (v.stop === i.start) {\n\t\t\t\tthis.intervals[k].start = v.start;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// overlapping range -> adjust and reduce\n\t\t\telse if (v.start <= i.stop) {\n\t\t\t\tthis.intervals[k] = new Interval(Math.min(i.start, v.start), Math.max(i.stop, v.stop));\n\t\t\t\tthis.reduce(k);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t// greater than any existing\n\t\tthis.intervals.push(v);\n\t}\n};\n\nIntervalSet.prototype.addSet = function(other) {\n\tif (other.intervals !== null) {\n\t\tfor (var k = 0; k < other.intervals.length; k++) {\n\t\t\tvar i = other.intervals[k];\n\t\t\tthis.addInterval(new Interval(i.start, i.stop));\n\t\t}\n\t}\n\treturn this;\n};\n\nIntervalSet.prototype.reduce = function(k) {\n\t// only need to reduce if k is not the last\n\tif (k < this.intervalslength - 1) {\n\t\tvar l = this.intervals[k];\n\t\tvar r = this.intervals[k + 1];\n\t\t// if r contained in l\n\t\tif (l.stop >= r.stop) {\n\t\t\tthis.intervals.pop(k + 1);\n\t\t\tthis.reduce(k);\n\t\t} else if (l.stop >= r.start) {\n\t\t\tthis.intervals[k] = new Interval(l.start, r.stop);\n\t\t\tthis.intervals.pop(k + 1);\n\t\t}\n\t}\n};\n\nIntervalSet.prototype.complement = function(start, stop) {\n    var result = new IntervalSet();\n    result.addInterval(new Interval(start,stop+1));\n    for(var i=0; i<this.intervals.length; i++) {\n        result.removeRange(this.intervals[i]);\n    }\n    return result;\n};\n\nIntervalSet.prototype.contains = function(item) {\n\tif (this.intervals === null) {\n\t\treturn false;\n\t} else {\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tif(this.intervals[k].contains(item)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n};\n\nObject.defineProperty(IntervalSet.prototype, \"length\", {\n\tget : function() {\n\t\tvar len = 0;\n\t\tthis.intervals.map(function(i) {len += i.length;});\n\t\treturn len;\n\t}\n});\n\nIntervalSet.prototype.removeRange = function(v) {\n    if(v.start===v.stop-1) {\n        this.removeOne(v.start);\n    } else if (this.intervals!==null) {\n        var k = 0;\n        for(var n=0; n<this.intervals.length; n++) {\n            var i = this.intervals[k];\n            // intervals are ordered\n            if (v.stop<=i.start) {\n                return;\n            }\n            // check for including range, split it\n            else if(v.start>i.start && v.stop<i.stop) {\n                this.intervals[k] = new Interval(i.start, v.start);\n                var x = new Interval(v.stop, i.stop);\n                this.intervals.splice(k, 0, x);\n                return;\n            }\n            // check for included range, remove it\n            else if(v.start<=i.start && v.stop>=i.stop) {\n                this.intervals.splice(k, 1);\n                k = k - 1; // need another pass\n            }\n            // check for lower boundary\n            else if(v.start<i.stop) {\n                this.intervals[k] = new Interval(i.start, v.start);\n            }\n            // check for upper boundary\n            else if(v.stop<i.stop) {\n                this.intervals[k] = new Interval(v.stop, i.stop);\n            }\n            k += 1;\n        }\n    }\n};\n\nIntervalSet.prototype.removeOne = function(v) {\n\tif (this.intervals !== null) {\n\t\tfor (var k = 0; k < this.intervals.length; k++) {\n\t\t\tvar i = this.intervals[k];\n\t\t\t// intervals is ordered\n\t\t\tif (v < i.start) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for single value range\n\t\t\telse if (v === i.start && v === i.stop - 1) {\n\t\t\t\tthis.intervals.splice(k, 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for lower boundary\n\t\t\telse if (v === i.start) {\n\t\t\t\tthis.intervals[k] = new Interval(i.start + 1, i.stop);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// check for upper boundary\n\t\t\telse if (v === i.stop - 1) {\n\t\t\t\tthis.intervals[k] = new Interval(i.start, i.stop - 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// split existing range\n\t\t\telse if (v < i.stop - 1) {\n\t\t\t\tvar x = new Interval(i.start, v);\n\t\t\t\ti.start = v + 1;\n\t\t\t\tthis.intervals.splice(k, 0, x);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n};\n\nIntervalSet.prototype.toString = function(literalNames, symbolicNames, elemsAreChar) {\n\tliteralNames = literalNames || null;\n\tsymbolicNames = symbolicNames || null;\n\telemsAreChar = elemsAreChar || false;\n\tif (this.intervals === null) {\n\t\treturn \"{}\";\n\t} else if(literalNames!==null || symbolicNames!==null) {\n\t\treturn this.toTokenString(literalNames, symbolicNames);\n\t} else if(elemsAreChar) {\n\t\treturn this.toCharString();\n\t} else {\n\t\treturn this.toIndexString();\n\t}\n};\n\nIntervalSet.prototype.toCharString = function() {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tif(v.stop===v.start+1) {\n\t\t\tif ( v.start===Token.EOF ) {\n\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t} else {\n\t\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'\");\n\t\t\t}\n\t\t} else {\n\t\t\tnames.push(\"'\" + String.fromCharCode(v.start) + \"'..'\" + String.fromCharCode(v.stop-1) + \"'\");\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\n\nIntervalSet.prototype.toIndexString = function() {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tif(v.stop===v.start+1) {\n\t\t\tif ( v.start===Token.EOF ) {\n\t\t\t\tnames.push(\"<EOF>\");\n\t\t\t} else {\n\t\t\t\tnames.push(v.start.toString());\n\t\t\t}\n\t\t} else {\n\t\t\tnames.push(v.start.toString() + \"..\" + (v.stop-1).toString());\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\n\nIntervalSet.prototype.toTokenString = function(literalNames, symbolicNames) {\n\tvar names = [];\n\tfor (var i = 0; i < this.intervals.length; i++) {\n\t\tvar v = this.intervals[i];\n\t\tfor (var j = v.start; j < v.stop; j++) {\n\t\t\tnames.push(this.elementName(literalNames, symbolicNames, j));\n\t\t}\n\t}\n\tif (names.length > 1) {\n\t\treturn \"{\" + names.join(\", \") + \"}\";\n\t} else {\n\t\treturn names[0];\n\t}\n};\n\nIntervalSet.prototype.elementName = function(literalNames, symbolicNames, a) {\n\tif (a === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else if (a === Token.EPSILON) {\n\t\treturn \"<EPSILON>\";\n\t} else {\n\t\treturn literalNames[a] || symbolicNames[a];\n\t}\n};\n\nexports.Interval = Interval;\nexports.IntervalSet = IntervalSet;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/IntervalSet.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// The root of the ANTLR exception hierarchy. In general, ANTLR tracks just\n//  3 kinds of errors: prediction errors, failed predicate errors, and\n//  mismatched input errors. In each case, the parser knows where it is\n//  in the input, where it is in the ATN, the rule invocation stack,\n//  and what kind of problem occurred.\n\nvar PredicateTransition = require('./../atn/Transition').PredicateTransition;\n\nfunction RecognitionException(params) {\n\tError.call(this);\n\tif (!!Error.captureStackTrace) {\n        Error.captureStackTrace(this, RecognitionException);\n\t} else {\n\t\tvar stack = new Error().stack;\n\t}\n\tthis.message = params.message;\n    this.recognizer = params.recognizer;\n    this.input = params.input;\n    this.ctx = params.ctx;\n    // The current {@link Token} when an error occurred. Since not all streams\n    // support accessing symbols by index, we have to track the {@link Token}\n    // instance itself.\n    this.offendingToken = null;\n    // Get the ATN state number the parser was in at the time the error\n    // occurred. For {@link NoViableAltException} and\n    // {@link LexerNoViableAltException} exceptions, this is the\n    // {@link DecisionState} number. For others, it is the state whose outgoing\n    // edge we couldn't match.\n    this.offendingState = -1;\n    if (this.recognizer!==null) {\n        this.offendingState = this.recognizer.state;\n    }\n    return this;\n}\n\nRecognitionException.prototype = Object.create(Error.prototype);\nRecognitionException.prototype.constructor = RecognitionException;\n\n// <p>If the state number is not known, this method returns -1.</p>\n\n//\n// Gets the set of input symbols which could potentially follow the\n// previously matched symbol at the time this exception was thrown.\n//\n// <p>If the set of expected tokens is not known and could not be computed,\n// this method returns {@code null}.</p>\n//\n// @return The set of token types that could potentially follow the current\n// state in the ATN, or {@code null} if the information is not available.\n// /\nRecognitionException.prototype.getExpectedTokens = function() {\n    if (this.recognizer!==null) {\n        return this.recognizer.atn.getExpectedTokens(this.offendingState, this.ctx);\n    } else {\n        return null;\n    }\n};\n\nRecognitionException.prototype.toString = function() {\n    return this.message;\n};\n\nfunction LexerNoViableAltException(lexer, input, startIndex, deadEndConfigs) {\n\tRecognitionException.call(this, {message:\"\", recognizer:lexer, input:input, ctx:null});\n    this.startIndex = startIndex;\n    this.deadEndConfigs = deadEndConfigs;\n    return this;\n}\n\nLexerNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nLexerNoViableAltException.prototype.constructor = LexerNoViableAltException;\n\nLexerNoViableAltException.prototype.toString = function() {\n    var symbol = \"\";\n    if (this.startIndex >= 0 && this.startIndex < this.input.size) {\n        symbol = this.input.getText((this.startIndex,this.startIndex));\n    }\n    return \"LexerNoViableAltException\" + symbol;\n};\n\n// Indicates that the parser could not decide which of two or more paths\n// to take based upon the remaining input. It tracks the starting token\n// of the offending input and also knows where the parser was\n// in the various paths when the error. Reported by reportNoViableAlternative()\n//\nfunction NoViableAltException(recognizer, input, startToken, offendingToken, deadEndConfigs, ctx) {\n\tctx = ctx || recognizer._ctx;\n\toffendingToken = offendingToken || recognizer.getCurrentToken();\n\tstartToken = startToken || recognizer.getCurrentToken();\n\tinput = input || recognizer.getInputStream();\n\tRecognitionException.call(this, {message:\"\", recognizer:recognizer, input:input, ctx:ctx});\n    // Which configurations did we try at input.index() that couldn't match\n\t// input.LT(1)?//\n    this.deadEndConfigs = deadEndConfigs;\n    // The token object at the start index; the input stream might\n    // not be buffering tokens so get a reference to it. (At the\n    // time the error occurred, of course the stream needs to keep a\n    // buffer all of the tokens but later we might not have access to those.)\n    this.startToken = startToken;\n    this.offendingToken = offendingToken;\n}\n\nNoViableAltException.prototype = Object.create(RecognitionException.prototype);\nNoViableAltException.prototype.constructor = NoViableAltException;\n\n// This signifies any kind of mismatched input exceptions such as\n// when the current input does not match the expected token.\n//\nfunction InputMismatchException(recognizer) {\n\tRecognitionException.call(this, {message:\"\", recognizer:recognizer, input:recognizer.getInputStream(), ctx:recognizer._ctx});\n    this.offendingToken = recognizer.getCurrentToken();\n}\n\nInputMismatchException.prototype = Object.create(RecognitionException.prototype);\nInputMismatchException.prototype.constructor = InputMismatchException;\n\n// A semantic predicate failed during validation. Validation of predicates\n// occurs when normally parsing the alternative just like matching a token.\n// Disambiguating predicate evaluation occurs when we test a predicate during\n// prediction.\n\nfunction FailedPredicateException(recognizer, predicate, message) {\n\tRecognitionException.call(this, {message:this.formatMessage(predicate,message || null), recognizer:recognizer,\n                         input:recognizer.getInputStream(), ctx:recognizer._ctx});\n    var s = recognizer._interp.atn.states[recognizer.state];\n    var trans = s.transitions[0];\n    if (trans instanceof PredicateTransition) {\n        this.ruleIndex = trans.ruleIndex;\n        this.predicateIndex = trans.predIndex;\n    } else {\n        this.ruleIndex = 0;\n        this.predicateIndex = 0;\n    }\n    this.predicate = predicate;\n    this.offendingToken = recognizer.getCurrentToken();\n    return this;\n}\n\nFailedPredicateException.prototype = Object.create(RecognitionException.prototype);\nFailedPredicateException.prototype.constructor = FailedPredicateException;\n\nFailedPredicateException.prototype.formatMessage = function(predicate, message) {\n    if (message !==null) {\n        return message;\n    } else {\n        return \"failed predicate: {\" + predicate + \"}?\";\n    }\n};\n\nfunction ParseCancellationException() {\n\tError.call(this);\n\tError.captureStackTrace(this, ParseCancellationException);\n\treturn this;\n}\n\nParseCancellationException.prototype = Object.create(Error.prototype);\nParseCancellationException.prototype.constructor = ParseCancellationException;\n\nexports.RecognitionException = RecognitionException;\nexports.NoViableAltException = NoViableAltException;\nexports.LexerNoViableAltException = LexerNoViableAltException;\nexports.InputMismatchException = InputMismatchException;\nexports.FailedPredicateException = FailedPredicateException;\nexports.ParseCancellationException = ParseCancellationException;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/error/Errors.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// The following images show the relation of states and\n// {@link ATNState//transitions} for various grammar constructs.\n//\n// <ul>\n//\n// <li>Solid edges marked with an &//0949; indicate a required\n// {@link EpsilonTransition}.</li>\n//\n// <li>Dashed edges indicate locations where any transition derived from\n// {@link Transition} might appear.</li>\n//\n// <li>Dashed nodes are place holders for either a sequence of linked\n// {@link BasicState} states or the inclusion of a block representing a nested\n// construct in one of the forms below.</li>\n//\n// <li>Nodes showing multiple outgoing alternatives with a {@code ...} support\n// any number of alternatives (one or more). Nodes without the {@code ...} only\n// support the exact number of alternatives shown in the diagram.</li>\n//\n// </ul>\n//\n// <h2>Basic Blocks</h2>\n//\n// <h3>Rule</h3>\n//\n// <embed src=\"images/Rule.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Block of 1 or more alternatives</h3>\n//\n// <embed src=\"images/Block.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Greedy Loops</h2>\n//\n// <h3>Greedy Closure: {@code (...)*}</h3>\n//\n// <embed src=\"images/ClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Positive Closure: {@code (...)+}</h3>\n//\n// <embed src=\"images/PositiveClosureGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Greedy Optional: {@code (...)?}</h3>\n//\n// <embed src=\"images/OptionalGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h2>Non-Greedy Loops</h2>\n//\n// <h3>Non-Greedy Closure: {@code (...)*?}</h3>\n//\n// <embed src=\"images/ClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Positive Closure: {@code (...)+?}</h3>\n//\n// <embed src=\"images/PositiveClosureNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n// <h3>Non-Greedy Optional: {@code (...)??}</h3>\n//\n// <embed src=\"images/OptionalNonGreedy.svg\" type=\"image/svg+xml\"/>\n//\n\nvar INITIAL_NUM_TRANSITIONS = 4;\n\nfunction ATNState() {\n    // Which ATN are we in?\n    this.atn = null;\n    this.stateNumber = ATNState.INVALID_STATE_NUMBER;\n    this.stateType = null;\n    this.ruleIndex = 0; // at runtime, we don't have Rule objects\n    this.epsilonOnlyTransitions = false;\n    // Track the transitions emanating from this ATN state.\n    this.transitions = [];\n    // Used to cache lookahead during parsing, not used during construction\n    this.nextTokenWithinRule = null;\n    return this;\n}\n\n// constants for serialization\nATNState.INVALID_TYPE = 0;\nATNState.BASIC = 1;\nATNState.RULE_START = 2;\nATNState.BLOCK_START = 3;\nATNState.PLUS_BLOCK_START = 4;\nATNState.STAR_BLOCK_START = 5;\nATNState.TOKEN_START = 6;\nATNState.RULE_STOP = 7;\nATNState.BLOCK_END = 8;\nATNState.STAR_LOOP_BACK = 9;\nATNState.STAR_LOOP_ENTRY = 10;\nATNState.PLUS_LOOP_BACK = 11;\nATNState.LOOP_END = 12;\n\nATNState.serializationNames = [\n            \"INVALID\",\n            \"BASIC\",\n            \"RULE_START\",\n            \"BLOCK_START\",\n            \"PLUS_BLOCK_START\",\n            \"STAR_BLOCK_START\",\n            \"TOKEN_START\",\n            \"RULE_STOP\",\n            \"BLOCK_END\",\n            \"STAR_LOOP_BACK\",\n            \"STAR_LOOP_ENTRY\",\n            \"PLUS_LOOP_BACK\",\n            \"LOOP_END\" ];\n\nATNState.INVALID_STATE_NUMBER = -1;\n\nATNState.prototype.toString = function() {\n\treturn this.stateNumber;\n};\n\nATNState.prototype.equals = function(other) {\n    if (other instanceof ATNState) {\n        return this.stateNumber===other.stateNumber;\n    } else {\n        return false;\n    }\n};\n\nATNState.prototype.isNonGreedyExitState = function() {\n    return false;\n};\n\n\nATNState.prototype.addTransition = function(trans, index) {\n\tif(index===undefined) {\n\t\tindex = -1;\n\t}\n    if (this.transitions.length===0) {\n        this.epsilonOnlyTransitions = trans.isEpsilon;\n    } else if(this.epsilonOnlyTransitions !== trans.isEpsilon) {\n        this.epsilonOnlyTransitions = false;\n    }\n    if (index===-1) {\n        this.transitions.push(trans);\n    } else {\n        this.transitions.splice(index, 1, trans);\n    }\n};\n\nfunction BasicState() {\n\tATNState.call(this);\n    this.stateType = ATNState.BASIC;\n    return this;\n}\n\nBasicState.prototype = Object.create(ATNState.prototype);\nBasicState.prototype.constructor = BasicState;\n\n\nfunction DecisionState() {\n\tATNState.call(this);\n    this.decision = -1;\n    this.nonGreedy = false;\n    return this;\n}\n\nDecisionState.prototype = Object.create(ATNState.prototype);\nDecisionState.prototype.constructor = DecisionState;\n\n\n//  The start of a regular {@code (...)} block.\nfunction BlockStartState() {\n\tDecisionState.call(this);\n\tthis.endState = null;\n\treturn this;\n}\n\nBlockStartState.prototype = Object.create(DecisionState.prototype);\nBlockStartState.prototype.constructor = BlockStartState;\n\n\nfunction BasicBlockStartState() {\n\tBlockStartState.call(this);\n\tthis.stateType = ATNState.BLOCK_START;\n\treturn this;\n}\n\nBasicBlockStartState.prototype = Object.create(BlockStartState.prototype);\nBasicBlockStartState.prototype.constructor = BasicBlockStartState;\n\n\n// Terminal node of a simple {@code (a|b|c)} block.\nfunction BlockEndState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.BLOCK_END;\n    this.startState = null;\n    return this;\n}\n\nBlockEndState.prototype = Object.create(ATNState.prototype);\nBlockEndState.prototype.constructor = BlockEndState;\n\n\n// The last node in the ATN for a rule, unless that rule is the start symbol.\n//  In that case, there is one transition to EOF. Later, we might encode\n//  references to all calls to this rule to compute FOLLOW sets for\n//  error handling.\n//\nfunction RuleStopState() {\n\tATNState.call(this);\n    this.stateType = ATNState.RULE_STOP;\n    return this;\n}\n\nRuleStopState.prototype = Object.create(ATNState.prototype);\nRuleStopState.prototype.constructor = RuleStopState;\n\nfunction RuleStartState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.RULE_START;\n\tthis.stopState = null;\n\tthis.isPrecedenceRule = false;\n\treturn this;\n}\n\nRuleStartState.prototype = Object.create(ATNState.prototype);\nRuleStartState.prototype.constructor = RuleStartState;\n\n// Decision state for {@code A+} and {@code (A|B)+}.  It has two transitions:\n//  one to the loop back to start of the block and one to exit.\n//\nfunction PlusLoopbackState() {\n\tDecisionState.call(this);\n\tthis.stateType = ATNState.PLUS_LOOP_BACK;\n\treturn this;\n}\n\nPlusLoopbackState.prototype = Object.create(DecisionState.prototype);\nPlusLoopbackState.prototype.constructor = PlusLoopbackState;\n\n\n// Start of {@code (A|B|...)+} loop. Technically a decision state, but\n//  we don't use for code generation; somebody might need it, so I'm defining\n//  it for completeness. In reality, the {@link PlusLoopbackState} node is the\n//  real decision-making note for {@code A+}.\n//\nfunction PlusBlockStartState() {\n\tBlockStartState.call(this);\n\tthis.stateType = ATNState.PLUS_BLOCK_START;\n    this.loopBackState = null;\n    return this;\n}\n\nPlusBlockStartState.prototype = Object.create(BlockStartState.prototype);\nPlusBlockStartState.prototype.constructor = PlusBlockStartState;\n\n// The block that begins a closure loop.\nfunction StarBlockStartState() {\n\tBlockStartState.call(this);\n\tthis.stateType = ATNState.STAR_BLOCK_START;\n\treturn this;\n}\n\nStarBlockStartState.prototype = Object.create(BlockStartState.prototype);\nStarBlockStartState.prototype.constructor = StarBlockStartState;\n\n\nfunction StarLoopbackState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.STAR_LOOP_BACK;\n\treturn this;\n}\n\nStarLoopbackState.prototype = Object.create(ATNState.prototype);\nStarLoopbackState.prototype.constructor = StarLoopbackState;\n\n\nfunction StarLoopEntryState() {\n\tDecisionState.call(this);\n\tthis.stateType = ATNState.STAR_LOOP_ENTRY;\n    this.loopBackState = null;\n    // Indicates whether this state can benefit from a precedence DFA during SLL decision making.\n    this.isPrecedenceDecision = null;\n    return this;\n}\n\nStarLoopEntryState.prototype = Object.create(DecisionState.prototype);\nStarLoopEntryState.prototype.constructor = StarLoopEntryState;\n\n\n// Mark the end of a * or + loop.\nfunction LoopEndState() {\n\tATNState.call(this);\n\tthis.stateType = ATNState.LOOP_END;\n\tthis.loopBackState = null;\n\treturn this;\n}\n\nLoopEndState.prototype = Object.create(ATNState.prototype);\nLoopEndState.prototype.constructor = LoopEndState;\n\n\n// The Tokens rule start state linking to each lexer rule start state */\nfunction TokensStartState() {\n\tDecisionState.call(this);\n\tthis.stateType = ATNState.TOKEN_START;\n\treturn this;\n}\n\nTokensStartState.prototype = Object.create(DecisionState.prototype);\nTokensStartState.prototype.constructor = TokensStartState;\n\nexports.ATNState = ATNState;\nexports.BasicState = BasicState;\nexports.DecisionState = DecisionState;\nexports.BlockStartState = BlockStartState;\nexports.BlockEndState = BlockEndState;\nexports.LoopEndState = LoopEndState;\nexports.RuleStartState = RuleStartState;\nexports.RuleStopState = RuleStopState;\nexports.TokensStartState = TokensStartState;\nexports.PlusLoopbackState = PlusLoopbackState;\nexports.StarLoopbackState = StarLoopbackState;\nexports.StarLoopEntryState = StarLoopEntryState;\nexports.PlusBlockStartState = PlusBlockStartState;\nexports.StarBlockStartState = StarBlockStartState;\nexports.BasicBlockStartState = BasicBlockStartState;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATNState.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// The basic notion of a tree has a parent, a payload, and a list of children.\n//  It is the most abstract interface for all the trees used by ANTLR.\n///\n\nvar Token = require('./../Token').Token;\nvar Interval = require('./../IntervalSet').Interval;\nvar INVALID_INTERVAL = new Interval(-1, -2);\nvar Utils = require('../Utils.js');\n\n\nfunction Tree() {\n\treturn this;\n}\n\nfunction SyntaxTree() {\n\tTree.call(this);\n\treturn this;\n}\n\nSyntaxTree.prototype = Object.create(Tree.prototype);\nSyntaxTree.prototype.constructor = SyntaxTree;\n\nfunction ParseTree() {\n\tSyntaxTree.call(this);\n\treturn this;\n}\n\nParseTree.prototype = Object.create(SyntaxTree.prototype);\nParseTree.prototype.constructor = ParseTree;\n\nfunction RuleNode() {\n\tParseTree.call(this);\n\treturn this;\n}\n\nRuleNode.prototype = Object.create(ParseTree.prototype);\nRuleNode.prototype.constructor = RuleNode;\n\nfunction TerminalNode() {\n\tParseTree.call(this);\n\treturn this;\n}\n\nTerminalNode.prototype = Object.create(ParseTree.prototype);\nTerminalNode.prototype.constructor = TerminalNode;\n\nfunction ErrorNode() {\n\tTerminalNode.call(this);\n\treturn this;\n}\n\nErrorNode.prototype = Object.create(TerminalNode.prototype);\nErrorNode.prototype.constructor = ErrorNode;\n\nfunction ParseTreeVisitor() {\n\treturn this;\n}\n\nParseTreeVisitor.prototype.visit = function(ctx) {\n \tif (Array.isArray(ctx)) {\n\t\treturn ctx.map(function(child) {\n            return child.accept(this);\n        }, this);\n\t} else {\n\t\treturn ctx.accept(this);\n\t}\n};\n\nParseTreeVisitor.prototype.visitChildren = function(ctx) {\n  return this.visit(ctx.children);\n}\n\nParseTreeVisitor.prototype.visitTerminal = function(node) {\n};\n\nParseTreeVisitor.prototype.visitErrorNode = function(node) {\n};\n\n\nfunction ParseTreeListener() {\n\treturn this;\n}\n\nParseTreeListener.prototype.visitTerminal = function(node) {\n};\n\nParseTreeListener.prototype.visitErrorNode = function(node) {\n};\n\nParseTreeListener.prototype.enterEveryRule = function(node) {\n};\n\nParseTreeListener.prototype.exitEveryRule = function(node) {\n};\n\nfunction TerminalNodeImpl(symbol) {\n\tTerminalNode.call(this);\n\tthis.parentCtx = null;\n\tthis.symbol = symbol;\n\treturn this;\n}\n\nTerminalNodeImpl.prototype = Object.create(TerminalNode.prototype);\nTerminalNodeImpl.prototype.constructor = TerminalNodeImpl;\n\nTerminalNodeImpl.prototype.getChild = function(i) {\n\treturn null;\n};\n\nTerminalNodeImpl.prototype.getSymbol = function() {\n\treturn this.symbol;\n};\n\nTerminalNodeImpl.prototype.getParent = function() {\n\treturn this.parentCtx;\n};\n\nTerminalNodeImpl.prototype.getPayload = function() {\n\treturn this.symbol;\n};\n\nTerminalNodeImpl.prototype.getSourceInterval = function() {\n\tif (this.symbol === null) {\n\t\treturn INVALID_INTERVAL;\n\t}\n\tvar tokenIndex = this.symbol.tokenIndex;\n\treturn new Interval(tokenIndex, tokenIndex);\n};\n\nTerminalNodeImpl.prototype.getChildCount = function() {\n\treturn 0;\n};\n\nTerminalNodeImpl.prototype.accept = function(visitor) {\n\treturn visitor.visitTerminal(this);\n};\n\nTerminalNodeImpl.prototype.getText = function() {\n\treturn this.symbol.text;\n};\n\nTerminalNodeImpl.prototype.toString = function() {\n\tif (this.symbol.type === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else {\n\t\treturn this.symbol.text;\n\t}\n};\n\n// Represents a token that was consumed during resynchronization\n// rather than during a valid match operation. For example,\n// we will create this kind of a node during single token insertion\n// and deletion as well as during \"consume until error recovery set\"\n// upon no viable alternative exceptions.\n\nfunction ErrorNodeImpl(token) {\n\tTerminalNodeImpl.call(this, token);\n\treturn this;\n}\n\nErrorNodeImpl.prototype = Object.create(TerminalNodeImpl.prototype);\nErrorNodeImpl.prototype.constructor = ErrorNodeImpl;\n\nErrorNodeImpl.prototype.isErrorNode = function() {\n\treturn true;\n};\n\nErrorNodeImpl.prototype.accept = function(visitor) {\n\treturn visitor.visitErrorNode(this);\n};\n\nfunction ParseTreeWalker() {\n\treturn this;\n}\n\nParseTreeWalker.prototype.walk = function(listener, t) {\n\tvar errorNode = t instanceof ErrorNode ||\n\t\t\t(t.isErrorNode !== undefined && t.isErrorNode());\n\tif (errorNode) {\n\t\tlistener.visitErrorNode(t);\n\t} else if (t instanceof TerminalNode) {\n\t\tlistener.visitTerminal(t);\n\t} else {\n\t\tthis.enterRule(listener, t);\n\t\tfor (var i = 0; i < t.getChildCount(); i++) {\n\t\t\tvar child = t.getChild(i);\n\t\t\tthis.walk(listener, child);\n\t\t}\n\t\tthis.exitRule(listener, t);\n\t}\n};\n//\n// The discovery of a rule node, involves sending two events: the generic\n// {@link ParseTreeListener//enterEveryRule} and a\n// {@link RuleContext}-specific event. First we trigger the generic and then\n// the rule specific. We to them in reverse order upon finishing the node.\n//\nParseTreeWalker.prototype.enterRule = function(listener, r) {\n\tvar ctx = r.getRuleContext();\n\tlistener.enterEveryRule(ctx);\n\tctx.enterRule(listener);\n};\n\nParseTreeWalker.prototype.exitRule = function(listener, r) {\n\tvar ctx = r.getRuleContext();\n\tctx.exitRule(listener);\n\tlistener.exitEveryRule(ctx);\n};\n\nParseTreeWalker.DEFAULT = new ParseTreeWalker();\n\nexports.RuleNode = RuleNode;\nexports.ErrorNode = ErrorNode;\nexports.TerminalNode = TerminalNode;\nexports.ErrorNodeImpl = ErrorNodeImpl;\nexports.TerminalNodeImpl = TerminalNodeImpl;\nexports.ParseTreeListener = ParseTreeListener;\nexports.ParseTreeVisitor = ParseTreeVisitor;\nexports.ParseTreeWalker = ParseTreeWalker;\nexports.INVALID_INTERVAL = INVALID_INTERVAL;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/tree/Tree.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar RuleContext = require('./RuleContext').RuleContext;\nvar Hash = require('./Utils').Hash;\n\nfunction PredictionContext(cachedHashCode) {\n\tthis.cachedHashCode = cachedHashCode;\n}\n\n// Represents {@code $} in local context prediction, which means wildcard.\n// {@code//+x =//}.\n// /\nPredictionContext.EMPTY = null;\n\n// Represents {@code $} in an array in full context mode, when {@code $}\n// doesn't mean wildcard: {@code $ + x = [$,x]}. Here,\n// {@code $} = {@link //EMPTY_RETURN_STATE}.\n// /\nPredictionContext.EMPTY_RETURN_STATE = 0x7FFFFFFF;\n\nPredictionContext.globalNodeCount = 1;\nPredictionContext.id = PredictionContext.globalNodeCount;\n\n// Stores the computed hash code of this {@link PredictionContext}. The hash\n// code is computed in parts to match the following reference algorithm.\n//\n// <pre>\n// private int referenceHashCode() {\n// int hash = {@link MurmurHash//initialize MurmurHash.initialize}({@link\n// //INITIAL_HASH});\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link //getParent\n// getParent}(i));\n// }\n//\n// for (int i = 0; i &lt; {@link //size()}; i++) {\n// hash = {@link MurmurHash//update MurmurHash.update}(hash, {@link\n// //getReturnState getReturnState}(i));\n// }\n//\n// hash = {@link MurmurHash//finish MurmurHash.finish}(hash, 2// {@link\n// //size()});\n// return hash;\n// }\n// </pre>\n// /\n\n// This means only the {@link //EMPTY} context is in set.\nPredictionContext.prototype.isEmpty = function() {\n\treturn this === PredictionContext.EMPTY;\n};\n\nPredictionContext.prototype.hasEmptyPath = function() {\n\treturn this.getReturnState(this.length - 1) === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nPredictionContext.prototype.hashCode = function() {\n\treturn this.cachedHashCode;\n};\n\n\nPredictionContext.prototype.updateHashCode = function(hash) {\n    hash.update(this.cachedHashCode);\n};\n/*\nfunction calculateHashString(parent, returnState) {\n\treturn \"\" + parent + returnState;\n}\n*/\n\n// Used to cache {@link PredictionContext} objects. Its used for the shared\n// context cash associated with contexts in DFA states. This cache\n// can be used for both lexers and parsers.\n\nfunction PredictionContextCache() {\n\tthis.cache = {};\n\treturn this;\n}\n\n// Add a context to the cache and return it. If the context already exists,\n// return that one instead and do not add a new context to the cache.\n// Protect shared cache from unsafe thread access.\n//\nPredictionContextCache.prototype.add = function(ctx) {\n\tif (ctx === PredictionContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\tvar existing = this.cache[ctx] || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\tthis.cache[ctx] = ctx;\n\treturn ctx;\n};\n\nPredictionContextCache.prototype.get = function(ctx) {\n\treturn this.cache[ctx] || null;\n};\n\nObject.defineProperty(PredictionContextCache.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.cache.length;\n\t}\n});\n\nfunction SingletonPredictionContext(parent, returnState) {\n\tvar hashCode = 0;\n\tif(parent !== null) {\n\t\tvar hash = new Hash();\n\t\thash.update(parent, returnState);\n        hashCode = hash.finish();\n\t}\n\tPredictionContext.call(this, hashCode);\n\tthis.parentCtx = parent;\n\tthis.returnState = returnState;\n}\n\nSingletonPredictionContext.prototype = Object.create(PredictionContext.prototype);\nSingletonPredictionContext.prototype.contructor = SingletonPredictionContext;\n\nSingletonPredictionContext.create = function(parent, returnState) {\n\tif (returnState === PredictionContext.EMPTY_RETURN_STATE && parent === null) {\n\t\t// someone can pass in the bits of an array ctx that mean $\n\t\treturn PredictionContext.EMPTY;\n\t} else {\n\t\treturn new SingletonPredictionContext(parent, returnState);\n\t}\n};\n\nObject.defineProperty(SingletonPredictionContext.prototype, \"length\", {\n\tget : function() {\n\t\treturn 1;\n\t}\n});\n\nSingletonPredictionContext.prototype.getParent = function(index) {\n\treturn this.parentCtx;\n};\n\nSingletonPredictionContext.prototype.getReturnState = function(index) {\n\treturn this.returnState;\n};\n\nSingletonPredictionContext.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof SingletonPredictionContext)) {\n\t\treturn false;\n\t} else if (this.hashCode() !== other.hashCode()) {\n\t\treturn false; // can't be same if hash is different\n\t} else {\n\t\tif(this.returnState !== other.returnState)\n            return false;\n        else if(this.parentCtx==null)\n            return other.parentCtx==null\n\t\telse\n            return this.parentCtx.equals(other.parentCtx);\n\t}\n};\n\nSingletonPredictionContext.prototype.toString = function() {\n\tvar up = this.parentCtx === null ? \"\" : this.parentCtx.toString();\n\tif (up.length === 0) {\n\t\tif (this.returnState === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\treturn \"$\";\n\t\t} else {\n\t\t\treturn \"\" + this.returnState;\n\t\t}\n\t} else {\n\t\treturn \"\" + this.returnState + \" \" + up;\n\t}\n};\n\nfunction EmptyPredictionContext() {\n\tSingletonPredictionContext.call(this, null, PredictionContext.EMPTY_RETURN_STATE);\n\treturn this;\n}\n\nEmptyPredictionContext.prototype = Object.create(SingletonPredictionContext.prototype);\nEmptyPredictionContext.prototype.constructor = EmptyPredictionContext;\n\nEmptyPredictionContext.prototype.isEmpty = function() {\n\treturn true;\n};\n\nEmptyPredictionContext.prototype.getParent = function(index) {\n\treturn null;\n};\n\nEmptyPredictionContext.prototype.getReturnState = function(index) {\n\treturn this.returnState;\n};\n\nEmptyPredictionContext.prototype.equals = function(other) {\n\treturn this === other;\n};\n\nEmptyPredictionContext.prototype.toString = function() {\n\treturn \"$\";\n};\n\nPredictionContext.EMPTY = new EmptyPredictionContext();\n\nfunction ArrayPredictionContext(parents, returnStates) {\n\t// Parent can be null only if full ctx mode and we make an array\n\t// from {@link //EMPTY} and non-empty. We merge {@link //EMPTY} by using\n\t// null parent and\n\t// returnState == {@link //EMPTY_RETURN_STATE}.\n\tvar h = new Hash();\n\th.update(parents, returnStates);\n\tvar hashCode = h.finish();\n\tPredictionContext.call(this, hashCode);\n\tthis.parents = parents;\n\tthis.returnStates = returnStates;\n\treturn this;\n}\n\nArrayPredictionContext.prototype = Object.create(PredictionContext.prototype);\nArrayPredictionContext.prototype.constructor = ArrayPredictionContext;\n\nArrayPredictionContext.prototype.isEmpty = function() {\n\t// since EMPTY_RETURN_STATE can only appear in the last position, we\n\t// don't need to verify that size==1\n\treturn this.returnStates[0] === PredictionContext.EMPTY_RETURN_STATE;\n};\n\nObject.defineProperty(ArrayPredictionContext.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.returnStates.length;\n\t}\n});\n\nArrayPredictionContext.prototype.getParent = function(index) {\n\treturn this.parents[index];\n};\n\nArrayPredictionContext.prototype.getReturnState = function(index) {\n\treturn this.returnStates[index];\n};\n\nArrayPredictionContext.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof ArrayPredictionContext)) {\n\t\treturn false;\n\t} else if (this.hashCode() !== other.hashCode()) {\n\t\treturn false; // can't be same if hash is different\n\t} else {\n\t\treturn this.returnStates === other.returnStates &&\n\t\t\t\tthis.parents === other.parents;\n\t}\n};\n\nArrayPredictionContext.prototype.toString = function() {\n\tif (this.isEmpty()) {\n\t\treturn \"[]\";\n\t} else {\n\t\tvar s = \"[\";\n\t\tfor (var i = 0; i < this.returnStates.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\ts = s + \", \";\n\t\t\t}\n\t\t\tif (this.returnStates[i] === PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\ts = s + \"$\";\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\ts = s + this.returnStates[i];\n\t\t\tif (this.parents[i] !== null) {\n\t\t\t\ts = s + \" \" + this.parents[i];\n\t\t\t} else {\n\t\t\t\ts = s + \"null\";\n\t\t\t}\n\t\t}\n\t\treturn s + \"]\";\n\t}\n};\n\n// Convert a {@link RuleContext} tree to a {@link PredictionContext} graph.\n// Return {@link //EMPTY} if {@code outerContext} is empty or null.\n// /\nfunction predictionContextFromRuleContext(atn, outerContext) {\n\tif (outerContext === undefined || outerContext === null) {\n\t\touterContext = RuleContext.EMPTY;\n\t}\n\t// if we are in RuleContext of start rule, s, then PredictionContext\n\t// is EMPTY. Nobody called us. (if we are empty, return empty)\n\tif (outerContext.parentCtx === null || outerContext === RuleContext.EMPTY) {\n\t\treturn PredictionContext.EMPTY;\n\t}\n\t// If we have a parent, convert it to a PredictionContext graph\n\tvar parent = predictionContextFromRuleContext(atn, outerContext.parentCtx);\n\tvar state = atn.states[outerContext.invokingState];\n\tvar transition = state.transitions[0];\n\treturn SingletonPredictionContext.create(parent, transition.followState.stateNumber);\n}\n/*\nfunction calculateListsHashString(parents, returnStates) {\n\tvar s = \"\";\n\tparents.map(function(p) {\n\t\ts = s + p;\n\t});\n\treturnStates.map(function(r) {\n\t\ts = s + r;\n\t});\n\treturn s;\n}\n*/\nfunction merge(a, b, rootIsWildcard, mergeCache) {\n\t// share same graph if both same\n\tif (a === b) {\n\t\treturn a;\n\t}\n\tif (a instanceof SingletonPredictionContext && b instanceof SingletonPredictionContext) {\n\t\treturn mergeSingletons(a, b, rootIsWildcard, mergeCache);\n\t}\n\t// At least one of a or b is array\n\t// If one is $ and rootIsWildcard, return $ as// wildcard\n\tif (rootIsWildcard) {\n\t\tif (a instanceof EmptyPredictionContext) {\n\t\t\treturn a;\n\t\t}\n\t\tif (b instanceof EmptyPredictionContext) {\n\t\t\treturn b;\n\t\t}\n\t}\n\t// convert singleton so both are arrays to normalize\n\tif (a instanceof SingletonPredictionContext) {\n\t\ta = new ArrayPredictionContext([a.getParent()], [a.returnState]);\n\t}\n\tif (b instanceof SingletonPredictionContext) {\n\t\tb = new ArrayPredictionContext([b.getParent()], [b.returnState]);\n\t}\n\treturn mergeArrays(a, b, rootIsWildcard, mergeCache);\n}\n\n//\n// Merge two {@link SingletonPredictionContext} instances.\n//\n// <p>Stack tops equal, parents merge is same; return left graph.<br>\n// <embed src=\"images/SingletonMerge_SameRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Same stack top, parents differ; merge parents giving array node, then\n// remainders of those graphs. A new root node is created to point to the\n// merged parents.<br>\n// <embed src=\"images/SingletonMerge_SameRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to same parent. Make array node for the\n// root where both element in the root point to the same (original)\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootSamePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Different stack tops pointing to different parents. Make array node for\n// the root where each element points to the corresponding original\n// parent.<br>\n// <embed src=\"images/SingletonMerge_DiffRootDiffPar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// @param mergeCache\n// /\nfunction mergeSingletons(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tvar previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\n\tvar rootMerge = mergeRoot(a, b, rootIsWildcard);\n\tif (rootMerge !== null) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, rootMerge);\n\t\t}\n\t\treturn rootMerge;\n\t}\n\tif (a.returnState === b.returnState) {\n\t\tvar parent = merge(a.parentCtx, b.parentCtx, rootIsWildcard, mergeCache);\n\t\t// if parent is same as existing a or b parent or reduced to a parent,\n\t\t// return it\n\t\tif (parent === a.parentCtx) {\n\t\t\treturn a; // ax + bx = ax, if a=b\n\t\t}\n\t\tif (parent === b.parentCtx) {\n\t\t\treturn b; // ax + bx = bx, if a=b\n\t\t}\n\t\t// else: ax + ay = a'[x,y]\n\t\t// merge parents x and y, giving array node with x,y then remainders\n\t\t// of those graphs. dup a, a' points at merged array\n\t\t// new joined parent so create new singleton pointing to it, a'\n\t\tvar spc = SingletonPredictionContext.create(parent, a.returnState);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, spc);\n\t\t}\n\t\treturn spc;\n\t} else { // a != b payloads differ\n\t\t// see if we can collapse parents due to $+x parents if local ctx\n\t\tvar singleParent = null;\n\t\tif (a === b || (a.parentCtx !== null && a.parentCtx === b.parentCtx)) { // ax +\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// bx =\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// [a,b]x\n\t\t\tsingleParent = a.parentCtx;\n\t\t}\n\t\tif (singleParent !== null) { // parents are same\n\t\t\t// sort payloads and use same parent\n\t\t\tvar payloads = [ a.returnState, b.returnState ];\n\t\t\tif (a.returnState > b.returnState) {\n\t\t\t\tpayloads[0] = b.returnState;\n\t\t\t\tpayloads[1] = a.returnState;\n\t\t\t}\n\t\t\tvar parents = [ singleParent, singleParent ];\n\t\t\tvar apc = new ArrayPredictionContext(parents, payloads);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, apc);\n\t\t\t}\n\t\t\treturn apc;\n\t\t}\n\t\t// parents differ and can't merge them. Just pack together\n\t\t// into array; can't merge.\n\t\t// ax + by = [ax,by]\n\t\tvar payloads = [ a.returnState, b.returnState ];\n\t\tvar parents = [ a.parentCtx, b.parentCtx ];\n\t\tif (a.returnState > b.returnState) { // sort by payload\n\t\t\tpayloads[0] = b.returnState;\n\t\t\tpayloads[1] = a.returnState;\n\t\t\tparents = [ b.parentCtx, a.parentCtx ];\n\t\t}\n\t\tvar a_ = new ArrayPredictionContext(parents, payloads);\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a_);\n\t\t}\n\t\treturn a_;\n\t}\n}\n\n//\n// Handle case where at least one of {@code a} or {@code b} is\n// {@link //EMPTY}. In the following diagrams, the symbol {@code $} is used\n// to represent {@link //EMPTY}.\n//\n// <h2>Local-Context Merges</h2>\n//\n// <p>These local-context merge operations are used when {@code rootIsWildcard}\n// is true.</p>\n//\n// <p>{@link //EMPTY} is superset of any graph; return {@link //EMPTY}.<br>\n// <embed src=\"images/LocalMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>{@link //EMPTY} and anything is {@code //EMPTY}, so merged parent is\n// {@code //EMPTY}; return left graph.<br>\n// <embed src=\"images/LocalMerge_EmptyParent.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Special case of last merge if local context.<br>\n// <embed src=\"images/LocalMerge_DiffRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <h2>Full-Context Merges</h2>\n//\n// <p>These full-context merge operations are used when {@code rootIsWildcard}\n// is false.</p>\n//\n// <p><embed src=\"images/FullMerge_EmptyRoots.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Must keep all contexts; {@link //EMPTY} in array is a special value (and\n// null parent).<br>\n// <embed src=\"images/FullMerge_EmptyRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p><embed src=\"images/FullMerge_SameRoot.svg\" type=\"image/svg+xml\"/></p>\n//\n// @param a the first {@link SingletonPredictionContext}\n// @param b the second {@link SingletonPredictionContext}\n// @param rootIsWildcard {@code true} if this is a local-context merge,\n// otherwise false to indicate a full-context merge\n// /\nfunction mergeRoot(a, b, rootIsWildcard) {\n\tif (rootIsWildcard) {\n\t\tif (a === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // // + b =//\n\t\t}\n\t\tif (b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // a +// =//\n\t\t}\n\t} else {\n\t\tif (a === PredictionContext.EMPTY && b === PredictionContext.EMPTY) {\n\t\t\treturn PredictionContext.EMPTY; // $ + $ = $\n\t\t} else if (a === PredictionContext.EMPTY) { // $ + x = [$,x]\n\t\t\tvar payloads = [ b.returnState,\n\t\t\t\t\tPredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tvar parents = [ b.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t} else if (b === PredictionContext.EMPTY) { // x + $ = [$,x] ($ is always first if present)\n\t\t\tvar payloads = [ a.returnState, PredictionContext.EMPTY_RETURN_STATE ];\n\t\t\tvar parents = [ a.parentCtx, null ];\n\t\t\treturn new ArrayPredictionContext(parents, payloads);\n\t\t}\n\t}\n\treturn null;\n}\n\n//\n// Merge two {@link ArrayPredictionContext} instances.\n//\n// <p>Different tops, different parents.<br>\n// <embed src=\"images/ArrayMerge_DiffTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, same parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSamePar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, different parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopDiffPar.svg\" type=\"image/svg+xml\"/></p>\n//\n// <p>Shared top, all shared parents.<br>\n// <embed src=\"images/ArrayMerge_ShareTopSharePar.svg\"\n// type=\"image/svg+xml\"/></p>\n//\n// <p>Equal tops, merge parents and reduce top to\n// {@link SingletonPredictionContext}.<br>\n// <embed src=\"images/ArrayMerge_EqualTop.svg\" type=\"image/svg+xml\"/></p>\n// /\nfunction mergeArrays(a, b, rootIsWildcard, mergeCache) {\n\tif (mergeCache !== null) {\n\t\tvar previous = mergeCache.get(a, b);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t\tprevious = mergeCache.get(b, a);\n\t\tif (previous !== null) {\n\t\t\treturn previous;\n\t\t}\n\t}\n\t// merge sorted payloads a + b => M\n\tvar i = 0; // walks a\n\tvar j = 0; // walks b\n\tvar k = 0; // walks target M array\n\n\tvar mergedReturnStates = [];\n\tvar mergedParents = [];\n\t// walk and merge to yield mergedParents, mergedReturnStates\n\twhile (i < a.returnStates.length && j < b.returnStates.length) {\n\t\tvar a_parent = a.parents[i];\n\t\tvar b_parent = b.parents[j];\n\t\tif (a.returnStates[i] === b.returnStates[j]) {\n\t\t\t// same payload (stack tops are equal), must yield merged singleton\n\t\t\tvar payload = a.returnStates[i];\n\t\t\t// $+$ = $\n\t\t\tvar bothDollars = payload === PredictionContext.EMPTY_RETURN_STATE &&\n\t\t\t\t\ta_parent === null && b_parent === null;\n\t\t\tvar ax_ax = (a_parent !== null && b_parent !== null && a_parent === b_parent); // ax+ax\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ->\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// ax\n\t\t\tif (bothDollars || ax_ax) {\n\t\t\t\tmergedParents[k] = a_parent; // choose left\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t} else { // ax+ay -> a'[x,y]\n\t\t\t\tvar mergedParent = merge(a_parent, b_parent, rootIsWildcard, mergeCache);\n\t\t\t\tmergedParents[k] = mergedParent;\n\t\t\t\tmergedReturnStates[k] = payload;\n\t\t\t}\n\t\t\ti += 1; // hop over left one as usual\n\t\t\tj += 1; // but also skip one in right side since we merge\n\t\t} else if (a.returnStates[i] < b.returnStates[j]) { // copy a[i] to M\n\t\t\tmergedParents[k] = a_parent;\n\t\t\tmergedReturnStates[k] = a.returnStates[i];\n\t\t\ti += 1;\n\t\t} else { // b > a, copy b[j] to M\n\t\t\tmergedParents[k] = b_parent;\n\t\t\tmergedReturnStates[k] = b.returnStates[j];\n\t\t\tj += 1;\n\t\t}\n\t\tk += 1;\n\t}\n\t// copy over any payloads remaining in either array\n\tif (i < a.returnStates.length) {\n\t\tfor (var p = i; p < a.returnStates.length; p++) {\n\t\t\tmergedParents[k] = a.parents[p];\n\t\t\tmergedReturnStates[k] = a.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t} else {\n\t\tfor (var p = j; p < b.returnStates.length; p++) {\n\t\t\tmergedParents[k] = b.parents[p];\n\t\t\tmergedReturnStates[k] = b.returnStates[p];\n\t\t\tk += 1;\n\t\t}\n\t}\n\t// trim merged if we combined a few that had same stack tops\n\tif (k < mergedParents.length) { // write index < last position; trim\n\t\tif (k === 1) { // for just one merged element, return singleton top\n\t\t\tvar a_ = SingletonPredictionContext.create(mergedParents[0],\n\t\t\t\t\tmergedReturnStates[0]);\n\t\t\tif (mergeCache !== null) {\n\t\t\t\tmergeCache.set(a, b, a_);\n\t\t\t}\n\t\t\treturn a_;\n\t\t}\n\t\tmergedParents = mergedParents.slice(0, k);\n\t\tmergedReturnStates = mergedReturnStates.slice(0, k);\n\t}\n\n\tvar M = new ArrayPredictionContext(mergedParents, mergedReturnStates);\n\n\t// if we created same array as a or b, return that instead\n\t// TODO: track whether this is possible above during merge sort for speed\n\tif (M === a) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, a);\n\t\t}\n\t\treturn a;\n\t}\n\tif (M === b) {\n\t\tif (mergeCache !== null) {\n\t\t\tmergeCache.set(a, b, b);\n\t\t}\n\t\treturn b;\n\t}\n\tcombineCommonParents(mergedParents);\n\n\tif (mergeCache !== null) {\n\t\tmergeCache.set(a, b, M);\n\t}\n\treturn M;\n}\n\n//\n// Make pass over all <em>M</em> {@code parents}; merge any {@code equals()}\n// ones.\n// /\nfunction combineCommonParents(parents) {\n\tvar uniqueParents = {};\n\n\tfor (var p = 0; p < parents.length; p++) {\n\t\tvar parent = parents[p];\n\t\tif (!(parent in uniqueParents)) {\n\t\t\tuniqueParents[parent] = parent;\n\t\t}\n\t}\n\tfor (var q = 0; q < parents.length; q++) {\n\t\tparents[q] = uniqueParents[parents[q]];\n\t}\n}\n\nfunction getCachedPredictionContext(context, contextCache, visited) {\n\tif (context.isEmpty()) {\n\t\treturn context;\n\t}\n\tvar existing = visited[context] || null;\n\tif (existing !== null) {\n\t\treturn existing;\n\t}\n\texisting = contextCache.get(context);\n\tif (existing !== null) {\n\t\tvisited[context] = existing;\n\t\treturn existing;\n\t}\n\tvar changed = false;\n\tvar parents = [];\n\tfor (var i = 0; i < parents.length; i++) {\n\t\tvar parent = getCachedPredictionContext(context.getParent(i), contextCache, visited);\n\t\tif (changed || parent !== context.getParent(i)) {\n\t\t\tif (!changed) {\n\t\t\t\tparents = [];\n\t\t\t\tfor (var j = 0; j < context.length; j++) {\n\t\t\t\t\tparents[j] = context.getParent(j);\n\t\t\t\t}\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t\tparents[i] = parent;\n\t\t}\n\t}\n\tif (!changed) {\n\t\tcontextCache.add(context);\n\t\tvisited[context] = context;\n\t\treturn context;\n\t}\n\tvar updated = null;\n\tif (parents.length === 0) {\n\t\tupdated = PredictionContext.EMPTY;\n\t} else if (parents.length === 1) {\n\t\tupdated = SingletonPredictionContext.create(parents[0], context\n\t\t\t\t.getReturnState(0));\n\t} else {\n\t\tupdated = new ArrayPredictionContext(parents, context.returnStates);\n\t}\n\tcontextCache.add(updated);\n\tvisited[updated] = updated;\n\tvisited[context] = updated;\n\n\treturn updated;\n}\n\n// ter's recursive version of Sam's getAllNodes()\nfunction getAllContextNodes(context, nodes, visited) {\n\tif (nodes === null) {\n\t\tnodes = [];\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else if (visited === null) {\n\t\tvisited = {};\n\t\treturn getAllContextNodes(context, nodes, visited);\n\t} else {\n\t\tif (context === null || visited[context] !== null) {\n\t\t\treturn nodes;\n\t\t}\n\t\tvisited[context] = context;\n\t\tnodes.push(context);\n\t\tfor (var i = 0; i < context.length; i++) {\n\t\t\tgetAllContextNodes(context.getParent(i), nodes, visited);\n\t\t}\n\t\treturn nodes;\n\t}\n}\n\nexports.merge = merge;\nexports.PredictionContext = PredictionContext;\nexports.PredictionContextCache = PredictionContextCache;\nexports.SingletonPredictionContext = SingletonPredictionContext;\nexports.predictionContextFromRuleContext = predictionContextFromRuleContext;\nexports.getCachedPredictionContext = getCachedPredictionContext;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/PredictionContext.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//  An ATN transition between any two ATN states.  Subclasses define\n//  atom, set, epsilon, action, predicate, rule transitions.\n//\n//  <p>This is a one way link.  It emanates from a state (usually via a list of\n//  transitions) and has a target state.</p>\n//\n//  <p>Since we never have to change the ATN transitions once we construct it,\n//  we can fix these transitions as specific classes. The DFA transitions\n//  on the other hand need to update the labels as it adds transitions to\n//  the states. We'll use the term Edge for the DFA to distinguish them from\n//  ATN transitions.</p>\n\nvar Token = require('./../Token').Token;\nvar Interval = require('./../IntervalSet').Interval;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\nvar Predicate = require('./SemanticContext').Predicate;\nvar PrecedencePredicate = require('./SemanticContext').PrecedencePredicate;\n\nfunction Transition (target) {\n    // The target of this transition.\n    if (target===undefined || target===null) {\n        throw \"target cannot be null.\";\n    }\n    this.target = target;\n    // Are we epsilon, action, sempred?\n    this.isEpsilon = false;\n    this.label = null;\n    return this;\n}\n    // constants for serialization\nTransition.EPSILON = 1;\nTransition.RANGE = 2;\nTransition.RULE = 3;\nTransition.PREDICATE = 4; // e.g., {isType(input.LT(1))}?\nTransition.ATOM = 5;\nTransition.ACTION = 6;\nTransition.SET = 7; // ~(A|B) or ~atom, wildcard, which convert to next 2\nTransition.NOT_SET = 8;\nTransition.WILDCARD = 9;\nTransition.PRECEDENCE = 10;\n\nTransition.serializationNames = [\n            \"INVALID\",\n            \"EPSILON\",\n            \"RANGE\",\n            \"RULE\",\n            \"PREDICATE\",\n            \"ATOM\",\n            \"ACTION\",\n            \"SET\",\n            \"NOT_SET\",\n            \"WILDCARD\",\n            \"PRECEDENCE\"\n        ];\n\nTransition.serializationTypes = {\n        EpsilonTransition: Transition.EPSILON,\n        RangeTransition: Transition.RANGE,\n        RuleTransition: Transition.RULE,\n        PredicateTransition: Transition.PREDICATE,\n        AtomTransition: Transition.ATOM,\n        ActionTransition: Transition.ACTION,\n        SetTransition: Transition.SET,\n        NotSetTransition: Transition.NOT_SET,\n        WildcardTransition: Transition.WILDCARD,\n        PrecedencePredicateTransition: Transition.PRECEDENCE\n    };\n\n\n// TODO: make all transitions sets? no, should remove set edges\nfunction AtomTransition(target, label) {\n\tTransition.call(this, target);\n\tthis.label_ = label; // The token type or character value; or, signifies special label.\n    this.label = this.makeLabel();\n    this.serializationType = Transition.ATOM;\n    return this;\n}\n\nAtomTransition.prototype = Object.create(Transition.prototype);\nAtomTransition.prototype.constructor = AtomTransition;\n\nAtomTransition.prototype.makeLabel = function() {\n\tvar s = new IntervalSet();\n    s.addOne(this.label_);\n    return s;\n};\n\nAtomTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {\n    return this.label_ === symbol;\n};\n\nAtomTransition.prototype.toString = function() {\n\treturn this.label_;\n};\n\nfunction RuleTransition(ruleStart, ruleIndex, precedence, followState) {\n\tTransition.call(this, ruleStart);\n    this.ruleIndex = ruleIndex; // ptr to the rule definition object for this rule ref\n    this.precedence = precedence;\n    this.followState = followState; // what node to begin computations following ref to rule\n    this.serializationType = Transition.RULE;\n    this.isEpsilon = true;\n    return this;\n}\n\nRuleTransition.prototype = Object.create(Transition.prototype);\nRuleTransition.prototype.constructor = RuleTransition;\n\nRuleTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\n\nfunction EpsilonTransition(target, outermostPrecedenceReturn) {\n\tTransition.call(this, target);\n    this.serializationType = Transition.EPSILON;\n    this.isEpsilon = true;\n    this.outermostPrecedenceReturn = outermostPrecedenceReturn;\n    return this;\n}\n\nEpsilonTransition.prototype = Object.create(Transition.prototype);\nEpsilonTransition.prototype.constructor = EpsilonTransition;\n\nEpsilonTransition.prototype.matches = function( symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nEpsilonTransition.prototype.toString = function() {\n\treturn \"epsilon\";\n};\n\nfunction RangeTransition(target, start, stop) {\n\tTransition.call(this, target);\n\tthis.serializationType = Transition.RANGE;\n    this.start = start;\n    this.stop = stop;\n    this.label = this.makeLabel();\n    return this;\n}\n\nRangeTransition.prototype = Object.create(Transition.prototype);\nRangeTransition.prototype.constructor = RangeTransition;\n\nRangeTransition.prototype.makeLabel = function() {\n    var s = new IntervalSet();\n    s.addRange(this.start, this.stop);\n    return s;\n};\n\nRangeTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn symbol >= this.start && symbol <= this.stop;\n};\n\nRangeTransition.prototype.toString = function() {\n\treturn \"'\" + String.fromCharCode(this.start) + \"'..'\" + String.fromCharCode(this.stop) + \"'\";\n};\n\nfunction AbstractPredicateTransition(target) {\n\tTransition.call(this, target);\n\treturn this;\n}\n\nAbstractPredicateTransition.prototype = Object.create(Transition.prototype);\nAbstractPredicateTransition.prototype.constructor = AbstractPredicateTransition;\n\nfunction PredicateTransition(target, ruleIndex, predIndex, isCtxDependent) {\n\tAbstractPredicateTransition.call(this, target);\n    this.serializationType = Transition.PREDICATE;\n    this.ruleIndex = ruleIndex;\n    this.predIndex = predIndex;\n    this.isCtxDependent = isCtxDependent; // e.g., $i ref in pred\n    this.isEpsilon = true;\n    return this;\n}\n\nPredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPredicateTransition.prototype.constructor = PredicateTransition;\n\nPredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nPredicateTransition.prototype.getPredicate = function() {\n\treturn new Predicate(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicateTransition.prototype.toString = function() {\n\treturn \"pred_\" + this.ruleIndex + \":\" + this.predIndex;\n};\n\nfunction ActionTransition(target, ruleIndex, actionIndex, isCtxDependent) {\n\tTransition.call(this, target);\n    this.serializationType = Transition.ACTION;\n    this.ruleIndex = ruleIndex;\n    this.actionIndex = actionIndex===undefined ? -1 : actionIndex;\n    this.isCtxDependent = isCtxDependent===undefined ? false : isCtxDependent; // e.g., $i ref in pred\n    this.isEpsilon = true;\n    return this;\n}\n\nActionTransition.prototype = Object.create(Transition.prototype);\nActionTransition.prototype.constructor = ActionTransition;\n\n\nActionTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nActionTransition.prototype.toString = function() {\n\treturn \"action_\" + this.ruleIndex + \":\" + this.actionIndex;\n};\n\n\n// A transition containing a set of values.\nfunction SetTransition(target, set) {\n\tTransition.call(this, target);\n\tthis.serializationType = Transition.SET;\n    if (set !==undefined && set !==null) {\n        this.label = set;\n    } else {\n        this.label = new IntervalSet();\n        this.label.addOne(Token.INVALID_TYPE);\n    }\n    return this;\n}\n\nSetTransition.prototype = Object.create(Transition.prototype);\nSetTransition.prototype.constructor = SetTransition;\n\nSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn this.label.contains(symbol);\n};\n\n\nSetTransition.prototype.toString = function() {\n\treturn this.label.toString();\n};\n\nfunction NotSetTransition(target, set) {\n\tSetTransition.call(this, target, set);\n\tthis.serializationType = Transition.NOT_SET;\n\treturn this;\n}\n\nNotSetTransition.prototype = Object.create(SetTransition.prototype);\nNotSetTransition.prototype.constructor = NotSetTransition;\n\nNotSetTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn symbol >= minVocabSymbol && symbol <= maxVocabSymbol &&\n\t\t\t!SetTransition.prototype.matches.call(this, symbol, minVocabSymbol, maxVocabSymbol);\n};\n\nNotSetTransition.prototype.toString = function() {\n\treturn '~' + SetTransition.prototype.toString.call(this);\n};\n\nfunction WildcardTransition(target) {\n\tTransition.call(this, target);\n\tthis.serializationType = Transition.WILDCARD;\n\treturn this;\n}\n\nWildcardTransition.prototype = Object.create(Transition.prototype);\nWildcardTransition.prototype.constructor = WildcardTransition;\n\n\nWildcardTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn symbol >= minVocabSymbol && symbol <= maxVocabSymbol;\n};\n\nWildcardTransition.prototype.toString = function() {\n\treturn \".\";\n};\n\nfunction PrecedencePredicateTransition(target, precedence) {\n\tAbstractPredicateTransition.call(this, target);\n    this.serializationType = Transition.PRECEDENCE;\n    this.precedence = precedence;\n    this.isEpsilon = true;\n    return this;\n}\n\nPrecedencePredicateTransition.prototype = Object.create(AbstractPredicateTransition.prototype);\nPrecedencePredicateTransition.prototype.constructor = PrecedencePredicateTransition;\n\nPrecedencePredicateTransition.prototype.matches = function(symbol, minVocabSymbol,  maxVocabSymbol) {\n\treturn false;\n};\n\nPrecedencePredicateTransition.prototype.getPredicate = function() {\n\treturn new PrecedencePredicate(this.precedence);\n};\n\nPrecedencePredicateTransition.prototype.toString = function() {\n\treturn this.precedence + \" >= _p\";\n};\n\nexports.Transition = Transition;\nexports.AtomTransition = AtomTransition;\nexports.SetTransition = SetTransition;\nexports.NotSetTransition = NotSetTransition;\nexports.RuleTransition = RuleTransition;\nexports.ActionTransition = ActionTransition;\nexports.EpsilonTransition = EpsilonTransition;\nexports.RangeTransition = RangeTransition;\nexports.WildcardTransition = WildcardTransition;\nexports.PredicateTransition = PredicateTransition;\nexports.PrecedencePredicateTransition = PrecedencePredicateTransition;\nexports.AbstractPredicateTransition = AbstractPredicateTransition;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/Transition.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar LL1Analyzer = require('./../LL1Analyzer').LL1Analyzer;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\n\nfunction ATN(grammarType , maxTokenType) {\n\n    // Used for runtime deserialization of ATNs from strings///\n    // The type of the ATN.\n    this.grammarType = grammarType;\n    // The maximum value for any symbol recognized by a transition in the ATN.\n    this.maxTokenType = maxTokenType;\n    this.states = [];\n    // Each subrule/rule is a decision point and we must track them so we\n    //  can go back later and build DFA predictors for them.  This includes\n    //  all the rules, subrules, optional blocks, ()+, ()* etc...\n    this.decisionToState = [];\n    // Maps from rule index to starting state number.\n    this.ruleToStartState = [];\n    // Maps from rule index to stop state number.\n    this.ruleToStopState = null;\n    this.modeNameToStartState = {};\n    // For lexer ATNs, this maps the rule index to the resulting token type.\n    // For parser ATNs, this maps the rule index to the generated bypass token\n    // type if the\n    // {@link ATNDeserializationOptions//isGenerateRuleBypassTransitions}\n    // deserialization option was specified; otherwise, this is {@code null}.\n    this.ruleToTokenType = null;\n    // For lexer ATNs, this is an array of {@link LexerAction} objects which may\n    // be referenced by action transitions in the ATN.\n    this.lexerActions = null;\n    this.modeToStartState = [];\n\n    return this;\n}\n\n// Compute the set of valid tokens that can occur starting in state {@code s}.\n//  If {@code ctx} is null, the set of tokens will not include what can follow\n//  the rule surrounding {@code s}. In other words, the set will be\n//  restricted to tokens reachable staying within {@code s}'s rule.\nATN.prototype.nextTokensInContext = function(s, ctx) {\n    var anal = new LL1Analyzer(this);\n    return anal.LOOK(s, null, ctx);\n};\n\n// Compute the set of valid tokens that can occur starting in {@code s} and\n// staying in same rule. {@link Token//EPSILON} is in set if we reach end of\n// rule.\nATN.prototype.nextTokensNoContext = function(s) {\n    if (s.nextTokenWithinRule !== null ) {\n        return s.nextTokenWithinRule;\n    }\n    s.nextTokenWithinRule = this.nextTokensInContext(s, null);\n    s.nextTokenWithinRule.readOnly = true;\n    return s.nextTokenWithinRule;\n};\n\nATN.prototype.nextTokens = function(s, ctx) {\n    if ( ctx===undefined ) {\n        return this.nextTokensNoContext(s);\n    } else {\n        return this.nextTokensInContext(s, ctx);\n    }\n};\n\nATN.prototype.addState = function( state) {\n    if ( state !== null ) {\n        state.atn = this;\n        state.stateNumber = this.states.length;\n    }\n    this.states.push(state);\n};\n\nATN.prototype.removeState = function( state) {\n    this.states[state.stateNumber] = null; // just free mem, don't shift states in list\n};\n\nATN.prototype.defineDecisionState = function( s) {\n    this.decisionToState.push(s);\n    s.decision = this.decisionToState.length-1;\n    return s.decision;\n};\n\nATN.prototype.getDecisionState = function( decision) {\n    if (this.decisionToState.length===0) {\n        return null;\n    } else {\n        return this.decisionToState[decision];\n    }\n};\n\n// Computes the set of input symbols which could follow ATN state number\n// {@code stateNumber} in the specified full {@code context}. This method\n// considers the complete parser context, but does not evaluate semantic\n// predicates (i.e. all predicates encountered during the calculation are\n// assumed true). If a path in the ATN exists from the starting state to the\n// {@link RuleStopState} of the outermost context without matching any\n// symbols, {@link Token//EOF} is added to the returned set.\n//\n// <p>If {@code context} is {@code null}, it is treated as\n// {@link ParserRuleContext//EMPTY}.</p>\n//\n// @param stateNumber the ATN state number\n// @param context the full parse context\n// @return The set of potentially valid input symbols which could follow the\n// specified state in the specified context.\n// @throws IllegalArgumentException if the ATN does not contain a state with\n// number {@code stateNumber}\nvar Token = require('./../Token').Token;\n\nATN.prototype.getExpectedTokens = function( stateNumber, ctx ) {\n    if ( stateNumber < 0 || stateNumber >= this.states.length ) {\n        throw(\"Invalid state number.\");\n    }\n    var s = this.states[stateNumber];\n    var following = this.nextTokens(s);\n    if (!following.contains(Token.EPSILON)) {\n        return following;\n    }\n    var expected = new IntervalSet();\n    expected.addSet(following);\n    expected.removeOne(Token.EPSILON);\n    while (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n        var invokingState = this.states[ctx.invokingState];\n        var rt = invokingState.transitions[0];\n        following = this.nextTokens(rt.followState);\n        expected.addSet(following);\n        expected.removeOne(Token.EPSILON);\n        ctx = ctx.parentCtx;\n    }\n    if (following.contains(Token.EPSILON)) {\n        expected.addOne(Token.EOF);\n    }\n    return expected;\n};\n\nATN.INVALID_ALT_NUMBER = 0;\n\nexports.ATN = ATN;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATN.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n//\n// Specialized {@link Set}{@code <}{@link ATNConfig}{@code >} that can track\n// info about the set, with support for combining similar configurations using a\n// graph-structured stack.\n///\n\nvar ATN = require('./ATN').ATN;\nvar Utils = require('./../Utils');\nvar Hash = Utils.Hash;\nvar Set = Utils.Set;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar merge = require('./../PredictionContext').merge;\n\nfunction hashATNConfig(c) {\n\treturn c.hashCodeForConfigSet();\n}\n\nfunction equalATNConfigs(a, b) {\n\tif ( a===b ) {\n\t\treturn true;\n\t} else if ( a===null || b===null ) {\n\t\treturn false;\n\t} else\n       return a.equalsForConfigSet(b);\n }\n\n\nfunction ATNConfigSet(fullCtx) {\n\t//\n\t// The reason that we need this is because we don't want the hash map to use\n\t// the standard hash code and equals. We need all configurations with the\n\t// same\n\t// {@code (s,i,_,semctx)} to be equal. Unfortunately, this key effectively\n\t// doubles\n\t// the number of objects associated with ATNConfigs. The other solution is\n\t// to\n\t// use a hash table that lets us specify the equals/hashcode operation.\n\t// All configs but hashed by (s, i, _, pi) not including context. Wiped out\n\t// when we go readonly as this set becomes a DFA state.\n\tthis.configLookup = new Set(hashATNConfig, equalATNConfigs);\n\t// Indicates that this configuration set is part of a full context\n\t// LL prediction. It will be used to determine how to merge $. With SLL\n\t// it's a wildcard whereas it is not for LL context merge.\n\tthis.fullCtx = fullCtx === undefined ? true : fullCtx;\n\t// Indicates that the set of configurations is read-only. Do not\n\t// allow any code to manipulate the set; DFA states will point at\n\t// the sets and they must not change. This does not protect the other\n\t// fields; in particular, conflictingAlts is set after\n\t// we've made this readonly.\n\tthis.readOnly = false;\n\t// Track the elements as they are added to the set; supports get(i)///\n\tthis.configs = [];\n\n\t// TODO: these fields make me pretty uncomfortable but nice to pack up info\n\t// together, saves recomputation\n\t// TODO: can we track conflicts as they are added to save scanning configs\n\t// later?\n\tthis.uniqueAlt = 0;\n\tthis.conflictingAlts = null;\n\n\t// Used in parser and lexer. In lexer, it indicates we hit a pred\n\t// while computing a closure operation. Don't make a DFA state from this.\n\tthis.hasSemanticContext = false;\n\tthis.dipsIntoOuterContext = false;\n\n\tthis.cachedHashCode = -1;\n\n\treturn this;\n}\n\n// Adding a new config means merging contexts with existing configs for\n// {@code (s, i, pi, _)}, where {@code s} is the\n// {@link ATNConfig//state}, {@code i} is the {@link ATNConfig//alt}, and\n// {@code pi} is the {@link ATNConfig//semanticContext}. We use\n// {@code (s,i,pi)} as key.\n//\n// <p>This method updates {@link //dipsIntoOuterContext} and\n// {@link //hasSemanticContext} when necessary.</p>\n// /\nATNConfigSet.prototype.add = function(config, mergeCache) {\n\tif (mergeCache === undefined) {\n\t\tmergeCache = null;\n\t}\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tif (config.semanticContext !== SemanticContext.NONE) {\n\t\tthis.hasSemanticContext = true;\n\t}\n\tif (config.reachesIntoOuterContext > 0) {\n\t\tthis.dipsIntoOuterContext = true;\n\t}\n\tvar existing = this.configLookup.add(config);\n\tif (existing === config) {\n\t\tthis.cachedHashCode = -1;\n\t\tthis.configs.push(config); // track order here\n\t\treturn true;\n\t}\n\t// a previous (s,i,pi,_), merge with it and save result\n\tvar rootIsWildcard = !this.fullCtx;\n\tvar merged = merge(existing.context, config.context, rootIsWildcard, mergeCache);\n\t// no need to check for existing.context, config.context in cache\n\t// since only way to create new graphs is \"call rule\" and here. We\n\t// cache at both places.\n\texisting.reachesIntoOuterContext = Math.max( existing.reachesIntoOuterContext, config.reachesIntoOuterContext);\n\t// make sure to preserve the precedence filter suppression during the merge\n\tif (config.precedenceFilterSuppressed) {\n\t\texisting.precedenceFilterSuppressed = true;\n\t}\n\texisting.context = merged; // replace context; no need to alt mapping\n\treturn true;\n};\n\nATNConfigSet.prototype.getStates = function() {\n\tvar states = new Set();\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tstates.add(this.configs[i].state);\n\t}\n\treturn states;\n};\n\nATNConfigSet.prototype.getPredicates = function() {\n\tvar preds = [];\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tvar c = this.configs[i].semanticContext;\n\t\tif (c !== SemanticContext.NONE) {\n\t\t\tpreds.push(c.semanticContext);\n\t\t}\n\t}\n\treturn preds;\n};\n\nObject.defineProperty(ATNConfigSet.prototype, \"items\", {\n\tget : function() {\n\t\treturn this.configs;\n\t}\n});\n\nATNConfigSet.prototype.optimizeConfigs = function(interpreter) {\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tif (this.configLookup.length === 0) {\n\t\treturn;\n\t}\n\tfor (var i = 0; i < this.configs.length; i++) {\n\t\tvar config = this.configs[i];\n\t\tconfig.context = interpreter.getCachedContext(config.context);\n\t}\n};\n\nATNConfigSet.prototype.addAll = function(coll) {\n\tfor (var i = 0; i < coll.length; i++) {\n\t\tthis.add(coll[i]);\n\t}\n\treturn false;\n};\n\nATNConfigSet.prototype.equals = function(other) {\n\treturn this === other ||\n\t\t(other instanceof ATNConfigSet &&\n\t\tUtils.equalArrays(this.configs, other.configs) &&\n\t\tthis.fullCtx === other.fullCtx &&\n\t\tthis.uniqueAlt === other.uniqueAlt &&\n\t\tthis.conflictingAlts === other.conflictingAlts &&\n\t\tthis.hasSemanticContext === other.hasSemanticContext &&\n\t\tthis.dipsIntoOuterContext === other.dipsIntoOuterContext);\n};\n\nATNConfigSet.prototype.hashCode = function() {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish();\n};\n\n\nATNConfigSet.prototype.updateHashCode = function(hash) {\n\tif (this.readOnly) {\n\t\tif (this.cachedHashCode === -1) {\n            var hash = new Hash();\n            hash.update(this.configs);\n\t\t\tthis.cachedHashCode = hash.finish();\n\t\t}\n        hash.update(this.cachedHashCode);\n\t} else {\n        hash.update(this.configs);\n\t}\n};\n\n\nObject.defineProperty(ATNConfigSet.prototype, \"length\", {\n\tget : function() {\n\t\treturn this.configs.length;\n\t}\n});\n\nATNConfigSet.prototype.isEmpty = function() {\n\treturn this.configs.length === 0;\n};\n\nATNConfigSet.prototype.contains = function(item) {\n\tif (this.configLookup === null) {\n\t\tthrow \"This method is not implemented for readonly sets.\";\n\t}\n\treturn this.configLookup.contains(item);\n};\n\nATNConfigSet.prototype.containsFast = function(item) {\n\tif (this.configLookup === null) {\n\t\tthrow \"This method is not implemented for readonly sets.\";\n\t}\n\treturn this.configLookup.containsFast(item);\n};\n\nATNConfigSet.prototype.clear = function() {\n\tif (this.readOnly) {\n\t\tthrow \"This set is readonly\";\n\t}\n\tthis.configs = [];\n\tthis.cachedHashCode = -1;\n\tthis.configLookup = new Set();\n};\n\nATNConfigSet.prototype.setReadonly = function(readOnly) {\n\tthis.readOnly = readOnly;\n\tif (readOnly) {\n\t\tthis.configLookup = null; // can't mod, no need for lookup cache\n\t}\n};\n\nATNConfigSet.prototype.toString = function() {\n\treturn Utils.arrayToString(this.configs) +\n\t\t(this.hasSemanticContext ? \",hasSemanticContext=\" + this.hasSemanticContext : \"\") +\n\t\t(this.uniqueAlt !== ATN.INVALID_ALT_NUMBER ? \",uniqueAlt=\" + this.uniqueAlt : \"\") +\n\t\t(this.conflictingAlts !== null ? \",conflictingAlts=\" + this.conflictingAlts : \"\") +\n\t\t(this.dipsIntoOuterContext ? \",dipsIntoOuterContext\" : \"\");\n};\n\nfunction OrderedATNConfigSet() {\n\tATNConfigSet.call(this);\n\tthis.configLookup = new Set();\n\treturn this;\n}\n\nOrderedATNConfigSet.prototype = Object.create(ATNConfigSet.prototype);\nOrderedATNConfigSet.prototype.constructor = OrderedATNConfigSet;\n\nexports.ATNConfigSet = ATNConfigSet;\nexports.OrderedATNConfigSet = OrderedATNConfigSet;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATNConfigSet.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n// A tree structure used to record the semantic context in which\n//  an ATN configuration is valid.  It's either a single predicate,\n//  a conjunction {@code p1&&p2}, or a sum of products {@code p1||p2}.\n//\n//  <p>I have scoped the {@link AND}, {@link OR}, and {@link Predicate} subclasses of\n//  {@link SemanticContext} within the scope of this outer class.</p>\n//\n\nvar Set = require('./../Utils').Set;\nvar Hash = require('./../Utils').Hash;\n\nfunction SemanticContext() {\n\treturn this;\n}\n\nSemanticContext.prototype.hashCode = function() {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish();\n};\n\n// For context independent predicates, we evaluate them without a local\n// context (i.e., null context). That way, we can evaluate them without\n// having to create proper rule-specific context during prediction (as\n// opposed to the parser, which creates them naturally). In a practical\n// sense, this avoids a cast exception from RuleContext to myruleContext.\n//\n// <p>For context dependent predicates, we must pass in a local context so that\n// references such as $arg evaluate properly as _localctx.arg. We only\n// capture context dependent predicates in the context in which we begin\n// prediction, so we passed in the outer context here in case of context\n// dependent predicate evaluation.</p>\n//\nSemanticContext.prototype.evaluate = function(parser, outerContext) {\n};\n\n//\n// Evaluate the precedence predicates for the context and reduce the result.\n//\n// @param parser The parser instance.\n// @param outerContext The current parser context object.\n// @return The simplified semantic context after precedence predicates are\n// evaluated, which will be one of the following values.\n// <ul>\n// <li>{@link //NONE}: if the predicate simplifies to {@code true} after\n// precedence predicates are evaluated.</li>\n// <li>{@code null}: if the predicate simplifies to {@code false} after\n// precedence predicates are evaluated.</li>\n// <li>{@code this}: if the semantic context is not changed as a result of\n// precedence predicate evaluation.</li>\n// <li>A non-{@code null} {@link SemanticContext}: the new simplified\n// semantic context after precedence predicates are evaluated.</li>\n// </ul>\n//\nSemanticContext.prototype.evalPrecedence = function(parser, outerContext) {\n\treturn this;\n};\n\nSemanticContext.andContext = function(a, b) {\n\tif (a === null || a === SemanticContext.NONE) {\n\t\treturn b;\n\t}\n\tif (b === null || b === SemanticContext.NONE) {\n\t\treturn a;\n\t}\n\tvar result = new AND(a, b);\n\tif (result.opnds.length === 1) {\n\t\treturn result.opnds[0];\n\t} else {\n\t\treturn result;\n\t}\n};\n\nSemanticContext.orContext = function(a, b) {\n\tif (a === null) {\n\t\treturn b;\n\t}\n\tif (b === null) {\n\t\treturn a;\n\t}\n\tif (a === SemanticContext.NONE || b === SemanticContext.NONE) {\n\t\treturn SemanticContext.NONE;\n\t}\n\tvar result = new OR(a, b);\n\tif (result.opnds.length === 1) {\n\t\treturn result.opnds[0];\n\t} else {\n\t\treturn result;\n\t}\n};\n\nfunction Predicate(ruleIndex, predIndex, isCtxDependent) {\n\tSemanticContext.call(this);\n\tthis.ruleIndex = ruleIndex === undefined ? -1 : ruleIndex;\n\tthis.predIndex = predIndex === undefined ? -1 : predIndex;\n\tthis.isCtxDependent = isCtxDependent === undefined ? false : isCtxDependent; // e.g., $i ref in pred\n\treturn this;\n}\n\nPredicate.prototype = Object.create(SemanticContext.prototype);\nPredicate.prototype.constructor = Predicate;\n\n//The default {@link SemanticContext}, which is semantically equivalent to\n//a predicate of the form {@code {true}?}.\n//\nSemanticContext.NONE = new Predicate();\n\n\nPredicate.prototype.evaluate = function(parser, outerContext) {\n\tvar localctx = this.isCtxDependent ? outerContext : null;\n\treturn parser.sempred(localctx, this.ruleIndex, this.predIndex);\n};\n\nPredicate.prototype.updateHashCode = function(hash) {\n\thash.update(this.ruleIndex, this.predIndex, this.isCtxDependent);\n};\n\nPredicate.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof Predicate)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.ruleIndex === other.ruleIndex &&\n\t\t\t\tthis.predIndex === other.predIndex &&\n\t\t\t\tthis.isCtxDependent === other.isCtxDependent;\n\t}\n};\n\nPredicate.prototype.toString = function() {\n\treturn \"{\" + this.ruleIndex + \":\" + this.predIndex + \"}?\";\n};\n\nfunction PrecedencePredicate(precedence) {\n\tSemanticContext.call(this);\n\tthis.precedence = precedence === undefined ? 0 : precedence;\n}\n\nPrecedencePredicate.prototype = Object.create(SemanticContext.prototype);\nPrecedencePredicate.prototype.constructor = PrecedencePredicate;\n\nPrecedencePredicate.prototype.evaluate = function(parser, outerContext) {\n\treturn parser.precpred(outerContext, this.precedence);\n};\n\nPrecedencePredicate.prototype.evalPrecedence = function(parser, outerContext) {\n\tif (parser.precpred(outerContext, this.precedence)) {\n\t\treturn SemanticContext.NONE;\n\t} else {\n\t\treturn null;\n\t}\n};\n\nPrecedencePredicate.prototype.compareTo = function(other) {\n\treturn this.precedence - other.precedence;\n};\n\nPrecedencePredicate.prototype.updateHashCode = function(hash) {\n    hash.update(31);\n};\n\nPrecedencePredicate.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof PrecedencePredicate)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.precedence === other.precedence;\n\t}\n};\n\nPrecedencePredicate.prototype.toString = function() {\n\treturn \"{\"+this.precedence+\">=prec}?\";\n};\n\n\n\nPrecedencePredicate.filterPrecedencePredicates = function(set) {\n\tvar result = [];\n\tset.values().map( function(context) {\n\t\tif (context instanceof PrecedencePredicate) {\n\t\t\tresult.push(context);\n\t\t}\n\t});\n\treturn result;\n};\n\n\n// A semantic context which is true whenever none of the contained contexts\n// is false.\n//\nfunction AND(a, b) {\n\tSemanticContext.call(this);\n\tvar operands = new Set();\n\tif (a instanceof AND) {\n\t\ta.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(a);\n\t}\n\tif (b instanceof AND) {\n\t\tb.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(b);\n\t}\n\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\tif (precedencePredicates.length > 0) {\n\t\t// interested in the transition with the lowest precedence\n\t\tvar reduced = null;\n\t\tprecedencePredicates.map( function(p) {\n\t\t\tif(reduced===null || p.precedence<reduced.precedence) {\n\t\t\t\treduced = p;\n\t\t\t}\n\t\t});\n\t\toperands.add(reduced);\n\t}\n\tthis.opnds = operands.values();\n\treturn this;\n}\n\nAND.prototype = Object.create(SemanticContext.prototype);\nAND.prototype.constructor = AND;\n\nAND.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof AND)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.opnds === other.opnds;\n\t}\n};\n\nAND.prototype.updateHashCode = function(hash) {\n    hash.update(this.opnds, \"AND\");\n};\n//\n// {@inheritDoc}\n//\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\nAND.prototype.evaluate = function(parser, outerContext) {\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tif (!this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n};\n\nAND.prototype.evalPrecedence = function(parser, outerContext) {\n\tvar differs = false;\n\tvar operands = [];\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tvar context = this.opnds[i];\n\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\tdiffers |= (evaluated !== context);\n\t\tif (evaluated === null) {\n\t\t\t// The AND context is false if any element is false\n\t\t\treturn null;\n\t\t} else if (evaluated !== SemanticContext.NONE) {\n\t\t\t// Reduce the result by skipping true elements\n\t\t\toperands.push(evaluated);\n\t\t}\n\t}\n\tif (!differs) {\n\t\treturn this;\n\t}\n\tif (operands.length === 0) {\n\t\t// all elements were true, so the AND context is true\n\t\treturn SemanticContext.NONE;\n\t}\n\tvar result = null;\n\toperands.map(function(o) {\n\t\tresult = result === null ? o : SemanticContext.andContext(result, o);\n\t});\n\treturn result;\n};\n\nAND.prototype.toString = function() {\n\tvar s = \"\";\n\tthis.opnds.map(function(o) {\n\t\ts += \"&& \" + o.toString();\n\t});\n\treturn s.length > 3 ? s.slice(3) : s;\n};\n\n//\n// A semantic context which is true whenever at least one of the contained\n// contexts is true.\n//\nfunction OR(a, b) {\n\tSemanticContext.call(this);\n\tvar operands = new Set();\n\tif (a instanceof OR) {\n\t\ta.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(a);\n\t}\n\tif (b instanceof OR) {\n\t\tb.opnds.map(function(o) {\n\t\t\toperands.add(o);\n\t\t});\n\t} else {\n\t\toperands.add(b);\n\t}\n\n\tvar precedencePredicates = PrecedencePredicate.filterPrecedencePredicates(operands);\n\tif (precedencePredicates.length > 0) {\n\t\t// interested in the transition with the highest precedence\n\t\tvar s = precedencePredicates.sort(function(a, b) {\n\t\t\treturn a.compareTo(b);\n\t\t});\n\t\tvar reduced = s[s.length-1];\n\t\toperands.add(reduced);\n\t}\n\tthis.opnds = operands.values();\n\treturn this;\n}\n\nOR.prototype = Object.create(SemanticContext.prototype);\nOR.prototype.constructor = OR;\n\nOR.prototype.constructor = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof OR)) {\n\t\treturn false;\n\t} else {\n\t\treturn this.opnds === other.opnds;\n\t}\n};\n\nOR.prototype.updateHashCode = function(hash) {\n    hash.update(this.opnds, \"OR\");\n};\n\n// <p>\n// The evaluation of predicates by this context is short-circuiting, but\n// unordered.</p>\n//\nOR.prototype.evaluate = function(parser, outerContext) {\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tif (this.opnds[i].evaluate(parser, outerContext)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n};\n\nOR.prototype.evalPrecedence = function(parser, outerContext) {\n\tvar differs = false;\n\tvar operands = [];\n\tfor (var i = 0; i < this.opnds.length; i++) {\n\t\tvar context = this.opnds[i];\n\t\tvar evaluated = context.evalPrecedence(parser, outerContext);\n\t\tdiffers |= (evaluated !== context);\n\t\tif (evaluated === SemanticContext.NONE) {\n\t\t\t// The OR context is true if any element is true\n\t\t\treturn SemanticContext.NONE;\n\t\t} else if (evaluated !== null) {\n\t\t\t// Reduce the result by skipping false elements\n\t\t\toperands.push(evaluated);\n\t\t}\n\t}\n\tif (!differs) {\n\t\treturn this;\n\t}\n\tif (operands.length === 0) {\n\t\t// all elements were false, so the OR context is false\n\t\treturn null;\n\t}\n\tvar result = null;\n\toperands.map(function(o) {\n\t\treturn result === null ? o : SemanticContext.orContext(result, o);\n\t});\n\treturn result;\n};\n\nOR.prototype.toString = function() {\n\tvar s = \"\";\n\tthis.opnds.map(function(o) {\n\t\ts += \"|| \" + o.toString();\n\t});\n\treturn s.length > 3 ? s.slice(3) : s;\n};\n\nexports.SemanticContext = SemanticContext;\nexports.PrecedencePredicate = PrecedencePredicate;\nexports.Predicate = Predicate;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/SemanticContext.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;\nvar Utils = require('./../Utils');\nvar Hash = Utils.Hash;\nvar Set = Utils.Set;\n\n// Map a predicate to a predicted alternative.///\n\nfunction PredPrediction(pred, alt) {\n\tthis.alt = alt;\n\tthis.pred = pred;\n\treturn this;\n}\n\nPredPrediction.prototype.toString = function() {\n\treturn \"(\" + this.pred + \", \" + this.alt + \")\";\n};\n\n// A DFA state represents a set of possible ATN configurations.\n// As Aho, Sethi, Ullman p. 117 says \"The DFA uses its state\n// to keep track of all possible states the ATN can be in after\n// reading each input symbol. That is to say, after reading\n// input a1a2..an, the DFA is in a state that represents the\n// subset T of the states of the ATN that are reachable from the\n// ATN's start state along some path labeled a1a2..an.\"\n// In conventional NFA&rarr;DFA conversion, therefore, the subset T\n// would be a bitset representing the set of states the\n// ATN could be in. We need to track the alt predicted by each\n// state as well, however. More importantly, we need to maintain\n// a stack of states, tracking the closure operations as they\n// jump from rule to rule, emulating rule invocations (method calls).\n// I have to add a stack to simulate the proper lookahead sequences for\n// the underlying LL grammar from which the ATN was derived.\n//\n// <p>I use a set of ATNConfig objects not simple states. An ATNConfig\n// is both a state (ala normal conversion) and a RuleContext describing\n// the chain of rules (if any) followed to arrive at that state.</p>\n//\n// <p>A DFA state may have multiple references to a particular state,\n// but with different ATN contexts (with same or different alts)\n// meaning that state was reached via a different set of rule invocations.</p>\n// /\n\nfunction DFAState(stateNumber, configs) {\n\tif (stateNumber === null) {\n\t\tstateNumber = -1;\n\t}\n\tif (configs === null) {\n\t\tconfigs = new ATNConfigSet();\n\t}\n\tthis.stateNumber = stateNumber;\n\tthis.configs = configs;\n\t// {@code edges[symbol]} points to target of symbol. Shift up by 1 so (-1)\n\t// {@link Token//EOF} maps to {@code edges[0]}.\n\tthis.edges = null;\n\tthis.isAcceptState = false;\n\t// if accept state, what ttype do we match or alt do we predict?\n\t// This is set to {@link ATN//INVALID_ALT_NUMBER} when {@link\n\t// //predicates}{@code !=null} or\n\t// {@link //requiresFullContext}.\n\tthis.prediction = 0;\n\tthis.lexerActionExecutor = null;\n\t// Indicates that this state was created during SLL prediction that\n\t// discovered a conflict between the configurations in the state. Future\n\t// {@link ParserATNSimulator//execATN} invocations immediately jumped doing\n\t// full context prediction if this field is true.\n\tthis.requiresFullContext = false;\n\t// During SLL parsing, this is a list of predicates associated with the\n\t// ATN configurations of the DFA state. When we have predicates,\n\t// {@link //requiresFullContext} is {@code false} since full context\n\t// prediction evaluates predicates\n\t// on-the-fly. If this is not null, then {@link //prediction} is\n\t// {@link ATN//INVALID_ALT_NUMBER}.\n\t//\n\t// <p>We only use these for non-{@link //requiresFullContext} but\n\t// conflicting states. That\n\t// means we know from the context (it's $ or we don't dip into outer\n\t// context) that it's an ambiguity not a conflict.</p>\n\t//\n\t// <p>This list is computed by {@link\n\t// ParserATNSimulator//predicateDFAState}.</p>\n\tthis.predicates = null;\n\treturn this;\n}\n\n// Get the set of all alts mentioned by all ATN configurations in this\n// DFA state.\nDFAState.prototype.getAltSet = function() {\n\tvar alts = new Set();\n\tif (this.configs !== null) {\n\t\tfor (var i = 0; i < this.configs.length; i++) {\n\t\t\tvar c = this.configs[i];\n\t\t\talts.add(c.alt);\n\t\t}\n\t}\n\tif (alts.length === 0) {\n\t\treturn null;\n\t} else {\n\t\treturn alts;\n\t}\n};\n\n// Two {@link DFAState} instances are equal if their ATN configuration sets\n// are the same. This method is used to see if a state already exists.\n//\n// <p>Because the number of alternatives and number of ATN configurations are\n// finite, there is a finite number of DFA states that can be processed.\n// This is necessary to show that the algorithm terminates.</p>\n//\n// <p>Cannot test the DFA state numbers here because in\n// {@link ParserATNSimulator//addDFAState} we need to know if any other state\n// exists that has this exact set of ATN configurations. The\n// {@link //stateNumber} is irrelevant.</p>\nDFAState.prototype.equals = function(other) {\n\t// compare set of ATN configurations in this set with other\n\treturn this === other ||\n\t\t\t(other instanceof DFAState &&\n\t\t\t\tthis.configs.equals(other.configs));\n};\n\nDFAState.prototype.toString = function() {\n\tvar s = \"\" + this.stateNumber + \":\" + this.configs;\n\tif(this.isAcceptState) {\n        s = s + \"=>\";\n        if (this.predicates !== null)\n            s = s + this.predicates;\n        else\n            s = s + this.prediction;\n    }\n\treturn s;\n};\n\nDFAState.prototype.hashCode = function() {\n\tvar hash = new Hash();\n\thash.update(this.configs);\n\tif(this.isAcceptState) {\n        if (this.predicates !== null)\n            hash.update(this.predicates);\n        else\n            hash.update(this.prediction);\n    }\n    return hash.finish();\n};\n\nexports.DFAState = DFAState;\nexports.PredPrediction = PredPrediction;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/dfa/DFAState.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// Provides an empty default implementation of {@link ANTLRErrorListener}. The\n// default implementation of each method does nothing, but can be overridden as\n// necessary.\n\nfunction ErrorListener() {\n\treturn this;\n}\n\nErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n};\n\nErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n};\n\nErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n};\n\nErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n};\n\nfunction ConsoleErrorListener() {\n\tErrorListener.call(this);\n\treturn this;\n}\n\nConsoleErrorListener.prototype = Object.create(ErrorListener.prototype);\nConsoleErrorListener.prototype.constructor = ConsoleErrorListener;\n\n//\n// Provides a default instance of {@link ConsoleErrorListener}.\n//\nConsoleErrorListener.INSTANCE = new ConsoleErrorListener();\n\n//\n// {@inheritDoc}\n//\n// <p>\n// This implementation prints messages to {@link System//err} containing the\n// values of {@code line}, {@code charPositionInLine}, and {@code msg} using\n// the following format.</p>\n//\n// <pre>\n// line <em>line</em>:<em>charPositionInLine</em> <em>msg</em>\n// </pre>\n//\nConsoleErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n    console.error(\"line \" + line + \":\" + column + \" \" + msg);\n};\n\nfunction ProxyErrorListener(delegates) {\n\tErrorListener.call(this);\n    if (delegates===null) {\n        throw \"delegates\";\n    }\n    this.delegates = delegates;\n\treturn this;\n}\n\nProxyErrorListener.prototype = Object.create(ErrorListener.prototype);\nProxyErrorListener.prototype.constructor = ProxyErrorListener;\n\nProxyErrorListener.prototype.syntaxError = function(recognizer, offendingSymbol, line, column, msg, e) {\n    this.delegates.map(function(d) { d.syntaxError(recognizer, offendingSymbol, line, column, msg, e); });\n};\n\nProxyErrorListener.prototype.reportAmbiguity = function(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs) {\n    this.delegates.map(function(d) { d.reportAmbiguity(recognizer, dfa, startIndex, stopIndex, exact, ambigAlts, configs); });\n};\n\nProxyErrorListener.prototype.reportAttemptingFullContext = function(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\tthis.delegates.map(function(d) { d.reportAttemptingFullContext(recognizer, dfa, startIndex, stopIndex, conflictingAlts, configs); });\n};\n\nProxyErrorListener.prototype.reportContextSensitivity = function(recognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\tthis.delegates.map(function(d) { d.reportContextSensitivity(recognizer, dfa, startIndex, stopIndex, prediction, configs); });\n};\n\nexports.ErrorListener = ErrorListener;\nexports.ConsoleErrorListener = ConsoleErrorListener;\nexports.ProxyErrorListener = ProxyErrorListener;\n\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/error/ErrorListener.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = require('./Token').Token;\nrequire('./polyfills/codepointat');\nrequire('./polyfills/fromcodepoint');\n\n// Vacuum all input from a string and then treat it like a buffer.\n\nfunction _loadString(stream, decodeToUnicodeCodePoints) {\n\tstream._index = 0;\n\tstream.data = [];\n\tif (stream.decodeToUnicodeCodePoints) {\n\t\tfor (var i = 0; i < stream.strdata.length; ) {\n\t\t\tvar codePoint = stream.strdata.codePointAt(i);\n\t\t\tstream.data.push(codePoint);\n\t\t\ti += codePoint <= 0xFFFF ? 1 : 2;\n\t\t}\n\t} else {\n\t\tfor (var i = 0; i < stream.strdata.length; i++) {\n\t\t\tvar codeUnit = stream.strdata.charCodeAt(i);\n\t\t\tstream.data.push(codeUnit);\n\t\t}\n\t}\n\tstream._size = stream.data.length;\n}\n\n// If decodeToUnicodeCodePoints is true, the input is treated\n// as a series of Unicode code points.\n//\n// Otherwise, the input is treated as a series of 16-bit UTF-16 code\n// units.\nfunction InputStream(data, decodeToUnicodeCodePoints) {\n\tthis.name = \"<empty>\";\n\tthis.strdata = data;\n\tthis.decodeToUnicodeCodePoints = decodeToUnicodeCodePoints || false;\n\t_loadString(this);\n\treturn this;\n}\n\nObject.defineProperty(InputStream.prototype, \"index\", {\n\tget : function() {\n\t\treturn this._index;\n\t}\n});\n\nObject.defineProperty(InputStream.prototype, \"size\", {\n\tget : function() {\n\t\treturn this._size;\n\t}\n});\n\n// Reset the stream so that it's in the same state it was\n// when the object was created *except* the data array is not\n// touched.\n//\nInputStream.prototype.reset = function() {\n\tthis._index = 0;\n};\n\nInputStream.prototype.consume = function() {\n\tif (this._index >= this._size) {\n\t\t// assert this.LA(1) == Token.EOF\n\t\tthrow (\"cannot consume EOF\");\n\t}\n\tthis._index += 1;\n};\n\nInputStream.prototype.LA = function(offset) {\n\tif (offset === 0) {\n\t\treturn 0; // undefined\n\t}\n\tif (offset < 0) {\n\t\toffset += 1; // e.g., translate LA(-1) to use offset=0\n\t}\n\tvar pos = this._index + offset - 1;\n\tif (pos < 0 || pos >= this._size) { // invalid\n\t\treturn Token.EOF;\n\t}\n\treturn this.data[pos];\n};\n\nInputStream.prototype.LT = function(offset) {\n\treturn this.LA(offset);\n};\n\n// mark/release do nothing; we have entire buffer\nInputStream.prototype.mark = function() {\n\treturn -1;\n};\n\nInputStream.prototype.release = function(marker) {\n};\n\n// consume() ahead until p==_index; can't just set p=_index as we must\n// update line and column. If we seek backwards, just set p\n//\nInputStream.prototype.seek = function(_index) {\n\tif (_index <= this._index) {\n\t\tthis._index = _index; // just jump; don't update stream state (line,\n\t\t\t\t\t\t\t\t// ...)\n\t\treturn;\n\t}\n\t// seek forward\n\tthis._index = Math.min(_index, this._size);\n};\n\nInputStream.prototype.getText = function(start, stop) {\n\tif (stop >= this._size) {\n\t\tstop = this._size - 1;\n\t}\n\tif (start >= this._size) {\n\t\treturn \"\";\n\t} else {\n\t\tif (this.decodeToUnicodeCodePoints) {\n\t\t\tvar result = \"\";\n\t\t\tfor (var i = start; i <= stop; i++) {\n\t\t\t\tresult += String.fromCodePoint(this.data[i]);\n\t\t\t}\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn this.strdata.slice(start, stop + 1);\n\t\t}\n\t}\n};\n\nInputStream.prototype.toString = function() {\n\treturn this.strdata;\n};\n\nexports.InputStream = InputStream;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/InputStream.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// A lexer is recognizer that draws input symbols from a character stream.\n//  lexer grammars result in a subclass of this object. A Lexer object\n//  uses simplified match() and error recovery mechanisms in the interest of speed.\n\nvar Token = require('./Token').Token;\nvar Recognizer = require('./Recognizer').Recognizer;\nvar CommonTokenFactory = require('./CommonTokenFactory').CommonTokenFactory;\nvar RecognitionException  = require('./error/Errors').RecognitionException;\nvar LexerNoViableAltException = require('./error/Errors').LexerNoViableAltException;\n\nfunction TokenSource() {\n\treturn this;\n}\n\nfunction Lexer(input) {\n\tRecognizer.call(this);\n\tthis._input = input;\n\tthis._factory = CommonTokenFactory.DEFAULT;\n\tthis._tokenFactorySourcePair = [ this, input ];\n\n\tthis._interp = null; // child classes must populate this\n\n\t// The goal of all lexer rules/methods is to create a token object.\n\t// this is an instance variable as multiple rules may collaborate to\n\t// create a single token. nextToken will return this object after\n\t// matching lexer rule(s). If you subclass to allow multiple token\n\t// emissions, then set this to the last token to be matched or\n\t// something nonnull so that the auto token emit mechanism will not\n\t// emit another token.\n\tthis._token = null;\n\n\t// What character index in the stream did the current token start at?\n\t// Needed, for example, to get the text for current token. Set at\n\t// the start of nextToken.\n\tthis._tokenStartCharIndex = -1;\n\n\t// The line on which the first character of the token resides///\n\tthis._tokenStartLine = -1;\n\n\t// The character position of first character within the line///\n\tthis._tokenStartColumn = -1;\n\n\t// Once we see EOF on char stream, next token will be EOF.\n\t// If you have DONE : EOF ; then you see DONE EOF.\n\tthis._hitEOF = false;\n\n\t// The channel number for the current token///\n\tthis._channel = Token.DEFAULT_CHANNEL;\n\n\t// The token type for the current token///\n\tthis._type = Token.INVALID_TYPE;\n\n\tthis._modeStack = [];\n\tthis._mode = Lexer.DEFAULT_MODE;\n\n\t// You can set the text for the current token to override what is in\n\t// the input char buffer. Use setText() or can set this instance var.\n\t// /\n\tthis._text = null;\n\n\treturn this;\n}\n\nLexer.prototype = Object.create(Recognizer.prototype);\nLexer.prototype.constructor = Lexer;\n\nLexer.DEFAULT_MODE = 0;\nLexer.MORE = -2;\nLexer.SKIP = -3;\n\nLexer.DEFAULT_TOKEN_CHANNEL = Token.DEFAULT_CHANNEL;\nLexer.HIDDEN = Token.HIDDEN_CHANNEL;\nLexer.MIN_CHAR_VALUE = 0x0000;\nLexer.MAX_CHAR_VALUE = 0x10FFFF;\n\nLexer.prototype.reset = function() {\n\t// wack Lexer state variables\n\tif (this._input !== null) {\n\t\tthis._input.seek(0); // rewind the input\n\t}\n\tthis._token = null;\n\tthis._type = Token.INVALID_TYPE;\n\tthis._channel = Token.DEFAULT_CHANNEL;\n\tthis._tokenStartCharIndex = -1;\n\tthis._tokenStartColumn = -1;\n\tthis._tokenStartLine = -1;\n\tthis._text = null;\n\n\tthis._hitEOF = false;\n\tthis._mode = Lexer.DEFAULT_MODE;\n\tthis._modeStack = [];\n\n\tthis._interp.reset();\n};\n\n// Return a token from this source; i.e., match a token on the char stream.\nLexer.prototype.nextToken = function() {\n\tif (this._input === null) {\n\t\tthrow \"nextToken requires a non-null input stream.\";\n\t}\n\n\t// Mark start location in char stream so unbuffered streams are\n\t// guaranteed at least have text of current token\n\tvar tokenStartMarker = this._input.mark();\n\ttry {\n\t\twhile (true) {\n\t\t\tif (this._hitEOF) {\n\t\t\t\tthis.emitEOF();\n\t\t\t\treturn this._token;\n\t\t\t}\n\t\t\tthis._token = null;\n\t\t\tthis._channel = Token.DEFAULT_CHANNEL;\n\t\t\tthis._tokenStartCharIndex = this._input.index;\n\t\t\tthis._tokenStartColumn = this._interp.column;\n\t\t\tthis._tokenStartLine = this._interp.line;\n\t\t\tthis._text = null;\n\t\t\tvar continueOuter = false;\n\t\t\twhile (true) {\n\t\t\t\tthis._type = Token.INVALID_TYPE;\n\t\t\t\tvar ttype = Lexer.SKIP;\n\t\t\t\ttry {\n\t\t\t\t\tttype = this._interp.match(this._input, this._mode);\n\t\t\t\t} catch (e) {\n\t\t\t\t    if(e instanceof RecognitionException) {\n                        this.notifyListeners(e); // report error\n                        this.recover(e);\n                    } else {\n                        console.log(e.stack);\n                        throw e;\n                    }\n\t\t\t\t}\n\t\t\t\tif (this._input.LA(1) === Token.EOF) {\n\t\t\t\t\tthis._hitEOF = true;\n\t\t\t\t}\n\t\t\t\tif (this._type === Token.INVALID_TYPE) {\n\t\t\t\t\tthis._type = ttype;\n\t\t\t\t}\n\t\t\t\tif (this._type === Lexer.SKIP) {\n\t\t\t\t\tcontinueOuter = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (this._type !== Lexer.MORE) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (continueOuter) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this._token === null) {\n\t\t\t\tthis.emit();\n\t\t\t}\n\t\t\treturn this._token;\n\t\t}\n\t} finally {\n\t\t// make sure we release marker after match or\n\t\t// unbuffered char stream will keep buffering\n\t\tthis._input.release(tokenStartMarker);\n\t}\n};\n\n// Instruct the lexer to skip creating a token for current lexer rule\n// and look for another token. nextToken() knows to keep looking when\n// a lexer rule finishes with token set to SKIP_TOKEN. Recall that\n// if token==null at end of any token rule, it creates one for you\n// and emits it.\n// /\nLexer.prototype.skip = function() {\n\tthis._type = Lexer.SKIP;\n};\n\nLexer.prototype.more = function() {\n\tthis._type = Lexer.MORE;\n};\n\nLexer.prototype.mode = function(m) {\n\tthis._mode = m;\n};\n\nLexer.prototype.pushMode = function(m) {\n\tif (this._interp.debug) {\n\t\tconsole.log(\"pushMode \" + m);\n\t}\n\tthis._modeStack.push(this._mode);\n\tthis.mode(m);\n};\n\nLexer.prototype.popMode = function() {\n\tif (this._modeStack.length === 0) {\n\t\tthrow \"Empty Stack\";\n\t}\n\tif (this._interp.debug) {\n\t\tconsole.log(\"popMode back to \" + this._modeStack.slice(0, -1));\n\t}\n\tthis.mode(this._modeStack.pop());\n\treturn this._mode;\n};\n\n// Set the char stream and reset the lexer\nObject.defineProperty(Lexer.prototype, \"inputStream\", {\n\tget : function() {\n\t\treturn this._input;\n\t},\n\tset : function(input) {\n\t\tthis._input = null;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t\tthis.reset();\n\t\tthis._input = input;\n\t\tthis._tokenFactorySourcePair = [ this, this._input ];\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"sourceName\", {\n\tget : function sourceName() {\n\t\treturn this._input.sourceName;\n\t}\n});\n\n// By default does not support multiple emits per nextToken invocation\n// for efficiency reasons. Subclass and override this method, nextToken,\n// and getToken (to push tokens into a list and pull from that list\n// rather than a single variable as this implementation does).\n// /\nLexer.prototype.emitToken = function(token) {\n\tthis._token = token;\n};\n\n// The standard method called to automatically emit a token at the\n// outermost lexical rule. The token object should point into the\n// char buffer start..stop. If there is a text override in 'text',\n// use that to set the token's text. Override this method to emit\n// custom Token objects or provide a new factory.\n// /\nLexer.prototype.emit = function() {\n\tvar t = this._factory.create(this._tokenFactorySourcePair, this._type,\n\t\t\tthis._text, this._channel, this._tokenStartCharIndex, this\n\t\t\t\t\t.getCharIndex() - 1, this._tokenStartLine,\n\t\t\tthis._tokenStartColumn);\n\tthis.emitToken(t);\n\treturn t;\n};\n\nLexer.prototype.emitEOF = function() {\n\tvar cpos = this.column;\n\tvar lpos = this.line;\n\tvar eof = this._factory.create(this._tokenFactorySourcePair, Token.EOF,\n\t\t\tnull, Token.DEFAULT_CHANNEL, this._input.index,\n\t\t\tthis._input.index - 1, lpos, cpos);\n\tthis.emitToken(eof);\n\treturn eof;\n};\n\nObject.defineProperty(Lexer.prototype, \"type\", {\n\tget : function() {\n\t\treturn this.type;\n\t},\n\tset : function(type) {\n\t\tthis._type = type;\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"line\", {\n\tget : function() {\n\t\treturn this._interp.line;\n\t},\n\tset : function(line) {\n\t\tthis._interp.line = line;\n\t}\n});\n\nObject.defineProperty(Lexer.prototype, \"column\", {\n\tget : function() {\n\t\treturn this._interp.column;\n\t},\n\tset : function(column) {\n\t\tthis._interp.column = column;\n\t}\n});\n\n\n// What is the index of the current character of lookahead?///\nLexer.prototype.getCharIndex = function() {\n\treturn this._input.index;\n};\n\n// Return the text matched so far for the current token or any text override.\n//Set the complete text of this token; it wipes any previous changes to the text.\nObject.defineProperty(Lexer.prototype, \"text\", {\n\tget : function() {\n\t\tif (this._text !== null) {\n\t\t\treturn this._text;\n\t\t} else {\n\t\t\treturn this._interp.getText(this._input);\n\t\t}\n\t},\n\tset : function(text) {\n\t\tthis._text = text;\n\t}\n});\n// Return a list of all Token objects in input char stream.\n// Forces load of all tokens. Does not include EOF token.\n// /\nLexer.prototype.getAllTokens = function() {\n\tvar tokens = [];\n\tvar t = this.nextToken();\n\twhile (t.type !== Token.EOF) {\n\t\ttokens.push(t);\n\t\tt = this.nextToken();\n\t}\n\treturn tokens;\n};\n\nLexer.prototype.notifyListeners = function(e) {\n\tvar start = this._tokenStartCharIndex;\n\tvar stop = this._input.index;\n\tvar text = this._input.getText(start, stop);\n\tvar msg = \"token recognition error at: '\" + this.getErrorDisplay(text) + \"'\";\n\tvar listener = this.getErrorListenerDispatch();\n\tlistener.syntaxError(this, null, this._tokenStartLine,\n\t\t\tthis._tokenStartColumn, msg, e);\n};\n\nLexer.prototype.getErrorDisplay = function(s) {\n\tvar d = [];\n\tfor (var i = 0; i < s.length; i++) {\n\t\td.push(s[i]);\n\t}\n\treturn d.join('');\n};\n\nLexer.prototype.getErrorDisplayForChar = function(c) {\n\tif (c.charCodeAt(0) === Token.EOF) {\n\t\treturn \"<EOF>\";\n\t} else if (c === '\\n') {\n\t\treturn \"\\\\n\";\n\t} else if (c === '\\t') {\n\t\treturn \"\\\\t\";\n\t} else if (c === '\\r') {\n\t\treturn \"\\\\r\";\n\t} else {\n\t\treturn c;\n\t}\n};\n\nLexer.prototype.getCharErrorDisplay = function(c) {\n\treturn \"'\" + this.getErrorDisplayForChar(c) + \"'\";\n};\n\n// Lexers can normally match any char in it's vocabulary after matching\n// a token, so do the easy thing and just kill a character and hope\n// it all works out. You can instead use the rule invocation stack\n// to do sophisticated error recovery if you are in a fragment rule.\n// /\nLexer.prototype.recover = function(re) {\n\tif (this._input.LA(1) !== Token.EOF) {\n\t\tif (re instanceof LexerNoViableAltException) {\n\t\t\t// skip a char and try again\n\t\t\tthis._interp.consume(this._input);\n\t\t} else {\n\t\t\t// TODO: Do we lose character or line position information?\n\t\t\tthis._input.consume();\n\t\t}\n\t}\n};\n\nexports.Lexer = Lexer;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/Lexer.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// A tuple: (ATN state, predicted alt, syntactic, semantic context).\n//  The syntactic context is a graph-structured stack node whose\n//  path(s) to the root is the rule invocation(s)\n//  chain used to arrive at the state.  The semantic context is\n//  the tree of semantic predicates encountered before reaching\n//  an ATN state.\n///\n\nvar DecisionState = require('./ATNState').DecisionState;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar Hash = require(\"../Utils\").Hash;\n\n\nfunction checkParams(params, isCfg) {\n\tif(params===null) {\n\t\tvar result = { state:null, alt:null, context:null, semanticContext:null };\n\t\tif(isCfg) {\n\t\t\tresult.reachesIntoOuterContext = 0;\n\t\t}\n\t\treturn result;\n\t} else {\n\t\tvar props = {};\n\t\tprops.state = params.state || null;\n\t\tprops.alt = (params.alt === undefined) ? null : params.alt;\n\t\tprops.context = params.context || null;\n\t\tprops.semanticContext = params.semanticContext || null;\n\t\tif(isCfg) {\n\t\t\tprops.reachesIntoOuterContext = params.reachesIntoOuterContext || 0;\n\t\t\tprops.precedenceFilterSuppressed = params.precedenceFilterSuppressed || false;\n\t\t}\n\t\treturn props;\n\t}\n}\n\nfunction ATNConfig(params, config) {\n\tthis.checkContext(params, config);\n\tparams = checkParams(params);\n\tconfig = checkParams(config, true);\n    // The ATN state associated with this configuration///\n    this.state = params.state!==null ? params.state : config.state;\n    // What alt (or lexer rule) is predicted by this configuration///\n    this.alt = params.alt!==null ? params.alt : config.alt;\n    // The stack of invoking states leading to the rule/states associated\n    //  with this config.  We track only those contexts pushed during\n    //  execution of the ATN simulator.\n    this.context = params.context!==null ? params.context : config.context;\n    this.semanticContext = params.semanticContext!==null ? params.semanticContext :\n        (config.semanticContext!==null ? config.semanticContext : SemanticContext.NONE);\n    // We cannot execute predicates dependent upon local context unless\n    // we know for sure we are in the correct context. Because there is\n    // no way to do this efficiently, we simply cannot evaluate\n    // dependent predicates unless we are in the rule that initially\n    // invokes the ATN simulator.\n    //\n    // closure() tracks the depth of how far we dip into the\n    // outer context: depth &gt; 0.  Note that it may not be totally\n    // accurate depth since I don't ever decrement. TODO: make it a boolean then\n    this.reachesIntoOuterContext = config.reachesIntoOuterContext;\n    this.precedenceFilterSuppressed = config.precedenceFilterSuppressed;\n    return this;\n}\n\nATNConfig.prototype.checkContext = function(params, config) {\n\tif((params.context===null || params.context===undefined) &&\n\t\t\t(config===null || config.context===null || config.context===undefined)) {\n\t\tthis.context = null;\n\t}\n};\n\n\nATNConfig.prototype.hashCode = function() {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish();\n};\n\n\nATNConfig.prototype.updateHashCode = function(hash) {\n    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext);\n};\n\n// An ATN configuration is equal to another if both have\n//  the same state, they predict the same alternative, and\n//  syntactic/semantic contexts are the same.\n\nATNConfig.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof ATNConfig)) {\n        return false;\n    } else {\n        return this.state.stateNumber===other.state.stateNumber &&\n            this.alt===other.alt &&\n            (this.context===null ? other.context===null : this.context.equals(other.context)) &&\n            this.semanticContext.equals(other.semanticContext) &&\n            this.precedenceFilterSuppressed===other.precedenceFilterSuppressed;\n    }\n};\n\n\nATNConfig.prototype.hashCodeForConfigSet = function() {\n    var hash = new Hash();\n    hash.update(this.state.stateNumber, this.alt, this.semanticContext);\n    return hash.finish();\n};\n\n\nATNConfig.prototype.equalsForConfigSet = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof ATNConfig)) {\n        return false;\n    } else {\n        return this.state.stateNumber===other.state.stateNumber &&\n            this.alt===other.alt &&\n            this.semanticContext.equals(other.semanticContext);\n    }\n};\n\n\nATNConfig.prototype.toString = function() {\n    return \"(\" + this.state + \",\" + this.alt +\n        (this.context!==null ? \",[\" + this.context.toString() + \"]\" : \"\") +\n        (this.semanticContext !== SemanticContext.NONE ?\n                (\",\" + this.semanticContext.toString())\n                : \"\") +\n        (this.reachesIntoOuterContext>0 ?\n                (\",up=\" + this.reachesIntoOuterContext)\n                : \"\") + \")\";\n};\n\n\nfunction LexerATNConfig(params, config) {\n\tATNConfig.call(this, params, config);\n\n    // This is the backing field for {@link //getLexerActionExecutor}.\n\tvar lexerActionExecutor = params.lexerActionExecutor || null;\n    this.lexerActionExecutor = lexerActionExecutor || (config!==null ? config.lexerActionExecutor : null);\n    this.passedThroughNonGreedyDecision = config!==null ? this.checkNonGreedyDecision(config, this.state) : false;\n    return this;\n}\n\nLexerATNConfig.prototype = Object.create(ATNConfig.prototype);\nLexerATNConfig.prototype.constructor = LexerATNConfig;\n\nLexerATNConfig.prototype.updateHashCode = function(hash) {\n    hash.update(this.state.stateNumber, this.alt, this.context, this.semanticContext, this.passedThroughNonGreedyDecision, this.lexerActionExecutor);\n};\n\nLexerATNConfig.prototype.equals = function(other) {\n    return this === other ||\n            (other instanceof LexerATNConfig &&\n            this.passedThroughNonGreedyDecision == other.passedThroughNonGreedyDecision &&\n            (this.lexerActionExecutor ? this.lexerActionExecutor.equals(other.lexerActionExecutor) : !other.lexerActionExecutor) &&\n            ATNConfig.prototype.equals.call(this, other));\n};\n\nLexerATNConfig.prototype.hashCodeForConfigSet = LexerATNConfig.prototype.hashCode;\n\nLexerATNConfig.prototype.equalsForConfigSet = LexerATNConfig.prototype.equals;\n\n\nLexerATNConfig.prototype.checkNonGreedyDecision = function(source, target) {\n    return source.passedThroughNonGreedyDecision ||\n        (target instanceof DecisionState) && target.nonGreedy;\n};\n\nexports.ATNConfig = ATNConfig;\nexports.LexerATNConfig = LexerATNConfig;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATNConfig.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n//  A rule context is a record of a single rule invocation. It knows\n//  which context invoked it, if any. If there is no parent context, then\n//  naturally the invoking state is not valid.  The parent link\n//  provides a chain upwards from the current rule invocation to the root\n//  of the invocation tree, forming a stack. We actually carry no\n//  information about the rule associated with this context (except\n//  when parsing). We keep only the state number of the invoking state from\n//  the ATN submachine that invoked this. Contrast this with the s\n//  pointer inside ParserRuleContext that tracks the current state\n//  being \"executed\" for the current rule.\n//\n//  The parent contexts are useful for computing lookahead sets and\n//  getting error information.\n//\n//  These objects are used during parsing and prediction.\n//  For the special case of parsers, we use the subclass\n//  ParserRuleContext.\n//\n//  @see ParserRuleContext\n///\n\nvar RuleNode = require('./tree/Tree').RuleNode;\nvar INVALID_INTERVAL = require('./tree/Tree').INVALID_INTERVAL;\nvar INVALID_ALT_NUMBER = require('./atn/ATN').INVALID_ALT_NUMBER;\n\nfunction RuleContext(parent, invokingState) {\n\tRuleNode.call(this);\n\t// What context invoked this rule?\n\tthis.parentCtx = parent || null;\n\t// What state invoked the rule associated with this context?\n\t// The \"return address\" is the followState of invokingState\n\t// If parent is null, this should be -1.\n\tthis.invokingState = invokingState || -1;\n\treturn this;\n}\n\nRuleContext.prototype = Object.create(RuleNode.prototype);\nRuleContext.prototype.constructor = RuleContext;\n\nRuleContext.prototype.depth = function() {\n\tvar n = 0;\n\tvar p = this;\n\twhile (p !== null) {\n\t\tp = p.parentCtx;\n\t\tn += 1;\n\t}\n\treturn n;\n};\n\n// A context is empty if there is no invoking state; meaning nobody call\n// current context.\nRuleContext.prototype.isEmpty = function() {\n\treturn this.invokingState === -1;\n};\n\n// satisfy the ParseTree / SyntaxTree interface\n\nRuleContext.prototype.getSourceInterval = function() {\n\treturn INVALID_INTERVAL;\n};\n\nRuleContext.prototype.getRuleContext = function() {\n\treturn this;\n};\n\nRuleContext.prototype.getPayload = function() {\n\treturn this;\n};\n\n// Return the combined text of all child nodes. This method only considers\n// tokens which have been added to the parse tree.\n// <p>\n// Since tokens on hidden channels (e.g. whitespace or comments) are not\n// added to the parse trees, they will not appear in the output of this\n// method.\n// /\nRuleContext.prototype.getText = function() {\n\tif (this.getChildCount() === 0) {\n\t\treturn \"\";\n\t} else {\n\t\treturn this.children.map(function(child) {\n\t\t\treturn child.getText();\n\t\t}).join(\"\");\n\t}\n};\n\n// For rule associated with this parse tree internal node, return\n// the outer alternative number used to match the input. Default\n// implementation does not compute nor store this alt num. Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\n// to set it.\nRuleContext.prototype.getAltNumber = function() { return INVALID_ALT_NUMBER; }\n\n// Set the outer alternative number for this context node. Default\n// implementation does nothing to avoid backing field overhead for\n// trees that don't need it.  Create\n// a subclass of ParserRuleContext with backing field and set\n// option contextSuperClass.\nRuleContext.prototype.setAltNumber = function(altNumber) { }\n\nRuleContext.prototype.getChild = function(i) {\n\treturn null;\n};\n\nRuleContext.prototype.getChildCount = function() {\n\treturn 0;\n};\n\nRuleContext.prototype.accept = function(visitor) {\n\treturn visitor.visitChildren(this);\n};\n\n//need to manage circular dependencies, so export now\nexports.RuleContext = RuleContext;\nvar Trees = require('./tree/Trees').Trees;\n\n\n// Print out a whole tree, not just a node, in LISP format\n// (root child1 .. childN). Print just a node if this is a leaf.\n//\n\nRuleContext.prototype.toStringTree = function(ruleNames, recog) {\n\treturn Trees.toStringTree(this, ruleNames, recog);\n};\n\nRuleContext.prototype.toString = function(ruleNames, stop) {\n\truleNames = ruleNames || null;\n\tstop = stop || null;\n\tvar p = this;\n\tvar s = \"[\";\n\twhile (p !== null && p !== stop) {\n\t\tif (ruleNames === null) {\n\t\t\tif (!p.isEmpty()) {\n\t\t\t\ts += p.invokingState;\n\t\t\t}\n\t\t} else {\n\t\t\tvar ri = p.ruleIndex;\n\t\t\tvar ruleName = (ri >= 0 && ri < ruleNames.length) ? ruleNames[ri]\n\t\t\t\t\t: \"\" + ri;\n\t\t\ts += ruleName;\n\t\t}\n\t\tif (p.parentCtx !== null && (ruleNames !== null || !p.parentCtx.isEmpty())) {\n\t\t\ts += \" \";\n\t\t}\n\t\tp = p.parentCtx;\n\t}\n\ts += \"]\";\n\treturn s;\n};\n\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/RuleContext.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// A DFA walker that knows how to dump them to serialized strings.#/\n\n\nfunction DFASerializer(dfa, literalNames, symbolicNames) {\n\tthis.dfa = dfa;\n\tthis.literalNames = literalNames || [];\n\tthis.symbolicNames = symbolicNames || [];\n\treturn this;\n}\n\nDFASerializer.prototype.toString = function() {\n   if(this.dfa.s0 === null) {\n       return null;\n   }\n   var buf = \"\";\n   var states = this.dfa.sortedStates();\n   for(var i=0;i<states.length;i++) {\n       var s = states[i];\n       if(s.edges!==null) {\n            var n = s.edges.length;\n            for(var j=0;j<n;j++) {\n                var t = s.edges[j] || null;\n                if(t!==null && t.stateNumber !== 0x7FFFFFFF) {\n                    buf = buf.concat(this.getStateString(s));\n                    buf = buf.concat(\"-\");\n                    buf = buf.concat(this.getEdgeLabel(j));\n                    buf = buf.concat(\"->\");\n                    buf = buf.concat(this.getStateString(t));\n                    buf = buf.concat('\\n');\n                }\n            }\n       }\n   }\n   return buf.length===0 ? null : buf;\n};\n\nDFASerializer.prototype.getEdgeLabel = function(i) {\n    if (i===0) {\n        return \"EOF\";\n    } else if(this.literalNames !==null || this.symbolicNames!==null) {\n        return this.literalNames[i-1] || this.symbolicNames[i-1];\n    } else {\n        return String.fromCharCode(i-1);\n    }\n};\n\nDFASerializer.prototype.getStateString = function(s) {\n    var baseStateStr = ( s.isAcceptState ? \":\" : \"\") + \"s\" + s.stateNumber + ( s.requiresFullContext ? \"^\" : \"\");\n    if(s.isAcceptState) {\n        if (s.predicates !== null) {\n            return baseStateStr + \"=>\" + s.predicates.toString();\n        } else {\n            return baseStateStr + \"=>\" + s.prediction.toString();\n        }\n    } else {\n        return baseStateStr;\n    }\n};\n\nfunction LexerDFASerializer(dfa) {\n\tDFASerializer.call(this, dfa, null);\n\treturn this;\n}\n\nLexerDFASerializer.prototype = Object.create(DFASerializer.prototype);\nLexerDFASerializer.prototype.constructor = LexerDFASerializer;\n\nLexerDFASerializer.prototype.getEdgeLabel = function(i) {\n\treturn \"'\" + String.fromCharCode(i) + \"'\";\n};\n\nexports.DFASerializer = DFASerializer;\nexports.LexerDFASerializer = LexerDFASerializer;\n\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/dfa/DFASerializer.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\nexports.atn = require('./atn/index');\nexports.codepointat = require('./polyfills/codepointat');\nexports.dfa = require('./dfa/index');\nexports.fromcodepoint = require('./polyfills/fromcodepoint');\nexports.tree = require('./tree/index');\nexports.error = require('./error/index');\nexports.Token = require('./Token').Token;\nexports.CharStreams = require('./CharStreams').CharStreams;\nexports.CommonToken = require('./Token').CommonToken;\nexports.InputStream = require('./InputStream').InputStream;\nexports.FileStream = require('./FileStream').FileStream;\nexports.CommonTokenStream = require('./CommonTokenStream').CommonTokenStream;\nexports.Lexer = require('./Lexer').Lexer;\nexports.Parser = require('./Parser').Parser;\nvar pc = require('./PredictionContext');\nexports.PredictionContextCache = pc.PredictionContextCache;\nexports.ParserRuleContext = require('./ParserRuleContext').ParserRuleContext;\nexports.Interval = require('./IntervalSet').Interval;\nexports.Utils = require('./Utils');\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/index.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n//* A rule invocation record for parsing.\n//\n//  Contains all of the information about the current rule not stored in the\n//  RuleContext. It handles parse tree children list, Any ATN state\n//  tracing, and the default values available for rule indications:\n//  start, stop, rule index, current alt number, current\n//  ATN state.\n//\n//  Subclasses made for each rule and grammar track the parameters,\n//  return values, locals, and labels specific to that rule. These\n//  are the objects that are returned from rules.\n//\n//  Note text is not an actual field of a rule return value; it is computed\n//  from start and stop using the input stream's toString() method.  I\n//  could add a ctor to this so that we can pass in and store the input\n//  stream, but I'm not sure we want to do that.  It would seem to be undefined\n//  to get the .text property anyway if the rule matches tokens from multiple\n//  input streams.\n//\n//  I do not use getters for fields of objects that are used simply to\n//  group values such as this aggregate.  The getters/setters are there to\n//  satisfy the superclass interface.\n\nvar RuleContext = require('./RuleContext').RuleContext;\nvar Tree = require('./tree/Tree');\nvar INVALID_INTERVAL = Tree.INVALID_INTERVAL;\nvar TerminalNode = Tree.TerminalNode;\nvar TerminalNodeImpl = Tree.TerminalNodeImpl;\nvar ErrorNodeImpl = Tree.ErrorNodeImpl;\nvar Interval = require(\"./IntervalSet\").Interval;\n\nfunction ParserRuleContext(parent, invokingStateNumber) {\n\tparent = parent || null;\n\tinvokingStateNumber = invokingStateNumber || null;\n\tRuleContext.call(this, parent, invokingStateNumber);\n\tthis.ruleIndex = -1;\n    // * If we are debugging or building a parse tree for a visitor,\n    // we need to track all of the tokens and rule invocations associated\n    // with this rule's context. This is empty for parsing w/o tree constr.\n    // operation because we don't the need to track the details about\n    // how we parse this rule.\n    // /\n    this.children = null;\n    this.start = null;\n    this.stop = null;\n    // The exception that forced this rule to return. If the rule successfully\n    // completed, this is {@code null}.\n    this.exception = null;\n}\n\nParserRuleContext.prototype = Object.create(RuleContext.prototype);\nParserRuleContext.prototype.constructor = ParserRuleContext;\n\n// * COPY a ctx (I'm deliberately not using copy constructor)///\nParserRuleContext.prototype.copyFrom = function(ctx) {\n    // from RuleContext\n    this.parentCtx = ctx.parentCtx;\n    this.invokingState = ctx.invokingState;\n    this.children = null;\n    this.start = ctx.start;\n    this.stop = ctx.stop;\n    // copy any error nodes to alt label node\n    if(ctx.children) {\n        this.children = [];\n        // reset parent pointer for any error nodes\n    \tctx.children.map(function(child) {\n    \t\tif (child instanceof ErrorNodeImpl) {\n                this.children.push(child);\n                child.parentCtx = this;\n            }\n\t\t}, this);\n\t}\n};\n\n// Double dispatch methods for listeners\nParserRuleContext.prototype.enterRule = function(listener) {\n};\n\nParserRuleContext.prototype.exitRule = function(listener) {\n};\n\n// * Does not set parent link; other add methods do that///\nParserRuleContext.prototype.addChild = function(child) {\n    if (this.children === null) {\n        this.children = [];\n    }\n    this.children.push(child);\n    return child;\n};\n\n// * Used by enterOuterAlt to toss out a RuleContext previously added as\n// we entered a rule. If we have // label, we will need to remove\n// generic ruleContext object.\n// /\nParserRuleContext.prototype.removeLastChild = function() {\n    if (this.children !== null) {\n        this.children.pop();\n    }\n};\n\nParserRuleContext.prototype.addTokenNode = function(token) {\n    var node = new TerminalNodeImpl(token);\n    this.addChild(node);\n    node.parentCtx = this;\n    return node;\n};\n\nParserRuleContext.prototype.addErrorNode = function(badToken) {\n    var node = new ErrorNodeImpl(badToken);\n    this.addChild(node);\n    node.parentCtx = this;\n    return node;\n};\n\nParserRuleContext.prototype.getChild = function(i, type) {\n\ttype = type || null;\n\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\treturn null;\n\t}\n\tif (type === null) {\n\t\treturn this.children[i];\n\t} else {\n\t\tfor(var j=0; j<this.children.length; j++) {\n\t\t\tvar child = this.children[j];\n\t\t\tif(child instanceof type) {\n\t\t\t\tif(i===0) {\n\t\t\t\t\treturn child;\n\t\t\t\t} else {\n\t\t\t\t\ti -= 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n    }\n};\n\n\nParserRuleContext.prototype.getToken = function(ttype, i) {\n\tif (this.children === null || i < 0 || i >= this.children.length) {\n\t\treturn null;\n\t}\n\tfor(var j=0; j<this.children.length; j++) {\n\t\tvar child = this.children[j];\n\t\tif (child instanceof TerminalNode) {\n\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\tif(i===0) {\n\t\t\t\t\treturn child;\n\t\t\t\t} else {\n\t\t\t\t\ti -= 1;\n\t\t\t\t}\n\t\t\t}\n        }\n\t}\n    return null;\n};\n\nParserRuleContext.prototype.getTokens = function(ttype ) {\n    if (this.children=== null) {\n        return [];\n    } else {\n\t\tvar tokens = [];\n\t\tfor(var j=0; j<this.children.length; j++) {\n\t\t\tvar child = this.children[j];\n\t\t\tif (child instanceof TerminalNode) {\n\t\t\t\tif (child.symbol.type === ttype) {\n\t\t\t\t\ttokens.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tokens;\n    }\n};\n\nParserRuleContext.prototype.getTypedRuleContext = function(ctxType, i) {\n    return this.getChild(i, ctxType);\n};\n\nParserRuleContext.prototype.getTypedRuleContexts = function(ctxType) {\n    if (this.children=== null) {\n        return [];\n    } else {\n\t\tvar contexts = [];\n\t\tfor(var j=0; j<this.children.length; j++) {\n\t\t\tvar child = this.children[j];\n\t\t\tif (child instanceof ctxType) {\n\t\t\t\tcontexts.push(child);\n\t\t\t}\n\t\t}\n\t\treturn contexts;\n\t}\n};\n\nParserRuleContext.prototype.getChildCount = function() {\n\tif (this.children=== null) {\n\t\treturn 0;\n\t} else {\n\t\treturn this.children.length;\n\t}\n};\n\nParserRuleContext.prototype.getSourceInterval = function() {\n    if( this.start === null || this.stop === null) {\n        return INVALID_INTERVAL;\n    } else {\n        return new Interval(this.start.tokenIndex, this.stop.tokenIndex);\n    }\n};\n\nRuleContext.EMPTY = new ParserRuleContext();\n\nfunction InterpreterRuleContext(parent, invokingStateNumber, ruleIndex) {\n\tParserRuleContext.call(parent, invokingStateNumber);\n    this.ruleIndex = ruleIndex;\n    return this;\n}\n\nInterpreterRuleContext.prototype = Object.create(ParserRuleContext.prototype);\nInterpreterRuleContext.prototype.constructor = InterpreterRuleContext;\n\nexports.ParserRuleContext = ParserRuleContext;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/ParserRuleContext.js","/*! https://mths.be/codepointat v0.2.0 by @mathias */\nif (!String.prototype.codePointAt) {\n\t(function() {\n\t\t'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar codePointAt = function(position) {\n\t\t\tif (this == null) {\n\t\t\t\tthrow TypeError();\n\t\t\t}\n\t\t\tvar string = String(this);\n\t\t\tvar size = string.length;\n\t\t\t// `ToInteger`\n\t\t\tvar index = position ? Number(position) : 0;\n\t\t\tif (index != index) { // better `isNaN`\n\t\t\t\tindex = 0;\n\t\t\t}\n\t\t\t// Account for out-of-bounds indices:\n\t\t\tif (index < 0 || index >= size) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// Get the first code unit\n\t\t\tvar first = string.charCodeAt(index);\n\t\t\tvar second;\n\t\t\tif ( // check if it’s the start of a surrogate pair\n\t\t\t\tfirst >= 0xD800 && first <= 0xDBFF && // high surrogate\n\t\t\t\tsize > index + 1 // there is a next code unit\n\t\t\t) {\n\t\t\t\tsecond = string.charCodeAt(index + 1);\n\t\t\t\tif (second >= 0xDC00 && second <= 0xDFFF) { // low surrogate\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\treturn (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn first;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String.prototype, 'codePointAt', {\n\t\t\t\t'value': codePointAt,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.prototype.codePointAt = codePointAt;\n\t\t}\n\t}());\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/polyfills/codepointat.js","/*! https://mths.be/fromcodepoint v0.2.1 by @mathias */\nif (!String.fromCodePoint) {\n\t(function() {\n\t\tvar defineProperty = (function() {\n\t\t\t// IE 8 only supports `Object.defineProperty` on DOM elements\n\t\t\ttry {\n\t\t\t\tvar object = {};\n\t\t\t\tvar $defineProperty = Object.defineProperty;\n\t\t\t\tvar result = $defineProperty(object, object, object) && $defineProperty;\n\t\t\t} catch(error) {}\n\t\t\treturn result;\n\t\t}());\n\t\tvar stringFromCharCode = String.fromCharCode;\n\t\tvar floor = Math.floor;\n\t\tvar fromCodePoint = function(_) {\n\t\t\tvar MAX_SIZE = 0x4000;\n\t\t\tvar codeUnits = [];\n\t\t\tvar highSurrogate;\n\t\t\tvar lowSurrogate;\n\t\t\tvar index = -1;\n\t\t\tvar length = arguments.length;\n\t\t\tif (!length) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tvar result = '';\n\t\t\twhile (++index < length) {\n\t\t\t\tvar codePoint = Number(arguments[index]);\n\t\t\t\tif (\n\t\t\t\t\t!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n\t\t\t\t\tcodePoint < 0 || // not a valid Unicode code point\n\t\t\t\t\tcodePoint > 0x10FFFF || // not a valid Unicode code point\n\t\t\t\t\tfloor(codePoint) != codePoint // not an integer\n\t\t\t\t) {\n\t\t\t\t\tthrow RangeError('Invalid code point: ' + codePoint);\n\t\t\t\t}\n\t\t\t\tif (codePoint <= 0xFFFF) { // BMP code point\n\t\t\t\t\tcodeUnits.push(codePoint);\n\t\t\t\t} else { // Astral code point; split in surrogate halves\n\t\t\t\t\t// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n\t\t\t\t\tcodePoint -= 0x10000;\n\t\t\t\t\thighSurrogate = (codePoint >> 10) + 0xD800;\n\t\t\t\t\tlowSurrogate = (codePoint % 0x400) + 0xDC00;\n\t\t\t\t\tcodeUnits.push(highSurrogate, lowSurrogate);\n\t\t\t\t}\n\t\t\t\tif (index + 1 == length || codeUnits.length > MAX_SIZE) {\n\t\t\t\t\tresult += stringFromCharCode.apply(null, codeUnits);\n\t\t\t\t\tcodeUnits.length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\t\tif (defineProperty) {\n\t\t\tdefineProperty(String, 'fromCodePoint', {\n\t\t\t\t'value': fromCodePoint,\n\t\t\t\t'configurable': true,\n\t\t\t\t'writable': true\n\t\t\t});\n\t\t} else {\n\t\t\tString.fromCodePoint = fromCodePoint;\n\t\t}\n\t}());\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/polyfills/fromcodepoint.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n//\n// This class extends {@link BufferedTokenStream} with functionality to filter\n// token streams to tokens on a particular channel (tokens where\n// {@link Token//getChannel} returns a particular value).\n//\n// <p>\n// This token stream provides access to all tokens by index or when calling\n// methods like {@link //getText}. The channel filtering is only used for code\n// accessing tokens via the lookahead methods {@link //LA}, {@link //LT}, and\n// {@link //LB}.</p>\n//\n// <p>\n// By default, tokens are placed on the default channel\n// ({@link Token//DEFAULT_CHANNEL}), but may be reassigned by using the\n// {@code ->channel(HIDDEN)} lexer command, or by using an embedded action to\n// call {@link Lexer//setChannel}.\n// </p>\n//\n// <p>\n// Note: lexer rules which use the {@code ->skip} lexer command or call\n// {@link Lexer//skip} do not produce tokens at all, so input text matched by\n// such a rule will not be available as part of the token stream, regardless of\n// channel.</p>\n///\n\nvar Token = require('./Token').Token;\nvar BufferedTokenStream = require('./BufferedTokenStream').BufferedTokenStream;\n\nfunction CommonTokenStream(lexer, channel) {\n\tBufferedTokenStream.call(this, lexer);\n    this.channel = channel===undefined ? Token.DEFAULT_CHANNEL : channel;\n    return this;\n}\n\nCommonTokenStream.prototype = Object.create(BufferedTokenStream.prototype);\nCommonTokenStream.prototype.constructor = CommonTokenStream;\n\nCommonTokenStream.prototype.adjustSeekIndex = function(i) {\n    return this.nextTokenOnChannel(i, this.channel);\n};\n\nCommonTokenStream.prototype.LB = function(k) {\n    if (k===0 || this.index-k<0) {\n        return null;\n    }\n    var i = this.index;\n    var n = 1;\n    // find k good tokens looking backwards\n    while (n <= k) {\n        // skip off-channel tokens\n        i = this.previousTokenOnChannel(i - 1, this.channel);\n        n += 1;\n    }\n    if (i < 0) {\n        return null;\n    }\n    return this.tokens[i];\n};\n\nCommonTokenStream.prototype.LT = function(k) {\n    this.lazyInit();\n    if (k === 0) {\n        return null;\n    }\n    if (k < 0) {\n        return this.LB(-k);\n    }\n    var i = this.index;\n    var n = 1; // we know tokens[pos] is a good one\n    // find k good tokens\n    while (n < k) {\n        // skip off-channel tokens, but make sure to not look past EOF\n        if (this.sync(i + 1)) {\n            i = this.nextTokenOnChannel(i + 1, this.channel);\n        }\n        n += 1;\n    }\n    return this.tokens[i];\n};\n\n// Count EOF just once.///\nCommonTokenStream.prototype.getNumberOfOnChannelTokens = function() {\n    var n = 0;\n    this.fill();\n    for (var i =0; i< this.tokens.length;i++) {\n        var t = this.tokens[i];\n        if( t.channel===this.channel) {\n            n += 1;\n        }\n        if( t.type===Token.EOF) {\n            break;\n        }\n    }\n    return n;\n};\n\nexports.CommonTokenStream = CommonTokenStream;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/CommonTokenStream.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = require('./Token').Token;\nvar ConsoleErrorListener = require('./error/ErrorListener').ConsoleErrorListener;\nvar ProxyErrorListener = require('./error/ErrorListener').ProxyErrorListener;\n\nfunction Recognizer() {\n    this._listeners = [ ConsoleErrorListener.INSTANCE ];\n    this._interp = null;\n    this._stateNumber = -1;\n    return this;\n}\n\nRecognizer.tokenTypeMapCache = {};\nRecognizer.ruleIndexMapCache = {};\n\n\nRecognizer.prototype.checkVersion = function(toolVersion) {\n    var runtimeVersion = \"4.7\";\n    if (runtimeVersion!==toolVersion) {\n        console.log(\"ANTLR runtime and generated code versions disagree: \"+runtimeVersion+\"!=\"+toolVersion);\n    }\n};\n\nRecognizer.prototype.addErrorListener = function(listener) {\n    this._listeners.push(listener);\n};\n\nRecognizer.prototype.removeErrorListeners = function() {\n    this._listeners = [];\n};\n\nRecognizer.prototype.getTokenTypeMap = function() {\n    var tokenNames = this.getTokenNames();\n    if (tokenNames===null) {\n        throw(\"The current recognizer does not provide a list of token names.\");\n    }\n    var result = this.tokenTypeMapCache[tokenNames];\n    if(result===undefined) {\n        result = tokenNames.reduce(function(o, k, i) { o[k] = i; });\n        result.EOF = Token.EOF;\n        this.tokenTypeMapCache[tokenNames] = result;\n    }\n    return result;\n};\n\n// Get a map from rule names to rule indexes.\n//\n// <p>Used for XPath and tree pattern compilation.</p>\n//\nRecognizer.prototype.getRuleIndexMap = function() {\n    var ruleNames = this.ruleNames;\n    if (ruleNames===null) {\n        throw(\"The current recognizer does not provide a list of rule names.\");\n    }\n    var result = this.ruleIndexMapCache[ruleNames];\n    if(result===undefined) {\n        result = ruleNames.reduce(function(o, k, i) { o[k] = i; });\n        this.ruleIndexMapCache[ruleNames] = result;\n    }\n    return result;\n};\n\nRecognizer.prototype.getTokenType = function(tokenName) {\n    var ttype = this.getTokenTypeMap()[tokenName];\n    if (ttype !==undefined) {\n        return ttype;\n    } else {\n        return Token.INVALID_TYPE;\n    }\n};\n\n\n// What is the error header, normally line/character position information?//\nRecognizer.prototype.getErrorHeader = function(e) {\n    var line = e.getOffendingToken().line;\n    var column = e.getOffendingToken().column;\n    return \"line \" + line + \":\" + column;\n};\n\n\n// How should a token be displayed in an error message? The default\n//  is to display just the text, but during development you might\n//  want to have a lot of information spit out.  Override in that case\n//  to use t.toString() (which, for CommonToken, dumps everything about\n//  the token). This is better than forcing you to override a method in\n//  your token objects because you don't have to go modify your lexer\n//  so that it creates a new Java type.\n//\n// @deprecated This method is not called by the ANTLR 4 Runtime. Specific\n// implementations of {@link ANTLRErrorStrategy} may provide a similar\n// feature when necessary. For example, see\n// {@link DefaultErrorStrategy//getTokenErrorDisplay}.\n//\nRecognizer.prototype.getTokenErrorDisplay = function(t) {\n    if (t===null) {\n        return \"<no token>\";\n    }\n    var s = t.text;\n    if (s===null) {\n        if (t.type===Token.EOF) {\n            s = \"<EOF>\";\n        } else {\n            s = \"<\" + t.type + \">\";\n        }\n    }\n    s = s.replace(\"\\n\",\"\\\\n\").replace(\"\\r\",\"\\\\r\").replace(\"\\t\",\"\\\\t\");\n    return \"'\" + s + \"'\";\n};\n\nRecognizer.prototype.getErrorListenerDispatch = function() {\n    return new ProxyErrorListener(this._listeners);\n};\n\n// subclass needs to override these if there are sempreds or actions\n// that the ATN interp needs to execute\nRecognizer.prototype.sempred = function(localctx, ruleIndex, actionIndex) {\n    return true;\n};\n\nRecognizer.prototype.precpred = function(localctx , precedence) {\n    return true;\n};\n\n//Indicate that the recognizer has changed internal state that is\n//consistent with the ATN state passed in.  This way we always know\n//where we are in the ATN as the parser goes along. The rule\n//context objects form a stack that lets us see the stack of\n//invoking rules. Combine this and we have complete ATN\n//configuration information.\n\nObject.defineProperty(Recognizer.prototype, \"state\", {\n\tget : function() {\n\t\treturn this._stateNumber;\n\t},\n\tset : function(state) {\n\t\tthis._stateNumber = state;\n\t}\n});\n\n\nexports.Recognizer = Recognizer;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/Recognizer.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Utils = require('./../Utils');\nvar Token = require('./../Token').Token;\nvar RuleNode = require('./Tree').RuleNode;\nvar ErrorNode = require('./Tree').ErrorNode;\nvar TerminalNode = require('./Tree').TerminalNode;\nvar ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;\nvar RuleContext = require('./../RuleContext').RuleContext;\nvar INVALID_ALT_NUMBER = require('./../atn/ATN').INVALID_ALT_NUMBER;\n\n\n/** A set of utility routines useful for all kinds of ANTLR trees. */\nfunction Trees() {\n}\n\n// Print out a whole tree in LISP form. {@link //getNodeText} is used on the\n//  node payloads to get the text for the nodes.  Detect\n//  parse trees and extract data appropriately.\nTrees.toStringTree = function(tree, ruleNames, recog) {\n\truleNames = ruleNames || null;\n\trecog = recog || null;\n    if(recog!==null) {\n       ruleNames = recog.ruleNames;\n    }\n    var s = Trees.getNodeText(tree, ruleNames);\n    s = Utils.escapeWhitespace(s, false);\n    var c = tree.getChildCount();\n    if(c===0) {\n        return s;\n    }\n    var res = \"(\" + s + ' ';\n    if(c>0) {\n        s = Trees.toStringTree(tree.getChild(0), ruleNames);\n        res = res.concat(s);\n    }\n    for(var i=1;i<c;i++) {\n        s = Trees.toStringTree(tree.getChild(i), ruleNames);\n        res = res.concat(' ' + s);\n    }\n    res = res.concat(\")\");\n    return res;\n};\n\nTrees.getNodeText = function(t, ruleNames, recog) {\n\truleNames = ruleNames || null;\n\trecog = recog || null;\n    if(recog!==null) {\n        ruleNames = recog.ruleNames;\n    }\n    if(ruleNames!==null) {\n       if (t instanceof RuleContext) {\n           var altNumber = t.getAltNumber();\n           if ( altNumber!=INVALID_ALT_NUMBER ) {\n               return ruleNames[t.ruleIndex]+\":\"+altNumber;\n           }\n           return ruleNames[t.ruleIndex];\n       } else if ( t instanceof ErrorNode) {\n           return t.toString();\n       } else if(t instanceof TerminalNode) {\n           if(t.symbol!==null) {\n               return t.symbol.text;\n           }\n       }\n    }\n    // no recog for rule names\n    var payload = t.getPayload();\n    if (payload instanceof Token ) {\n       return payload.text;\n    }\n    return t.getPayload().toString();\n};\n\n\n// Return ordered list of all children of this node\nTrees.getChildren = function(t) {\n\tvar list = [];\n\tfor(var i=0;i<t.getChildCount();i++) {\n\t\tlist.push(t.getChild(i));\n\t}\n\treturn list;\n};\n\n// Return a list of all ancestors of this node.  The first node of\n//  list is the root and the last is the parent of this node.\n//\nTrees.getAncestors = function(t) {\n    var ancestors = [];\n    t = t.getParent();\n    while(t!==null) {\n        ancestors = [t].concat(ancestors);\n        t = t.getParent();\n    }\n    return ancestors;\n};\n\nTrees.findAllTokenNodes = function(t, ttype) {\n    return Trees.findAllNodes(t, ttype, true);\n};\n\nTrees.findAllRuleNodes = function(t, ruleIndex) {\n\treturn Trees.findAllNodes(t, ruleIndex, false);\n};\n\nTrees.findAllNodes = function(t, index, findTokens) {\n\tvar nodes = [];\n\tTrees._findAllNodes(t, index, findTokens, nodes);\n\treturn nodes;\n};\n\nTrees._findAllNodes = function(t, index, findTokens, nodes) {\n\t// check this node (the root) first\n\tif(findTokens && (t instanceof TerminalNode)) {\n\t\tif(t.symbol.type===index) {\n\t\t\tnodes.push(t);\n\t\t}\n\t} else if(!findTokens && (t instanceof ParserRuleContext)) {\n\t\tif(t.ruleIndex===index) {\n\t\t\tnodes.push(t);\n\t\t}\n\t}\n\t// check children\n\tfor(var i=0;i<t.getChildCount();i++) {\n\t\tTrees._findAllNodes(t.getChild(i), index, findTokens, nodes);\n\t}\n};\n\nTrees.descendants = function(t) {\n\tvar nodes = [t];\n    for(var i=0;i<t.getChildCount();i++) {\n        nodes = nodes.concat(Trees.descendants(t.getChild(i)));\n    }\n    return nodes;\n};\n\n\nexports.Trees = Trees;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/tree/Trees.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Token = require('./../Token').Token;\nvar ATN = require('./ATN').ATN;\nvar ATNType = require('./ATNType').ATNType;\nvar ATNStates = require('./ATNState');\nvar ATNState = ATNStates.ATNState;\nvar BasicState = ATNStates.BasicState;\nvar DecisionState = ATNStates.DecisionState;\nvar BlockStartState = ATNStates.BlockStartState;\nvar BlockEndState = ATNStates.BlockEndState;\nvar LoopEndState = ATNStates.LoopEndState;\nvar RuleStartState = ATNStates.RuleStartState;\nvar RuleStopState = ATNStates.RuleStopState;\nvar TokensStartState = ATNStates.TokensStartState;\nvar PlusLoopbackState = ATNStates.PlusLoopbackState;\nvar StarLoopbackState = ATNStates.StarLoopbackState;\nvar StarLoopEntryState = ATNStates.StarLoopEntryState;\nvar PlusBlockStartState = ATNStates.PlusBlockStartState;\nvar StarBlockStartState = ATNStates.StarBlockStartState;\nvar BasicBlockStartState = ATNStates.BasicBlockStartState;\nvar Transitions = require('./Transition');\nvar Transition = Transitions.Transition;\nvar AtomTransition = Transitions.AtomTransition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar RangeTransition = Transitions.RangeTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar EpsilonTransition = Transitions.EpsilonTransition;\nvar WildcardTransition = Transitions.WildcardTransition;\nvar PredicateTransition = Transitions.PredicateTransition;\nvar PrecedencePredicateTransition = Transitions.PrecedencePredicateTransition;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\nvar Interval = require('./../IntervalSet').Interval;\nvar ATNDeserializationOptions = require('./ATNDeserializationOptions').ATNDeserializationOptions;\nvar LexerActions = require('./LexerAction');\nvar LexerActionType = LexerActions.LexerActionType;\nvar LexerSkipAction = LexerActions.LexerSkipAction;\nvar LexerChannelAction = LexerActions.LexerChannelAction;\nvar LexerCustomAction = LexerActions.LexerCustomAction;\nvar LexerMoreAction = LexerActions.LexerMoreAction;\nvar LexerTypeAction = LexerActions.LexerTypeAction;\nvar LexerPushModeAction = LexerActions.LexerPushModeAction;\nvar LexerPopModeAction = LexerActions.LexerPopModeAction;\nvar LexerModeAction = LexerActions.LexerModeAction;\n// This is the earliest supported serialized UUID.\n// stick to serialized version for now, we don't need a UUID instance\nvar BASE_SERIALIZED_UUID = \"AADB8D7E-AEEF-4415-AD2B-8204D6CF042E\";\n\n//\n// This UUID indicates the serialized ATN contains two sets of\n// IntervalSets, where the second set's values are encoded as\n// 32-bit integers to support the full Unicode SMP range up to U+10FFFF.\n//\nvar ADDED_UNICODE_SMP = \"59627784-3BE5-417A-B9EB-8131A7286089\";\n\n// This list contains all of the currently supported UUIDs, ordered by when\n// the feature first appeared in this branch.\nvar SUPPORTED_UUIDS = [ BASE_SERIALIZED_UUID, ADDED_UNICODE_SMP ];\n\nvar SERIALIZED_VERSION = 3;\n\n// This is the current serialized UUID.\nvar SERIALIZED_UUID = ADDED_UNICODE_SMP;\n\nfunction initArray( length, value) {\n\tvar tmp = [];\n\ttmp[length-1] = value;\n\treturn tmp.map(function(i) {return value;});\n}\n\nfunction ATNDeserializer (options) {\n\n    if ( options=== undefined || options === null ) {\n        options = ATNDeserializationOptions.defaultOptions;\n    }\n    this.deserializationOptions = options;\n    this.stateFactories = null;\n    this.actionFactories = null;\n\n    return this;\n}\n\n// Determines if a particular serialized representation of an ATN supports\n// a particular feature, identified by the {@link UUID} used for serializing\n// the ATN at the time the feature was first introduced.\n//\n// @param feature The {@link UUID} marking the first time the feature was\n// supported in the serialized ATN.\n// @param actualUuid The {@link UUID} of the actual serialized ATN which is\n// currently being deserialized.\n// @return {@code true} if the {@code actualUuid} value represents a\n// serialized ATN at or after the feature identified by {@code feature} was\n// introduced; otherwise, {@code false}.\n\nATNDeserializer.prototype.isFeatureSupported = function(feature, actualUuid) {\n    var idx1 = SUPPORTED_UUIDS.indexOf(feature);\n    if (idx1<0) {\n        return false;\n    }\n    var idx2 = SUPPORTED_UUIDS.indexOf(actualUuid);\n    return idx2 >= idx1;\n};\n\nATNDeserializer.prototype.deserialize = function(data) {\n    this.reset(data);\n    this.checkVersion();\n    this.checkUUID();\n    var atn = this.readATN();\n    this.readStates(atn);\n    this.readRules(atn);\n    this.readModes(atn);\n    var sets = [];\n    // First, deserialize sets with 16-bit arguments <= U+FFFF.\n    this.readSets(atn, sets, this.readInt.bind(this));\n    // Next, if the ATN was serialized with the Unicode SMP feature,\n    // deserialize sets with 32-bit arguments <= U+10FFFF.\n    if (this.isFeatureSupported(ADDED_UNICODE_SMP, this.uuid)) {\n        this.readSets(atn, sets, this.readInt32.bind(this));\n    }\n    this.readEdges(atn, sets);\n    this.readDecisions(atn);\n    this.readLexerActions(atn);\n    this.markPrecedenceDecisions(atn);\n    this.verifyATN(atn);\n    if (this.deserializationOptions.generateRuleBypassTransitions && atn.grammarType === ATNType.PARSER ) {\n        this.generateRuleBypassTransitions(atn);\n        // re-verify after modification\n        this.verifyATN(atn);\n    }\n    return atn;\n};\n\nATNDeserializer.prototype.reset = function(data) {\n\tvar adjust = function(c) {\n        var v = c.charCodeAt(0);\n        return v>1  ? v-2 : -1;\n\t};\n    var temp = data.split(\"\").map(adjust);\n    // don't adjust the first value since that's the version number\n    temp[0] = data.charCodeAt(0);\n    this.data = temp;\n    this.pos = 0;\n};\n\nATNDeserializer.prototype.checkVersion = function() {\n    var version = this.readInt();\n    if ( version !== SERIALIZED_VERSION ) {\n        throw (\"Could not deserialize ATN with version \" + version + \" (expected \" + SERIALIZED_VERSION + \").\");\n    }\n};\n\nATNDeserializer.prototype.checkUUID = function() {\n    var uuid = this.readUUID();\n    if (SUPPORTED_UUIDS.indexOf(uuid)<0) {\n        throw (\"Could not deserialize ATN with UUID: \" + uuid +\n                        \" (expected \" + SERIALIZED_UUID + \" or a legacy UUID).\", uuid, SERIALIZED_UUID);\n    }\n    this.uuid = uuid;\n};\n\nATNDeserializer.prototype.readATN = function() {\n    var grammarType = this.readInt();\n    var maxTokenType = this.readInt();\n    return new ATN(grammarType, maxTokenType);\n};\n\nATNDeserializer.prototype.readStates = function(atn) {\n\tvar j, pair, stateNumber;\n    var loopBackStateNumbers = [];\n    var endStateNumbers = [];\n    var nstates = this.readInt();\n    for(var i=0; i<nstates; i++) {\n        var stype = this.readInt();\n        // ignore bad type of states\n        if (stype===ATNState.INVALID_TYPE) {\n            atn.addState(null);\n            continue;\n        }\n        var ruleIndex = this.readInt();\n        if (ruleIndex === 0xFFFF) {\n            ruleIndex = -1;\n        }\n        var s = this.stateFactory(stype, ruleIndex);\n        if (stype === ATNState.LOOP_END) { // special case\n            var loopBackStateNumber = this.readInt();\n            loopBackStateNumbers.push([s, loopBackStateNumber]);\n        } else if(s instanceof BlockStartState) {\n            var endStateNumber = this.readInt();\n            endStateNumbers.push([s, endStateNumber]);\n        }\n        atn.addState(s);\n    }\n    // delay the assignment of loop back and end states until we know all the\n\t// state instances have been initialized\n    for (j=0; j<loopBackStateNumbers.length; j++) {\n        pair = loopBackStateNumbers[j];\n        pair[0].loopBackState = atn.states[pair[1]];\n    }\n\n    for (j=0; j<endStateNumbers.length; j++) {\n        pair = endStateNumbers[j];\n        pair[0].endState = atn.states[pair[1]];\n    }\n\n    var numNonGreedyStates = this.readInt();\n    for (j=0; j<numNonGreedyStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].nonGreedy = true;\n    }\n\n    var numPrecedenceStates = this.readInt();\n    for (j=0; j<numPrecedenceStates; j++) {\n        stateNumber = this.readInt();\n        atn.states[stateNumber].isPrecedenceRule = true;\n    }\n};\n\nATNDeserializer.prototype.readRules = function(atn) {\n    var i;\n    var nrules = this.readInt();\n    if (atn.grammarType === ATNType.LEXER ) {\n        atn.ruleToTokenType = initArray(nrules, 0);\n    }\n    atn.ruleToStartState = initArray(nrules, 0);\n    for (i=0; i<nrules; i++) {\n        var s = this.readInt();\n        var startState = atn.states[s];\n        atn.ruleToStartState[i] = startState;\n        if ( atn.grammarType === ATNType.LEXER ) {\n            var tokenType = this.readInt();\n            if (tokenType === 0xFFFF) {\n                tokenType = Token.EOF;\n            }\n            atn.ruleToTokenType[i] = tokenType;\n        }\n    }\n    atn.ruleToStopState = initArray(nrules, 0);\n    for (i=0; i<atn.states.length; i++) {\n        var state = atn.states[i];\n        if (!(state instanceof RuleStopState)) {\n            continue;\n        }\n        atn.ruleToStopState[state.ruleIndex] = state;\n        atn.ruleToStartState[state.ruleIndex].stopState = state;\n    }\n};\n\nATNDeserializer.prototype.readModes = function(atn) {\n    var nmodes = this.readInt();\n    for (var i=0; i<nmodes; i++) {\n        var s = this.readInt();\n        atn.modeToStartState.push(atn.states[s]);\n    }\n};\n\nATNDeserializer.prototype.readSets = function(atn, sets, readUnicode) {\n    var m = this.readInt();\n    for (var i=0; i<m; i++) {\n        var iset = new IntervalSet();\n        sets.push(iset);\n        var n = this.readInt();\n        var containsEof = this.readInt();\n        if (containsEof!==0) {\n            iset.addOne(-1);\n        }\n        for (var j=0; j<n; j++) {\n            var i1 = readUnicode();\n            var i2 = readUnicode();\n            iset.addRange(i1, i2);\n        }\n    }\n};\n\nATNDeserializer.prototype.readEdges = function(atn, sets) {\n\tvar i, j, state, trans, target;\n    var nedges = this.readInt();\n    for (i=0; i<nedges; i++) {\n        var src = this.readInt();\n        var trg = this.readInt();\n        var ttype = this.readInt();\n        var arg1 = this.readInt();\n        var arg2 = this.readInt();\n        var arg3 = this.readInt();\n        trans = this.edgeFactory(atn, ttype, src, trg, arg1, arg2, arg3, sets);\n        var srcState = atn.states[src];\n        srcState.addTransition(trans);\n    }\n    // edges for rule stop states can be derived, so they aren't serialized\n    for (i=0; i<atn.states.length; i++) {\n        state = atn.states[i];\n        for (j=0; j<state.transitions.length; j++) {\n            var t = state.transitions[j];\n            if (!(t instanceof RuleTransition)) {\n                continue;\n            }\n\t\t\tvar outermostPrecedenceReturn = -1;\n\t\t\tif (atn.ruleToStartState[t.target.ruleIndex].isPrecedenceRule) {\n\t\t\t\tif (t.precedence === 0) {\n\t\t\t\t\toutermostPrecedenceReturn = t.target.ruleIndex;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttrans = new EpsilonTransition(t.followState, outermostPrecedenceReturn);\n            atn.ruleToStopState[t.target.ruleIndex].addTransition(trans);\n        }\n    }\n\n    for (i=0; i<atn.states.length; i++) {\n        state = atn.states[i];\n        if (state instanceof BlockStartState) {\n            // we need to know the end state to set its start state\n            if (state.endState === null) {\n                throw (\"IllegalState\");\n            }\n            // block end states can only be associated to a single block start\n\t\t\t// state\n            if ( state.endState.startState !== null) {\n                throw (\"IllegalState\");\n            }\n            state.endState.startState = state;\n        }\n        if (state instanceof PlusLoopbackState) {\n            for (j=0; j<state.transitions.length; j++) {\n                target = state.transitions[j].target;\n                if (target instanceof PlusBlockStartState) {\n                    target.loopBackState = state;\n                }\n            }\n        } else if (state instanceof StarLoopbackState) {\n            for (j=0; j<state.transitions.length; j++) {\n                target = state.transitions[j].target;\n                if (target instanceof StarLoopEntryState) {\n                    target.loopBackState = state;\n                }\n            }\n        }\n    }\n};\n\nATNDeserializer.prototype.readDecisions = function(atn) {\n    var ndecisions = this.readInt();\n    for (var i=0; i<ndecisions; i++) {\n        var s = this.readInt();\n        var decState = atn.states[s];\n        atn.decisionToState.push(decState);\n        decState.decision = i;\n    }\n};\n\nATNDeserializer.prototype.readLexerActions = function(atn) {\n    if (atn.grammarType === ATNType.LEXER) {\n        var count = this.readInt();\n        atn.lexerActions = initArray(count, null);\n        for (var i=0; i<count; i++) {\n            var actionType = this.readInt();\n            var data1 = this.readInt();\n            if (data1 === 0xFFFF) {\n                data1 = -1;\n            }\n            var data2 = this.readInt();\n            if (data2 === 0xFFFF) {\n                data2 = -1;\n            }\n            var lexerAction = this.lexerActionFactory(actionType, data1, data2);\n            atn.lexerActions[i] = lexerAction;\n        }\n    }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransitions = function(atn) {\n\tvar i;\n    var count = atn.ruleToStartState.length;\n    for(i=0; i<count; i++) {\n        atn.ruleToTokenType[i] = atn.maxTokenType + i + 1;\n    }\n    for(i=0; i<count; i++) {\n        this.generateRuleBypassTransition(atn, i);\n    }\n};\n\nATNDeserializer.prototype.generateRuleBypassTransition = function(atn, idx) {\n\tvar i, state;\n    var bypassStart = new BasicBlockStartState();\n    bypassStart.ruleIndex = idx;\n    atn.addState(bypassStart);\n\n    var bypassStop = new BlockEndState();\n    bypassStop.ruleIndex = idx;\n    atn.addState(bypassStop);\n\n    bypassStart.endState = bypassStop;\n    atn.defineDecisionState(bypassStart);\n\n    bypassStop.startState = bypassStart;\n\n    var excludeTransition = null;\n    var endState = null;\n\n    if (atn.ruleToStartState[idx].isPrecedenceRule) {\n        // wrap from the beginning of the rule to the StarLoopEntryState\n        endState = null;\n        for(i=0; i<atn.states.length; i++) {\n            state = atn.states[i];\n            if (this.stateIsEndStateFor(state, idx)) {\n                endState = state;\n                excludeTransition = state.loopBackState.transitions[0];\n                break;\n            }\n        }\n        if (excludeTransition === null) {\n            throw (\"Couldn't identify final state of the precedence rule prefix section.\");\n        }\n    } else {\n        endState = atn.ruleToStopState[idx];\n    }\n\n    // all non-excluded transitions that currently target end state need to\n\t// target blockEnd instead\n    for(i=0; i<atn.states.length; i++) {\n        state = atn.states[i];\n        for(var j=0; j<state.transitions.length; j++) {\n            var transition = state.transitions[j];\n            if (transition === excludeTransition) {\n                continue;\n            }\n            if (transition.target === endState) {\n                transition.target = bypassStop;\n            }\n        }\n    }\n\n    // all transitions leaving the rule start state need to leave blockStart\n\t// instead\n    var ruleToStartState = atn.ruleToStartState[idx];\n    var count = ruleToStartState.transitions.length;\n    while ( count > 0) {\n        bypassStart.addTransition(ruleToStartState.transitions[count-1]);\n        ruleToStartState.transitions = ruleToStartState.transitions.slice(-1);\n    }\n    // link the new states\n    atn.ruleToStartState[idx].addTransition(new EpsilonTransition(bypassStart));\n    bypassStop.addTransition(new EpsilonTransition(endState));\n\n    var matchState = new BasicState();\n    atn.addState(matchState);\n    matchState.addTransition(new AtomTransition(bypassStop, atn.ruleToTokenType[idx]));\n    bypassStart.addTransition(new EpsilonTransition(matchState));\n};\n\nATNDeserializer.prototype.stateIsEndStateFor = function(state, idx) {\n    if ( state.ruleIndex !== idx) {\n        return null;\n    }\n    if (!( state instanceof StarLoopEntryState)) {\n        return null;\n    }\n    var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n    if (!( maybeLoopEndState instanceof LoopEndState)) {\n        return null;\n    }\n    if (maybeLoopEndState.epsilonOnlyTransitions &&\n        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n        return state;\n    } else {\n        return null;\n    }\n};\n\n//\n// Analyze the {@link StarLoopEntryState} states in the specified ATN to set\n// the {@link StarLoopEntryState//isPrecedenceDecision} field to the\n// correct value.\n//\n// @param atn The ATN.\n//\nATNDeserializer.prototype.markPrecedenceDecisions = function(atn) {\n\tfor(var i=0; i<atn.states.length; i++) {\n\t\tvar state = atn.states[i];\n\t\tif (!( state instanceof StarLoopEntryState)) {\n            continue;\n        }\n        // We analyze the ATN to determine if this ATN decision state is the\n        // decision for the closure block that determines whether a\n        // precedence rule should continue or complete.\n        //\n        if ( atn.ruleToStartState[state.ruleIndex].isPrecedenceRule) {\n            var maybeLoopEndState = state.transitions[state.transitions.length - 1].target;\n            if (maybeLoopEndState instanceof LoopEndState) {\n                if ( maybeLoopEndState.epsilonOnlyTransitions &&\n                        (maybeLoopEndState.transitions[0].target instanceof RuleStopState)) {\n                    state.isPrecedenceDecision = true;\n                }\n            }\n        }\n\t}\n};\n\nATNDeserializer.prototype.verifyATN = function(atn) {\n    if (!this.deserializationOptions.verifyATN) {\n        return;\n    }\n    // verify assumptions\n\tfor(var i=0; i<atn.states.length; i++) {\n        var state = atn.states[i];\n        if (state === null) {\n            continue;\n        }\n        this.checkCondition(state.epsilonOnlyTransitions || state.transitions.length <= 1);\n        if (state instanceof PlusBlockStartState) {\n            this.checkCondition(state.loopBackState !== null);\n        } else  if (state instanceof StarLoopEntryState) {\n            this.checkCondition(state.loopBackState !== null);\n            this.checkCondition(state.transitions.length === 2);\n            if (state.transitions[0].target instanceof StarBlockStartState) {\n                this.checkCondition(state.transitions[1].target instanceof LoopEndState);\n                this.checkCondition(!state.nonGreedy);\n            } else if (state.transitions[0].target instanceof LoopEndState) {\n                this.checkCondition(state.transitions[1].target instanceof StarBlockStartState);\n                this.checkCondition(state.nonGreedy);\n            } else {\n                throw(\"IllegalState\");\n            }\n        } else if (state instanceof StarLoopbackState) {\n            this.checkCondition(state.transitions.length === 1);\n            this.checkCondition(state.transitions[0].target instanceof StarLoopEntryState);\n        } else if (state instanceof LoopEndState) {\n            this.checkCondition(state.loopBackState !== null);\n        } else if (state instanceof RuleStartState) {\n            this.checkCondition(state.stopState !== null);\n        } else if (state instanceof BlockStartState) {\n            this.checkCondition(state.endState !== null);\n        } else if (state instanceof BlockEndState) {\n            this.checkCondition(state.startState !== null);\n        } else if (state instanceof DecisionState) {\n            this.checkCondition(state.transitions.length <= 1 || state.decision >= 0);\n        } else {\n            this.checkCondition(state.transitions.length <= 1 || (state instanceof RuleStopState));\n        }\n\t}\n};\n\nATNDeserializer.prototype.checkCondition = function(condition, message) {\n    if (!condition) {\n        if (message === undefined || message===null) {\n            message = \"IllegalState\";\n        }\n        throw (message);\n    }\n};\n\nATNDeserializer.prototype.readInt = function() {\n    return this.data[this.pos++];\n};\n\nATNDeserializer.prototype.readInt32 = function() {\n    var low = this.readInt();\n    var high = this.readInt();\n    return low | (high << 16);\n};\n\nATNDeserializer.prototype.readLong = function() {\n    var low = this.readInt32();\n    var high = this.readInt32();\n    return (low & 0x00000000FFFFFFFF) | (high << 32);\n};\n\nfunction createByteToHex() {\n\tvar bth = [];\n\tfor (var i = 0; i < 256; i++) {\n\t\tbth[i] = (i + 0x100).toString(16).substr(1).toUpperCase();\n\t}\n\treturn bth;\n}\n\nvar byteToHex = createByteToHex();\n\nATNDeserializer.prototype.readUUID = function() {\n\tvar bb = [];\n\tfor(var i=7;i>=0;i--) {\n\t\tvar int = this.readInt();\n\t\t/* jshint bitwise: false */\n\t\tbb[(2*i)+1] = int & 0xFF;\n\t\tbb[2*i] = (int >> 8) & 0xFF;\n\t}\n    return byteToHex[bb[0]] + byteToHex[bb[1]] +\n    byteToHex[bb[2]] + byteToHex[bb[3]] + '-' +\n    byteToHex[bb[4]] + byteToHex[bb[5]] + '-' +\n    byteToHex[bb[6]] + byteToHex[bb[7]] + '-' +\n    byteToHex[bb[8]] + byteToHex[bb[9]] + '-' +\n    byteToHex[bb[10]] + byteToHex[bb[11]] +\n    byteToHex[bb[12]] + byteToHex[bb[13]] +\n    byteToHex[bb[14]] + byteToHex[bb[15]];\n};\n\nATNDeserializer.prototype.edgeFactory = function(atn, type, src, trg, arg1, arg2, arg3, sets) {\n    var target = atn.states[trg];\n    switch(type) {\n    case Transition.EPSILON:\n        return new EpsilonTransition(target);\n    case Transition.RANGE:\n        return arg3 !== 0 ? new RangeTransition(target, Token.EOF, arg2) : new RangeTransition(target, arg1, arg2);\n    case Transition.RULE:\n        return new RuleTransition(atn.states[arg1], arg2, arg3, target);\n    case Transition.PREDICATE:\n        return new PredicateTransition(target, arg1, arg2, arg3 !== 0);\n    case Transition.PRECEDENCE:\n        return new PrecedencePredicateTransition(target, arg1);\n    case Transition.ATOM:\n        return arg3 !== 0 ? new AtomTransition(target, Token.EOF) : new AtomTransition(target, arg1);\n    case Transition.ACTION:\n        return new ActionTransition(target, arg1, arg2, arg3 !== 0);\n    case Transition.SET:\n        return new SetTransition(target, sets[arg1]);\n    case Transition.NOT_SET:\n        return new NotSetTransition(target, sets[arg1]);\n    case Transition.WILDCARD:\n        return new WildcardTransition(target);\n    default:\n        throw \"The specified transition type: \" + type + \" is not valid.\";\n    }\n};\n\nATNDeserializer.prototype.stateFactory = function(type, ruleIndex) {\n    if (this.stateFactories === null) {\n        var sf = [];\n        sf[ATNState.INVALID_TYPE] = null;\n        sf[ATNState.BASIC] = function() { return new BasicState(); };\n        sf[ATNState.RULE_START] = function() { return new RuleStartState(); };\n        sf[ATNState.BLOCK_START] = function() { return new BasicBlockStartState(); };\n        sf[ATNState.PLUS_BLOCK_START] = function() { return new PlusBlockStartState(); };\n        sf[ATNState.STAR_BLOCK_START] = function() { return new StarBlockStartState(); };\n        sf[ATNState.TOKEN_START] = function() { return new TokensStartState(); };\n        sf[ATNState.RULE_STOP] = function() { return new RuleStopState(); };\n        sf[ATNState.BLOCK_END] = function() { return new BlockEndState(); };\n        sf[ATNState.STAR_LOOP_BACK] = function() { return new StarLoopbackState(); };\n        sf[ATNState.STAR_LOOP_ENTRY] = function() { return new StarLoopEntryState(); };\n        sf[ATNState.PLUS_LOOP_BACK] = function() { return new PlusLoopbackState(); };\n        sf[ATNState.LOOP_END] = function() { return new LoopEndState(); };\n        this.stateFactories = sf;\n    }\n    if (type>this.stateFactories.length || this.stateFactories[type] === null) {\n        throw(\"The specified state type \" + type + \" is not valid.\");\n    } else {\n        var s = this.stateFactories[type]();\n        if (s!==null) {\n            s.ruleIndex = ruleIndex;\n            return s;\n        }\n    }\n};\n\nATNDeserializer.prototype.lexerActionFactory = function(type, data1, data2) {\n    if (this.actionFactories === null) {\n        var af = [];\n        af[LexerActionType.CHANNEL] = function(data1, data2) { return new LexerChannelAction(data1); };\n        af[LexerActionType.CUSTOM] = function(data1, data2) { return new LexerCustomAction(data1, data2); };\n        af[LexerActionType.MODE] = function(data1, data2) { return new LexerModeAction(data1); };\n        af[LexerActionType.MORE] = function(data1, data2) { return LexerMoreAction.INSTANCE; };\n        af[LexerActionType.POP_MODE] = function(data1, data2) { return LexerPopModeAction.INSTANCE; };\n        af[LexerActionType.PUSH_MODE] = function(data1, data2) { return new LexerPushModeAction(data1); };\n        af[LexerActionType.SKIP] = function(data1, data2) { return LexerSkipAction.INSTANCE; };\n        af[LexerActionType.TYPE] = function(data1, data2) { return new LexerTypeAction(data1); };\n        this.actionFactories = af;\n    }\n    if (type>this.actionFactories.length || this.actionFactories[type] === null) {\n        throw(\"The specified lexer action type \" + type + \" is not valid.\");\n    } else {\n        return this.actionFactories[type](data1, data2);\n    }\n};\n\n\nexports.ATNDeserializer = ATNDeserializer;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATNDeserializer.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nfunction ATNDeserializationOptions(copyFrom) {\n\tif(copyFrom===undefined) {\n\t\tcopyFrom = null;\n\t}\n\tthis.readOnly = false;\n    this.verifyATN = copyFrom===null ? true : copyFrom.verifyATN;\n    this.generateRuleBypassTransitions = copyFrom===null ? false : copyFrom.generateRuleBypassTransitions;\n\n    return this;\n}\n\nATNDeserializationOptions.defaultOptions = new ATNDeserializationOptions();\nATNDeserializationOptions.defaultOptions.readOnly = true;\n\n//    def __setattr__(self, key, value):\n//        if key!=\"readOnly\" and self.readOnly:\n//            raise Exception(\"The object is read only.\")\n//        super(type(self), self).__setattr__(key,value)\n\nexports.ATNDeserializationOptions = ATNDeserializationOptions;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATNDeserializationOptions.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n //\n\nfunction LexerActionType() {\n}\n\nLexerActionType.CHANNEL = 0;     //The type of a {@link LexerChannelAction} action.\nLexerActionType.CUSTOM = 1;      //The type of a {@link LexerCustomAction} action.\nLexerActionType.MODE = 2;        //The type of a {@link LexerModeAction} action.\nLexerActionType.MORE = 3;        //The type of a {@link LexerMoreAction} action.\nLexerActionType.POP_MODE = 4;    //The type of a {@link LexerPopModeAction} action.\nLexerActionType.PUSH_MODE = 5;   //The type of a {@link LexerPushModeAction} action.\nLexerActionType.SKIP = 6;        //The type of a {@link LexerSkipAction} action.\nLexerActionType.TYPE = 7;        //The type of a {@link LexerTypeAction} action.\n\nfunction LexerAction(action) {\n    this.actionType = action;\n    this.isPositionDependent = false;\n    return this;\n}\n\nLexerAction.prototype.hashCode = function() {\n    var hash = new Hash();\n    this.updateHashCode(hash);\n    return hash.finish()\n};\n\nLexerAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType);\n};\n\nLexerAction.prototype.equals = function(other) {\n    return this === other;\n};\n\n\n\n//\n// Implements the {@code skip} lexer action by calling {@link Lexer//skip}.\n//\n// <p>The {@code skip} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerSkipAction() {\n\tLexerAction.call(this, LexerActionType.SKIP);\n\treturn this;\n}\n\nLexerSkipAction.prototype = Object.create(LexerAction.prototype);\nLexerSkipAction.prototype.constructor = LexerSkipAction;\n\n// Provides a singleton instance of this parameterless lexer action.\nLexerSkipAction.INSTANCE = new LexerSkipAction();\n\nLexerSkipAction.prototype.execute = function(lexer) {\n    lexer.skip();\n};\n\nLexerSkipAction.prototype.toString = function() {\n\treturn \"skip\";\n};\n\n//  Implements the {@code type} lexer action by calling {@link Lexer//setType}\n// with the assigned type.\nfunction LexerTypeAction(type) {\n\tLexerAction.call(this, LexerActionType.TYPE);\n\tthis.type = type;\n\treturn this;\n}\n\nLexerTypeAction.prototype = Object.create(LexerAction.prototype);\nLexerTypeAction.prototype.constructor = LexerTypeAction;\n\nLexerTypeAction.prototype.execute = function(lexer) {\n    lexer.type = this.type;\n};\n\nLexerTypeAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.type);\n};\n\n\nLexerTypeAction.prototype.equals = function(other) {\n    if(this === other) {\n        return true;\n    } else if (! (other instanceof LexerTypeAction)) {\n        return false;\n    } else {\n        return this.type === other.type;\n    }\n};\n\nLexerTypeAction.prototype.toString = function() {\n    return \"type(\" + this.type + \")\";\n};\n\n// Implements the {@code pushMode} lexer action by calling\n// {@link Lexer//pushMode} with the assigned mode.\nfunction LexerPushModeAction(mode) {\n\tLexerAction.call(this, LexerActionType.PUSH_MODE);\n    this.mode = mode;\n    return this;\n}\n\nLexerPushModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPushModeAction.prototype.constructor = LexerPushModeAction;\n\n// <p>This action is implemented by calling {@link Lexer//pushMode} with the\n// value provided by {@link //getMode}.</p>\nLexerPushModeAction.prototype.execute = function(lexer) {\n    lexer.pushMode(this.mode);\n};\n\nLexerPushModeAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.mode);\n};\n\nLexerPushModeAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerPushModeAction)) {\n        return false;\n    } else {\n        return this.mode === other.mode;\n    }\n};\n\nLexerPushModeAction.prototype.toString = function() {\n\treturn \"pushMode(\" + this.mode + \")\";\n};\n\n\n// Implements the {@code popMode} lexer action by calling {@link Lexer//popMode}.\n//\n// <p>The {@code popMode} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerPopModeAction() {\n\tLexerAction.call(this,LexerActionType.POP_MODE);\n\treturn this;\n}\n\nLexerPopModeAction.prototype = Object.create(LexerAction.prototype);\nLexerPopModeAction.prototype.constructor = LexerPopModeAction;\n\nLexerPopModeAction.INSTANCE = new LexerPopModeAction();\n\n// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\nLexerPopModeAction.prototype.execute = function(lexer) {\n    lexer.popMode();\n};\n\nLexerPopModeAction.prototype.toString = function() {\n\treturn \"popMode\";\n};\n\n// Implements the {@code more} lexer action by calling {@link Lexer//more}.\n//\n// <p>The {@code more} command does not have any parameters, so this action is\n// implemented as a singleton instance exposed by {@link //INSTANCE}.</p>\nfunction LexerMoreAction() {\n\tLexerAction.call(this, LexerActionType.MORE);\n\treturn this;\n}\n\nLexerMoreAction.prototype = Object.create(LexerAction.prototype);\nLexerMoreAction.prototype.constructor = LexerMoreAction;\n\nLexerMoreAction.INSTANCE = new LexerMoreAction();\n\n// <p>This action is implemented by calling {@link Lexer//popMode}.</p>\nLexerMoreAction.prototype.execute = function(lexer) {\n    lexer.more();\n};\n\nLexerMoreAction.prototype.toString = function() {\n    return \"more\";\n};\n\n\n// Implements the {@code mode} lexer action by calling {@link Lexer//mode} with\n// the assigned mode.\nfunction LexerModeAction(mode) {\n\tLexerAction.call(this, LexerActionType.MODE);\n    this.mode = mode;\n    return this;\n}\n\nLexerModeAction.prototype = Object.create(LexerAction.prototype);\nLexerModeAction.prototype.constructor = LexerModeAction;\n\n// <p>This action is implemented by calling {@link Lexer//mode} with the\n// value provided by {@link //getMode}.</p>\nLexerModeAction.prototype.execute = function(lexer) {\n    lexer.mode(this.mode);\n};\n\nLexerModeAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.mode);\n};\n\nLexerModeAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerModeAction)) {\n        return false;\n    } else {\n        return this.mode === other.mode;\n    }\n};\n\nLexerModeAction.prototype.toString = function() {\n    return \"mode(\" + this.mode + \")\";\n};\n\n// Executes a custom lexer action by calling {@link Recognizer//action} with the\n// rule and action indexes assigned to the custom action. The implementation of\n// a custom action is added to the generated code for the lexer in an override\n// of {@link Recognizer//action} when the grammar is compiled.\n//\n// <p>This class may represent embedded actions created with the <code>{...}</code>\n// syntax in ANTLR 4, as well as actions created for lexer commands where the\n// command argument could not be evaluated when the grammar was compiled.</p>\n\n\n    // Constructs a custom lexer action with the specified rule and action\n    // indexes.\n    //\n    // @param ruleIndex The rule index to use for calls to\n    // {@link Recognizer//action}.\n    // @param actionIndex The action index to use for calls to\n    // {@link Recognizer//action}.\n\nfunction LexerCustomAction(ruleIndex, actionIndex) {\n\tLexerAction.call(this, LexerActionType.CUSTOM);\n    this.ruleIndex = ruleIndex;\n    this.actionIndex = actionIndex;\n    this.isPositionDependent = true;\n    return this;\n}\n\nLexerCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerCustomAction.prototype.constructor = LexerCustomAction;\n\n// <p>Custom actions are implemented by calling {@link Lexer//action} with the\n// appropriate rule and action indexes.</p>\nLexerCustomAction.prototype.execute = function(lexer) {\n    lexer.action(null, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.ruleIndex, this.actionIndex);\n};\n\nLexerCustomAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerCustomAction)) {\n        return false;\n    } else {\n        return this.ruleIndex === other.ruleIndex && this.actionIndex === other.actionIndex;\n    }\n};\n\n// Implements the {@code channel} lexer action by calling\n// {@link Lexer//setChannel} with the assigned channel.\n// Constructs a new {@code channel} action with the specified channel value.\n// @param channel The channel value to pass to {@link Lexer//setChannel}.\nfunction LexerChannelAction(channel) {\n\tLexerAction.call(this, LexerActionType.CHANNEL);\n    this.channel = channel;\n    return this;\n}\n\nLexerChannelAction.prototype = Object.create(LexerAction.prototype);\nLexerChannelAction.prototype.constructor = LexerChannelAction;\n\n// <p>This action is implemented by calling {@link Lexer//setChannel} with the\n// value provided by {@link //getChannel}.</p>\nLexerChannelAction.prototype.execute = function(lexer) {\n    lexer._channel = this.channel;\n};\n\nLexerChannelAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.channel);\n};\n\nLexerChannelAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerChannelAction)) {\n        return false;\n    } else {\n        return this.channel === other.channel;\n    }\n};\n\nLexerChannelAction.prototype.toString = function() {\n    return \"channel(\" + this.channel + \")\";\n};\n\n// This implementation of {@link LexerAction} is used for tracking input offsets\n// for position-dependent actions within a {@link LexerActionExecutor}.\n//\n// <p>This action is not serialized as part of the ATN, and is only required for\n// position-dependent lexer actions which appear at a location other than the\n// end of a rule. For more information about DFA optimizations employed for\n// lexer actions, see {@link LexerActionExecutor//append} and\n// {@link LexerActionExecutor//fixOffsetBeforeMatch}.</p>\n\n// Constructs a new indexed custom action by associating a character offset\n// with a {@link LexerAction}.\n//\n// <p>Note: This class is only required for lexer actions for which\n// {@link LexerAction//isPositionDependent} returns {@code true}.</p>\n//\n// @param offset The offset into the input {@link CharStream}, relative to\n// the token start index, at which the specified lexer action should be\n// executed.\n// @param action The lexer action to execute at a particular offset in the\n// input {@link CharStream}.\nfunction LexerIndexedCustomAction(offset, action) {\n\tLexerAction.call(this, action.actionType);\n    this.offset = offset;\n    this.action = action;\n    this.isPositionDependent = true;\n    return this;\n}\n\nLexerIndexedCustomAction.prototype = Object.create(LexerAction.prototype);\nLexerIndexedCustomAction.prototype.constructor = LexerIndexedCustomAction;\n\n// <p>This method calls {@link //execute} on the result of {@link //getAction}\n// using the provided {@code lexer}.</p>\nLexerIndexedCustomAction.prototype.execute = function(lexer) {\n    // assume the input stream position was properly set by the calling code\n    this.action.execute(lexer);\n};\n\nLexerIndexedCustomAction.prototype.updateHashCode = function(hash) {\n    hash.update(this.actionType, this.offset, this.action);\n};\n\nLexerIndexedCustomAction.prototype.equals = function(other) {\n    if (this === other) {\n        return true;\n    } else if (! (other instanceof LexerIndexedCustomAction)) {\n        return false;\n    } else {\n        return this.offset === other.offset && this.action === other.action;\n    }\n};\n\n\nexports.LexerActionType = LexerActionType;\nexports.LexerSkipAction = LexerSkipAction;\nexports.LexerChannelAction = LexerChannelAction;\nexports.LexerCustomAction = LexerCustomAction;\nexports.LexerIndexedCustomAction = LexerIndexedCustomAction;\nexports.LexerMoreAction = LexerMoreAction;\nexports.LexerTypeAction = LexerTypeAction;\nexports.LexerPushModeAction = LexerPushModeAction;\nexports.LexerPopModeAction = LexerPopModeAction;\nexports.LexerModeAction = LexerModeAction;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/LexerAction.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar DFAState = require('./../dfa/DFAState').DFAState;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar getCachedPredictionContext = require('./../PredictionContext').getCachedPredictionContext;\n\nfunction ATNSimulator(atn, sharedContextCache) {\n\n    // The context cache maps all PredictionContext objects that are ==\n    //  to a single cached copy. This cache is shared across all contexts\n    //  in all ATNConfigs in all DFA states.  We rebuild each ATNConfigSet\n    //  to use only cached nodes/graphs in addDFAState(). We don't want to\n    //  fill this during closure() since there are lots of contexts that\n    //  pop up but are not used ever again. It also greatly slows down closure().\n    //\n    //  <p>This cache makes a huge difference in memory and a little bit in speed.\n    //  For the Java grammar on java.*, it dropped the memory requirements\n    //  at the end from 25M to 16M. We don't store any of the full context\n    //  graphs in the DFA because they are limited to local context only,\n    //  but apparently there's a lot of repetition there as well. We optimize\n    //  the config contexts before storing the config set in the DFA states\n    //  by literally rebuilding them with cached subgraphs only.</p>\n    //\n    //  <p>I tried a cache for use during closure operations, that was\n    //  whacked after each adaptivePredict(). It cost a little bit\n    //  more time I think and doesn't save on the overall footprint\n    //  so it's not worth the complexity.</p>\n    ///\n    this.atn = atn;\n    this.sharedContextCache = sharedContextCache;\n    return this;\n}\n\n// Must distinguish between missing edge and edge we know leads nowhere///\nATNSimulator.ERROR = new DFAState(0x7FFFFFFF, new ATNConfigSet());\n\n\nATNSimulator.prototype.getCachedContext = function(context) {\n    if (this.sharedContextCache ===null) {\n        return context;\n    }\n    var visited = {};\n    return getCachedPredictionContext(context, this.sharedContextCache, visited);\n};\n\nexports.ATNSimulator = ATNSimulator;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATNSimulator.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n//\n// This enumeration defines the prediction modes available in ANTLR 4 along with\n// utility methods for analyzing configuration sets for conflicts and/or\n// ambiguities.\n\nvar Set = require('./../Utils').Set;\nvar Map = require('./../Utils').Map;\nvar BitSet = require('./../Utils').BitSet;\nvar AltDict = require('./../Utils').AltDict;\nvar ATN = require('./ATN').ATN;\nvar RuleStopState = require('./ATNState').RuleStopState;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar ATNConfig = require('./ATNConfig').ATNConfig;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar Hash = require(\"../Utils\").Hash;\nvar hashStuff = require('./../Utils').hashStuff;\nvar equalArrays = require('./../Utils').equalArrays;\n\nfunction PredictionMode() {\n\treturn this;\n}\n\n//\n// The SLL(*) prediction mode. This prediction mode ignores the current\n// parser context when making predictions. This is the fastest prediction\n// mode, and provides correct results for many grammars. This prediction\n// mode is more powerful than the prediction mode provided by ANTLR 3, but\n// may result in syntax errors for grammar and input combinations which are\n// not SLL.\n//\n// <p>\n// When using this prediction mode, the parser will either return a correct\n// parse tree (i.e. the same parse tree that would be returned with the\n// {@link //LL} prediction mode), or it will report a syntax error. If a\n// syntax error is encountered when using the {@link //SLL} prediction mode,\n// it may be due to either an actual syntax error in the input or indicate\n// that the particular combination of grammar and input requires the more\n// powerful {@link //LL} prediction abilities to complete successfully.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.SLL = 0;\n//\n// The LL(*) prediction mode. This prediction mode allows the current parser\n// context to be used for resolving SLL conflicts that occur during\n// prediction. This is the fastest prediction mode that guarantees correct\n// parse results for all combinations of grammars with syntactically correct\n// inputs.\n//\n// <p>\n// When using this prediction mode, the parser will make correct decisions\n// for all syntactically-correct grammar and input combinations. However, in\n// cases where the grammar is truly ambiguous this prediction mode might not\n// report a precise answer for <em>exactly which</em> alternatives are\n// ambiguous.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.LL = 1;\n//\n// The LL(*) prediction mode with exact ambiguity detection. In addition to\n// the correctness guarantees provided by the {@link //LL} prediction mode,\n// this prediction mode instructs the prediction algorithm to determine the\n// complete and exact set of ambiguous alternatives for every ambiguous\n// decision encountered while parsing.\n//\n// <p>\n// This prediction mode may be used for diagnosing ambiguities during\n// grammar development. Due to the performance overhead of calculating sets\n// of ambiguous alternatives, this prediction mode should be avoided when\n// the exact results are not necessary.</p>\n//\n// <p>\n// This prediction mode does not provide any guarantees for prediction\n// behavior for syntactically-incorrect inputs.</p>\n//\nPredictionMode.LL_EXACT_AMBIG_DETECTION = 2;\n\n\n//\n// Computes the SLL prediction termination condition.\n//\n// <p>\n// This method computes the SLL prediction termination condition for both of\n// the following cases.</p>\n//\n// <ul>\n// <li>The usual SLL+LL fallback upon SLL conflict</li>\n// <li>Pure SLL without LL fallback</li>\n// </ul>\n//\n// <p><strong>COMBINED SLL+LL PARSING</strong></p>\n//\n// <p>When LL-fallback is enabled upon SLL conflict, correct predictions are\n// ensured regardless of how the termination condition is computed by this\n// method. Due to the substantially higher cost of LL prediction, the\n// prediction should only fall back to LL when the additional lookahead\n// cannot lead to a unique SLL prediction.</p>\n//\n// <p>Assuming combined SLL+LL parsing, an SLL configuration set with only\n// conflicting subsets should fall back to full LL, even if the\n// configuration sets don't resolve to the same alternative (e.g.\n// {@code {1,2}} and {@code {3,4}}. If there is at least one non-conflicting\n// configuration, SLL could continue with the hopes that more lookahead will\n// resolve via one of those non-conflicting configurations.</p>\n//\n// <p>Here's the prediction termination rule them: SLL (for SLL+LL parsing)\n// stops when it sees only conflicting configuration subsets. In contrast,\n// full LL keeps going when there is uncertainty.</p>\n//\n// <p><strong>HEURISTIC</strong></p>\n//\n// <p>As a heuristic, we stop prediction when we see any conflicting subset\n// unless we see a state that only has one alternative associated with it.\n// The single-alt-state thing lets prediction continue upon rules like\n// (otherwise, it would admit defeat too soon):</p>\n//\n// <p>{@code [12|1|[], 6|2|[], 12|2|[]]. s : (ID | ID ID?) ';' ;}</p>\n//\n// <p>When the ATN simulation reaches the state before {@code ';'}, it has a\n// DFA state that looks like: {@code [12|1|[], 6|2|[], 12|2|[]]}. Naturally\n// {@code 12|1|[]} and {@code 12|2|[]} conflict, but we cannot stop\n// processing this node because alternative to has another way to continue,\n// via {@code [6|2|[]]}.</p>\n//\n// <p>It also let's us continue for this rule:</p>\n//\n// <p>{@code [1|1|[], 1|2|[], 8|3|[]] a : A | A | A B ;}</p>\n//\n// <p>After matching input A, we reach the stop state for rule A, state 1.\n// State 8 is the state right before B. Clearly alternatives 1 and 2\n// conflict and no amount of further lookahead will separate the two.\n// However, alternative 3 will be able to continue and so we do not stop\n// working on this state. In the previous example, we're concerned with\n// states associated with the conflicting alternatives. Here alt 3 is not\n// associated with the conflicting configs, but since we can continue\n// looking for input reasonably, don't declare the state done.</p>\n//\n// <p><strong>PURE SLL PARSING</strong></p>\n//\n// <p>To handle pure SLL parsing, all we have to do is make sure that we\n// combine stack contexts for configurations that differ only by semantic\n// predicate. From there, we can do the usual SLL termination heuristic.</p>\n//\n// <p><strong>PREDICATES IN SLL+LL PARSING</strong></p>\n//\n// <p>SLL decisions don't evaluate predicates until after they reach DFA stop\n// states because they need to create the DFA cache that works in all\n// semantic situations. In contrast, full LL evaluates predicates collected\n// during start state computation so it can ignore predicates thereafter.\n// This means that SLL termination detection can totally ignore semantic\n// predicates.</p>\n//\n// <p>Implementation-wise, {@link ATNConfigSet} combines stack contexts but not\n// semantic predicate contexts so we might see two configurations like the\n// following.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p})}</p>\n//\n// <p>Before testing these configurations against others, we have to merge\n// {@code x} and {@code x'} (without modifying the existing configurations).\n// For example, we test {@code (x+x')==x''} when looking for conflicts in\n// the following configurations.</p>\n//\n// <p>{@code (s, 1, x, {}), (s, 1, x', {p}), (s, 2, x'', {})}</p>\n//\n// <p>If the configuration set has predicates (as indicated by\n// {@link ATNConfigSet//hasSemanticContext}), this algorithm makes a copy of\n// the configurations to strip out all of the predicates so that a standard\n// {@link ATNConfigSet} will merge everything ignoring predicates.</p>\n//\nPredictionMode.hasSLLConflictTerminatingPrediction = function( mode, configs) {\n    // Configs in rule stop states indicate reaching the end of the decision\n    // rule (local context) or end of start rule (full context). If all\n    // configs meet this condition, then none of the configurations is able\n    // to match additional input so we terminate prediction.\n    //\n    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return true;\n    }\n    // pure SLL mode parsing\n    if (mode === PredictionMode.SLL) {\n        // Don't bother with combining configs from different semantic\n        // contexts if we can fail over to full LL; costs more time\n        // since we'll often fail over anyway.\n        if (configs.hasSemanticContext) {\n            // dup configs, tossing out semantic predicates\n            var dup = new ATNConfigSet();\n            for(var i=0;i<configs.items.length;i++) {\n            \tvar c = configs.items[i];\n                c = new ATNConfig({semanticContext:SemanticContext.NONE}, c);\n                dup.add(c);\n            }\n            configs = dup;\n        }\n        // now we have combined contexts for configs with dissimilar preds\n    }\n    // pure SLL or combined SLL+LL mode parsing\n    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n    return PredictionMode.hasConflictingAltSet(altsets) && !PredictionMode.hasStateAssociatedWithOneAlt(configs);\n};\n\n// Checks if any configuration in {@code configs} is in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if any configuration in {@code configs} is in a\n// {@link RuleStopState}, otherwise {@code false}\nPredictionMode.hasConfigInRuleStopState = function(configs) {\n\tfor(var i=0;i<configs.items.length;i++) {\n\t\tvar c = configs.items[i];\n        if (c.state instanceof RuleStopState) {\n            return true;\n        }\n\t}\n    return false;\n};\n\n// Checks if all configurations in {@code configs} are in a\n// {@link RuleStopState}. Configurations meeting this condition have reached\n// the end of the decision rule (local context) or end of start rule (full\n// context).\n//\n// @param configs the configuration set to test\n// @return {@code true} if all configurations in {@code configs} are in a\n// {@link RuleStopState}, otherwise {@code false}\nPredictionMode.allConfigsInRuleStopStates = function(configs) {\n\tfor(var i=0;i<configs.items.length;i++) {\n\t\tvar c = configs.items[i];\n        if (!(c.state instanceof RuleStopState)) {\n            return false;\n        }\n\t}\n    return true;\n};\n\n//\n// Full LL prediction termination.\n//\n// <p>Can we stop looking ahead during ATN simulation or is there some\n// uncertainty as to which alternative we will ultimately pick, after\n// consuming more input? Even if there are partial conflicts, we might know\n// that everything is going to resolve to the same minimum alternative. That\n// means we can stop since no more lookahead will change that fact. On the\n// other hand, there might be multiple conflicts that resolve to different\n// minimums. That means we need more look ahead to decide which of those\n// alternatives we should predict.</p>\n//\n// <p>The basic idea is to split the set of configurations {@code C}, into\n// conflicting subsets {@code (s, _, ctx, _)} and singleton subsets with\n// non-conflicting configurations. Two configurations conflict if they have\n// identical {@link ATNConfig//state} and {@link ATNConfig//context} values\n// but different {@link ATNConfig//alt} value, e.g. {@code (s, i, ctx, _)}\n// and {@code (s, j, ctx, _)} for {@code i!=j}.</p>\n//\n// <p>Reduce these configuration subsets to the set of possible alternatives.\n// You can compute the alternative subsets in one pass as follows:</p>\n//\n// <p>{@code A_s,ctx = {i | (s, i, ctx, _)}} for each configuration in\n// {@code C} holding {@code s} and {@code ctx} fixed.</p>\n//\n// <p>Or in pseudo-code, for each configuration {@code c} in {@code C}:</p>\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n//\n// <p>The values in {@code map} are the set of {@code A_s,ctx} sets.</p>\n//\n// <p>If {@code |A_s,ctx|=1} then there is no conflict associated with\n// {@code s} and {@code ctx}.</p>\n//\n// <p>Reduce the subsets to singletons by choosing a minimum of each subset. If\n// the union of these alternative subsets is a singleton, then no amount of\n// more lookahead will help us. We will always pick that alternative. If,\n// however, there is more than one alternative, then we are uncertain which\n// alternative to predict and must continue looking for resolution. We may\n// or may not discover an ambiguity in the future, even if there are no\n// conflicting subsets this round.</p>\n//\n// <p>The biggest sin is to terminate early because it means we've made a\n// decision but were uncertain as to the eventual outcome. We haven't used\n// enough lookahead. On the other hand, announcing a conflict too late is no\n// big deal; you will still have the conflict. It's just inefficient. It\n// might even look until the end of file.</p>\n//\n// <p>No special consideration for semantic predicates is required because\n// predicates are evaluated on-the-fly for full LL prediction, ensuring that\n// no configuration contains a semantic context during the termination\n// check.</p>\n//\n// <p><strong>CONFLICTING CONFIGS</strong></p>\n//\n// <p>Two configurations {@code (s, i, x)} and {@code (s, j, x')}, conflict\n// when {@code i!=j} but {@code x=x'}. Because we merge all\n// {@code (s, i, _)} configurations together, that means that there are at\n// most {@code n} configurations associated with state {@code s} for\n// {@code n} possible alternatives in the decision. The merged stacks\n// complicate the comparison of configuration contexts {@code x} and\n// {@code x'}. Sam checks to see if one is a subset of the other by calling\n// merge and checking to see if the merged result is either {@code x} or\n// {@code x'}. If the {@code x} associated with lowest alternative {@code i}\n// is the superset, then {@code i} is the only possible prediction since the\n// others resolve to {@code min(i)} as well. However, if {@code x} is\n// associated with {@code j>i} then at least one stack configuration for\n// {@code j} is not in conflict with alternative {@code i}. The algorithm\n// should keep going, looking for more lookahead due to the uncertainty.</p>\n//\n// <p>For simplicity, I'm doing a equality check between {@code x} and\n// {@code x'} that lets the algorithm continue to consume lookahead longer\n// than necessary. The reason I like the equality is of course the\n// simplicity but also because that is the test you need to detect the\n// alternatives that are actually in conflict.</p>\n//\n// <p><strong>CONTINUE/STOP RULE</strong></p>\n//\n// <p>Continue if union of resolved alternative sets from non-conflicting and\n// conflicting alternative subsets has more than one alternative. We are\n// uncertain about which alternative to predict.</p>\n//\n// <p>The complete set of alternatives, {@code [i for (_,i,_)]}, tells us which\n// alternatives are still in the running for the amount of input we've\n// consumed at this point. The conflicting sets let us to strip away\n// configurations that won't lead to more states because we resolve\n// conflicts to the configuration with a minimum alternate for the\n// conflicting set.</p>\n//\n// <p><strong>CASES</strong></p>\n//\n// <ul>\n//\n// <li>no conflicts and more than 1 alternative in set =&gt; continue</li>\n//\n// <li> {@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s, 3, z)},\n// {@code (s', 1, y)}, {@code (s', 2, y)} yields non-conflicting set\n// {@code {3}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1,3}} =&gt; continue\n// </li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)}, {@code (s'', 1, z)} yields non-conflicting set\n// {@code {1}} U conflicting sets {@code min({1,2})} U {@code min({1,2})} =\n// {@code {1}} =&gt; stop and predict 1</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 1, y)},\n// {@code (s', 2, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {1}} = {@code {1}} =&gt; stop and predict 1, can announce\n// ambiguity {@code {1,2}}</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 2, y)},\n// {@code (s', 3, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {2}} = {@code {1,2}} =&gt; continue</li>\n//\n// <li>{@code (s, 1, x)}, {@code (s, 2, x)}, {@code (s', 3, y)},\n// {@code (s', 4, y)} yields conflicting, reduced sets {@code {1}} U\n// {@code {3}} = {@code {1,3}} =&gt; continue</li>\n//\n// </ul>\n//\n// <p><strong>EXACT AMBIGUITY DETECTION</strong></p>\n//\n// <p>If all states report the same conflicting set of alternatives, then we\n// know we have the exact ambiguity set.</p>\n//\n// <p><code>|A_<em>i</em>|&gt;1</code> and\n// <code>A_<em>i</em> = A_<em>j</em></code> for all <em>i</em>, <em>j</em>.</p>\n//\n// <p>In other words, we continue examining lookahead until all {@code A_i}\n// have more than one alternative and all {@code A_i} are the same. If\n// {@code A={{1,2}, {1,3}}}, then regular LL prediction would terminate\n// because the resolved set is {@code {1}}. To determine what the real\n// ambiguity is, we have to know whether the ambiguity is between one and\n// two or one and three so we keep going. We can only stop prediction when\n// we need exact ambiguity detection when the sets look like\n// {@code A={{1,2}}} or {@code {{1,2},{1,2}}}, etc...</p>\n//\nPredictionMode.resolvesToJustOneViableAlt = function(altsets) {\n    return PredictionMode.getSingleViableAlt(altsets);\n};\n\n//\n// Determines if every alternative subset in {@code altsets} contains more\n// than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every {@link BitSet} in {@code altsets} has\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\nPredictionMode.allSubsetsConflict = function(altsets) {\n    return ! PredictionMode.hasNonConflictingAltSet(altsets);\n};\n//\n// Determines if any single alternative subset in {@code altsets} contains\n// exactly one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} 1, otherwise {@code false}\n//\nPredictionMode.hasNonConflictingAltSet = function(altsets) {\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        if (alts.length===1) {\n            return true;\n        }\n\t}\n    return false;\n};\n\n//\n// Determines if any single alternative subset in {@code altsets} contains\n// more than one alternative.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if {@code altsets} contains a {@link BitSet} with\n// {@link BitSet//cardinality cardinality} &gt; 1, otherwise {@code false}\n//\nPredictionMode.hasConflictingAltSet = function(altsets) {\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        if (alts.length>1) {\n            return true;\n        }\n\t}\n    return false;\n};\n\n//\n// Determines if every alternative subset in {@code altsets} is equivalent.\n//\n// @param altsets a collection of alternative subsets\n// @return {@code true} if every member of {@code altsets} is equal to the\n// others, otherwise {@code false}\n//\nPredictionMode.allSubsetsEqual = function(altsets) {\n    var first = null;\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        if (first === null) {\n            first = alts;\n        } else if (alts!==first) {\n            return false;\n        }\n\t}\n    return true;\n};\n\n//\n// Returns the unique alternative predicted by all alternative subsets in\n// {@code altsets}. If no such alternative exists, this method returns\n// {@link ATN//INVALID_ALT_NUMBER}.\n//\n// @param altsets a collection of alternative subsets\n//\nPredictionMode.getUniqueAlt = function(altsets) {\n    var all = PredictionMode.getAlts(altsets);\n    if (all.length===1) {\n        return all.minValue();\n    } else {\n        return ATN.INVALID_ALT_NUMBER;\n    }\n};\n\n// Gets the complete set of represented alternatives for a collection of\n// alternative subsets. This method returns the union of each {@link BitSet}\n// in {@code altsets}.\n//\n// @param altsets a collection of alternative subsets\n// @return the set of represented alternatives in {@code altsets}\n//\nPredictionMode.getAlts = function(altsets) {\n    var all = new BitSet();\n    altsets.map( function(alts) { all.or(alts); });\n    return all;\n};\n\n//\n// This function gets the conflicting alt subsets from a configuration set.\n// For each configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c] U= c.{@link ATNConfig//alt alt} // map hash/equals uses s and x, not\n// alt and not pred\n// </pre>\n\nPredictionMode.getConflictingAltSubsets = function(configs) {\n    var configToAlts = new Map();\n    configToAlts.hashFunction = function(cfg) { hashStuff(cfg.state.stateNumber, cfg.context); };\n    configToAlts.equalsFunction = function(c1, c2) { return c1.state.stateNumber==c2.state.stateNumber && c1.context.equals(c2.context);}\n    configs.items.map(function(cfg) {\n        var alts = configToAlts.get(cfg);\n        if (alts === null) {\n            alts = new BitSet();\n            configToAlts.put(cfg, alts);\n        }\n        alts.add(cfg.alt);\n\t});\n    return configToAlts.getValues();\n};\n\n//\n// Get a map from state to alt subset from a configuration set. For each\n// configuration {@code c} in {@code configs}:\n//\n// <pre>\n// map[c.{@link ATNConfig//state state}] U= c.{@link ATNConfig//alt alt}\n// </pre>\n//\nPredictionMode.getStateToAltMap = function(configs) {\n    var m = new AltDict();\n    configs.items.map(function(c) {\n        var alts = m.get(c.state);\n        if (alts === null) {\n            alts = new BitSet();\n            m.put(c.state, alts);\n        }\n        alts.add(c.alt);\n    });\n    return m;\n};\n\nPredictionMode.hasStateAssociatedWithOneAlt = function(configs) {\n    var values = PredictionMode.getStateToAltMap(configs).values();\n    for(var i=0;i<values.length;i++) {\n        if (values[i].length===1) {\n            return true;\n        }\n    }\n    return false;\n};\n\nPredictionMode.getSingleViableAlt = function(altsets) {\n    var result = null;\n\tfor(var i=0;i<altsets.length;i++) {\n\t\tvar alts = altsets[i];\n        var minAlt = alts.minValue();\n        if(result===null) {\n            result = minAlt;\n        } else if(result!==minAlt) { // more than 1 viable alt\n            return ATN.INVALID_ALT_NUMBER;\n        }\n\t}\n    return result;\n};\n\nexports.PredictionMode = PredictionMode;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/PredictionMode.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar Token = require('./../Token').Token;\nvar Errors = require('./Errors');\nvar NoViableAltException = Errors.NoViableAltException;\nvar InputMismatchException = Errors.InputMismatchException;\nvar FailedPredicateException = Errors.FailedPredicateException;\nvar ParseCancellationException = Errors.ParseCancellationException;\nvar ATNState = require('./../atn/ATNState').ATNState;\nvar Interval = require('./../IntervalSet').Interval;\nvar IntervalSet = require('./../IntervalSet').IntervalSet;\n\nfunction ErrorStrategy() {\n\n}\n\nErrorStrategy.prototype.reset = function(recognizer){\n};\n\nErrorStrategy.prototype.recoverInline = function(recognizer){\n};\n\nErrorStrategy.prototype.recover = function(recognizer, e){\n};\n\nErrorStrategy.prototype.sync = function(recognizer){\n};\n\nErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer){\n};\n\nErrorStrategy.prototype.reportError = function(recognizer){\n};\n\n\n\n// This is the default implementation of {@link ANTLRErrorStrategy} used for\n// error reporting and recovery in ANTLR parsers.\n//\nfunction DefaultErrorStrategy() {\n\tErrorStrategy.call(this);\n    // Indicates whether the error strategy is currently \"recovering from an\n    // error\". This is used to suppress reporting multiple error messages while\n    // attempting to recover from a detected syntax error.\n    //\n    // @see //inErrorRecoveryMode\n    //\n    this.errorRecoveryMode = false;\n\n    // The index into the input stream where the last error occurred.\n    // This is used to prevent infinite loops where an error is found\n    // but no token is consumed during recovery...another error is found,\n    // ad nauseum. This is a failsafe mechanism to guarantee that at least\n    // one token/tree node is consumed for two errors.\n    //\n    this.lastErrorIndex = -1;\n    this.lastErrorStates = null;\n    return this;\n}\n\nDefaultErrorStrategy.prototype = Object.create(ErrorStrategy.prototype);\nDefaultErrorStrategy.prototype.constructor = DefaultErrorStrategy;\n\n// <p>The default implementation simply calls {@link //endErrorCondition} to\n// ensure that the handler is not in error recovery mode.</p>\nDefaultErrorStrategy.prototype.reset = function(recognizer) {\n    this.endErrorCondition(recognizer);\n};\n\n//\n// This method is called to enter error recovery mode when a recognition\n// exception is reported.\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.beginErrorCondition = function(recognizer) {\n    this.errorRecoveryMode = true;\n};\n\nDefaultErrorStrategy.prototype.inErrorRecoveryMode = function(recognizer) {\n    return this.errorRecoveryMode;\n};\n\n//\n// This method is called to leave error recovery mode after recovering from\n// a recognition exception.\n//\n// @param recognizer\n//\nDefaultErrorStrategy.prototype.endErrorCondition = function(recognizer) {\n    this.errorRecoveryMode = false;\n    this.lastErrorStates = null;\n    this.lastErrorIndex = -1;\n};\n\n//\n// {@inheritDoc}\n//\n// <p>The default implementation simply calls {@link //endErrorCondition}.</p>\n//\nDefaultErrorStrategy.prototype.reportMatch = function(recognizer) {\n    this.endErrorCondition(recognizer);\n};\n\n//\n// {@inheritDoc}\n//\n// <p>The default implementation returns immediately if the handler is already\n// in error recovery mode. Otherwise, it calls {@link //beginErrorCondition}\n// and dispatches the reporting task based on the runtime type of {@code e}\n// according to the following table.</p>\n//\n// <ul>\n// <li>{@link NoViableAltException}: Dispatches the call to\n// {@link //reportNoViableAlternative}</li>\n// <li>{@link InputMismatchException}: Dispatches the call to\n// {@link //reportInputMismatch}</li>\n// <li>{@link FailedPredicateException}: Dispatches the call to\n// {@link //reportFailedPredicate}</li>\n// <li>All other types: calls {@link Parser//notifyErrorListeners} to report\n// the exception</li>\n// </ul>\n//\nDefaultErrorStrategy.prototype.reportError = function(recognizer, e) {\n   // if we've already reported an error and have not matched a token\n   // yet successfully, don't report any errors.\n    if(this.inErrorRecoveryMode(recognizer)) {\n        return; // don't report spurious errors\n    }\n    this.beginErrorCondition(recognizer);\n    if ( e instanceof NoViableAltException ) {\n        this.reportNoViableAlternative(recognizer, e);\n    } else if ( e instanceof InputMismatchException ) {\n        this.reportInputMismatch(recognizer, e);\n    } else if ( e instanceof FailedPredicateException ) {\n        this.reportFailedPredicate(recognizer, e);\n    } else {\n        console.log(\"unknown recognition error type: \" + e.constructor.name);\n        console.log(e.stack);\n        recognizer.notifyErrorListeners(e.getOffendingToken(), e.getMessage(), e);\n    }\n};\n//\n// {@inheritDoc}\n//\n// <p>The default implementation resynchronizes the parser by consuming tokens\n// until we find one in the resynchronization set--loosely the set of tokens\n// that can follow the current rule.</p>\n//\nDefaultErrorStrategy.prototype.recover = function(recognizer, e) {\n    if (this.lastErrorIndex===recognizer.getInputStream().index &&\n        this.lastErrorStates !== null && this.lastErrorStates.indexOf(recognizer.state)>=0) {\n\t\t// uh oh, another error at same token index and previously-visited\n\t\t// state in ATN; must be a case where LT(1) is in the recovery\n\t\t// token set so nothing got consumed. Consume a single token\n\t\t// at least to prevent an infinite loop; this is a failsafe.\n\t\trecognizer.consume();\n    }\n    this.lastErrorIndex = recognizer._input.index;\n    if (this.lastErrorStates === null) {\n        this.lastErrorStates = [];\n    }\n    this.lastErrorStates.push(recognizer.state);\n    var followSet = this.getErrorRecoverySet(recognizer);\n    this.consumeUntil(recognizer, followSet);\n};\n\n// The default implementation of {@link ANTLRErrorStrategy//sync} makes sure\n// that the current lookahead symbol is consistent with what were expecting\n// at this point in the ATN. You can call this anytime but ANTLR only\n// generates code to check before subrules/loops and each iteration.\n//\n// <p>Implements Jim Idle's magic sync mechanism in closures and optional\n// subrules. E.g.,</p>\n//\n// <pre>\n// a : sync ( stuff sync )* ;\n// sync : {consume to what can follow sync} ;\n// </pre>\n//\n// At the start of a sub rule upon error, {@link //sync} performs single\n// token deletion, if possible. If it can't do that, it bails on the current\n// rule and uses the default error recovery, which consumes until the\n// resynchronization set of the current rule.\n//\n// <p>If the sub rule is optional ({@code (...)?}, {@code (...)*}, or block\n// with an empty alternative), then the expected set includes what follows\n// the subrule.</p>\n//\n// <p>During loop iteration, it consumes until it sees a token that can start a\n// sub rule or what follows loop. Yes, that is pretty aggressive. We opt to\n// stay in the loop as long as possible.</p>\n//\n// <p><strong>ORIGINS</strong></p>\n//\n// <p>Previous versions of ANTLR did a poor job of their recovery within loops.\n// A single mismatch token or missing token would force the parser to bail\n// out of the entire rules surrounding the loop. So, for rule</p>\n//\n// <pre>\n// classDef : 'class' ID '{' member* '}'\n// </pre>\n//\n// input with an extra token between members would force the parser to\n// consume until it found the next class definition rather than the next\n// member definition of the current class.\n//\n// <p>This functionality cost a little bit of effort because the parser has to\n// compare token set at the start of the loop and at each iteration. If for\n// some reason speed is suffering for you, you can turn off this\n// functionality by simply overriding this method as a blank { }.</p>\n//\nDefaultErrorStrategy.prototype.sync = function(recognizer) {\n    // If already recovering, don't try to sync\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    var s = recognizer._interp.atn.states[recognizer.state];\n    var la = recognizer.getTokenStream().LA(1);\n    // try cheaper subset first; might get lucky. seems to shave a wee bit off\n    var nextTokens = recognizer.atn.nextTokens(s);\n    if (nextTokens.contains(Token.EPSILON) || nextTokens.contains(la)) {\n        return;\n    }\n    switch (s.stateType) {\n    case ATNState.BLOCK_START:\n    case ATNState.STAR_BLOCK_START:\n    case ATNState.PLUS_BLOCK_START:\n    case ATNState.STAR_LOOP_ENTRY:\n       // report error and recover if possible\n        if( this.singleTokenDeletion(recognizer) !== null) {\n            return;\n        } else {\n            throw new InputMismatchException(recognizer);\n        }\n        break;\n    case ATNState.PLUS_LOOP_BACK:\n    case ATNState.STAR_LOOP_BACK:\n        this.reportUnwantedToken(recognizer);\n        var expecting = new IntervalSet();\n        expecting.addSet(recognizer.getExpectedTokens());\n        var whatFollowsLoopIterationOrRule = expecting.addSet(this.getErrorRecoverySet(recognizer));\n        this.consumeUntil(recognizer, whatFollowsLoopIterationOrRule);\n        break;\n    default:\n        // do nothing if we can't identify the exact kind of ATN state\n    }\n};\n\n// This is called by {@link //reportError} when the exception is a\n// {@link NoViableAltException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportNoViableAlternative = function(recognizer, e) {\n    var tokens = recognizer.getTokenStream();\n    var input;\n    if(tokens !== null) {\n        if (e.startToken.type===Token.EOF) {\n            input = \"<EOF>\";\n        } else {\n            input = tokens.getText(new Interval(e.startToken, e.offendingToken));\n        }\n    } else {\n        input = \"<unknown input>\";\n    }\n    var msg = \"no viable alternative at input \" + this.escapeWSAndQuote(input);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n//\n// This is called by {@link //reportError} when the exception is an\n// {@link InputMismatchException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportInputMismatch = function(recognizer, e) {\n    var msg = \"mismatched input \" + this.getTokenErrorDisplay(e.offendingToken) +\n          \" expecting \" + e.getExpectedTokens().toString(recognizer.literalNames, recognizer.symbolicNames);\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n//\n// This is called by {@link //reportError} when the exception is a\n// {@link FailedPredicateException}.\n//\n// @see //reportError\n//\n// @param recognizer the parser instance\n// @param e the recognition exception\n//\nDefaultErrorStrategy.prototype.reportFailedPredicate = function(recognizer, e) {\n    var ruleName = recognizer.ruleNames[recognizer._ctx.ruleIndex];\n    var msg = \"rule \" + ruleName + \" \" + e.message;\n    recognizer.notifyErrorListeners(msg, e.offendingToken, e);\n};\n\n// This method is called to report a syntax error which requires the removal\n// of a token from the input stream. At the time this method is called, the\n// erroneous symbol is current {@code LT(1)} symbol and has not yet been\n// removed from the input stream. When this method returns,\n// {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenDeletion} identifies\n// single-token deletion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.reportUnwantedToken = function(recognizer) {\n    if (this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    this.beginErrorCondition(recognizer);\n    var t = recognizer.getCurrentToken();\n    var tokenName = this.getTokenErrorDisplay(t);\n    var expecting = this.getExpectedTokens(recognizer);\n    var msg = \"extraneous input \" + tokenName + \" expecting \" +\n        expecting.toString(recognizer.literalNames, recognizer.symbolicNames);\n    recognizer.notifyErrorListeners(msg, t, null);\n};\n// This method is called to report a syntax error which requires the\n// insertion of a missing token into the input stream. At the time this\n// method is called, the missing token has not yet been inserted. When this\n// method returns, {@code recognizer} is in error recovery mode.\n//\n// <p>This method is called when {@link //singleTokenInsertion} identifies\n// single-token insertion as a viable recovery strategy for a mismatched\n// input error.</p>\n//\n// <p>The default implementation simply returns if the handler is already in\n// error recovery mode. Otherwise, it calls {@link //beginErrorCondition} to\n// enter error recovery mode, followed by calling\n// {@link Parser//notifyErrorListeners}.</p>\n//\n// @param recognizer the parser instance\n//\nDefaultErrorStrategy.prototype.reportMissingToken = function(recognizer) {\n    if ( this.inErrorRecoveryMode(recognizer)) {\n        return;\n    }\n    this.beginErrorCondition(recognizer);\n    var t = recognizer.getCurrentToken();\n    var expecting = this.getExpectedTokens(recognizer);\n    var msg = \"missing \" + expecting.toString(recognizer.literalNames, recognizer.symbolicNames) +\n          \" at \" + this.getTokenErrorDisplay(t);\n    recognizer.notifyErrorListeners(msg, t, null);\n};\n\n// <p>The default implementation attempts to recover from the mismatched input\n// by using single token insertion and deletion as described below. If the\n// recovery attempt fails, this method throws an\n// {@link InputMismatchException}.</p>\n//\n// <p><strong>EXTRA TOKEN</strong> (single token deletion)</p>\n//\n// <p>{@code LA(1)} is not what we are looking for. If {@code LA(2)} has the\n// right token, however, then assume {@code LA(1)} is some extra spurious\n// token and delete it. Then consume and return the next token (which was\n// the {@code LA(2)} token) as the successful result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenDeletion}.</p>\n//\n// <p><strong>MISSING TOKEN</strong> (single token insertion)</p>\n//\n// <p>If current token (at {@code LA(1)}) is consistent with what could come\n// after the expected {@code LA(1)} token, then assume the token is missing\n// and use the parser's {@link TokenFactory} to create it on the fly. The\n// \"insertion\" is performed by returning the created token as the successful\n// result of the match operation.</p>\n//\n// <p>This recovery strategy is implemented by {@link\n// //singleTokenInsertion}.</p>\n//\n// <p><strong>EXAMPLE</strong></p>\n//\n// <p>For example, Input {@code i=(3;} is clearly missing the {@code ')'}. When\n// the parser returns from the nested call to {@code expr}, it will have\n// call chain:</p>\n//\n// <pre>\n// stat &rarr; expr &rarr; atom\n// </pre>\n//\n// and it will be trying to match the {@code ')'} at this point in the\n// derivation:\n//\n// <pre>\n// =&gt; ID '=' '(' INT ')' ('+' atom)* ';'\n// ^\n// </pre>\n//\n// The attempt to match {@code ')'} will fail when it sees {@code ';'} and\n// call {@link //recoverInline}. To recover, it sees that {@code LA(1)==';'}\n// is in the set of tokens that can follow the {@code ')'} token reference\n// in rule {@code atom}. It can assume that you forgot the {@code ')'}.\n//\nDefaultErrorStrategy.prototype.recoverInline = function(recognizer) {\n    // SINGLE TOKEN DELETION\n    var matchedSymbol = this.singleTokenDeletion(recognizer);\n    if (matchedSymbol !== null) {\n        // we have deleted the extra token.\n        // now, move past ttype token as if all were ok\n        recognizer.consume();\n        return matchedSymbol;\n    }\n    // SINGLE TOKEN INSERTION\n    if (this.singleTokenInsertion(recognizer)) {\n        return this.getMissingSymbol(recognizer);\n    }\n    // even that didn't work; must throw the exception\n    throw new InputMismatchException(recognizer);\n};\n\n//\n// This method implements the single-token insertion inline error recovery\n// strategy. It is called by {@link //recoverInline} if the single-token\n// deletion strategy fails to recover from the mismatched input. If this\n// method returns {@code true}, {@code recognizer} will be in error recovery\n// mode.\n//\n// <p>This method determines whether or not single-token insertion is viable by\n// checking if the {@code LA(1)} input symbol could be successfully matched\n// if it were instead the {@code LA(2)} symbol. If this method returns\n// {@code true}, the caller is responsible for creating and inserting a\n// token with the correct type to produce this behavior.</p>\n//\n// @param recognizer the parser instance\n// @return {@code true} if single-token insertion is a viable recovery\n// strategy for the current mismatched input, otherwise {@code false}\n//\nDefaultErrorStrategy.prototype.singleTokenInsertion = function(recognizer) {\n    var currentSymbolType = recognizer.getTokenStream().LA(1);\n    // if current token is consistent with what could come after current\n    // ATN state, then we know we're missing a token; error recovery\n    // is free to conjure up and insert the missing token\n    var atn = recognizer._interp.atn;\n    var currentState = atn.states[recognizer.state];\n    var next = currentState.transitions[0].target;\n    var expectingAtLL2 = atn.nextTokens(next, recognizer._ctx);\n    if (expectingAtLL2.contains(currentSymbolType) ){\n        this.reportMissingToken(recognizer);\n        return true;\n    } else {\n        return false;\n    }\n};\n\n// This method implements the single-token deletion inline error recovery\n// strategy. It is called by {@link //recoverInline} to attempt to recover\n// from mismatched input. If this method returns null, the parser and error\n// handler state will not have changed. If this method returns non-null,\n// {@code recognizer} will <em>not</em> be in error recovery mode since the\n// returned token was a successful match.\n//\n// <p>If the single-token deletion is successful, this method calls\n// {@link //reportUnwantedToken} to report the error, followed by\n// {@link Parser//consume} to actually \"delete\" the extraneous token. Then,\n// before returning {@link //reportMatch} is called to signal a successful\n// match.</p>\n//\n// @param recognizer the parser instance\n// @return the successfully matched {@link Token} instance if single-token\n// deletion successfully recovers from the mismatched input, otherwise\n// {@code null}\n//\nDefaultErrorStrategy.prototype.singleTokenDeletion = function(recognizer) {\n    var nextTokenType = recognizer.getTokenStream().LA(2);\n    var expecting = this.getExpectedTokens(recognizer);\n    if (expecting.contains(nextTokenType)) {\n        this.reportUnwantedToken(recognizer);\n        // print(\"recoverFromMismatchedToken deleting \" \\\n        // + str(recognizer.getTokenStream().LT(1)) \\\n        // + \" since \" + str(recognizer.getTokenStream().LT(2)) \\\n        // + \" is what we want\", file=sys.stderr)\n        recognizer.consume(); // simply delete extra token\n        // we want to return the token we're actually matching\n        var matchedSymbol = recognizer.getCurrentToken();\n        this.reportMatch(recognizer); // we know current token is correct\n        return matchedSymbol;\n    } else {\n        return null;\n    }\n};\n\n// Conjure up a missing token during error recovery.\n//\n// The recognizer attempts to recover from single missing\n// symbols. But, actions might refer to that missing symbol.\n// For example, x=ID {f($x);}. The action clearly assumes\n// that there has been an identifier matched previously and that\n// $x points at that token. If that token is missing, but\n// the next token in the stream is what we want we assume that\n// this token is missing and we keep going. Because we\n// have to return some token to replace the missing token,\n// we have to conjure one up. This method gives the user control\n// over the tokens returned for missing tokens. Mostly,\n// you will want to create something special for identifier\n// tokens. For literals such as '{' and ',', the default\n// action in the parser or tree parser works. It simply creates\n// a CommonToken of the appropriate type. The text will be the token.\n// If you change what tokens must be created by the lexer,\n// override this method to create the appropriate tokens.\n//\nDefaultErrorStrategy.prototype.getMissingSymbol = function(recognizer) {\n    var currentSymbol = recognizer.getCurrentToken();\n    var expecting = this.getExpectedTokens(recognizer);\n    var expectedTokenType = expecting.first(); // get any element\n    var tokenText;\n    if (expectedTokenType===Token.EOF) {\n        tokenText = \"<missing EOF>\";\n    } else {\n        tokenText = \"<missing \" + recognizer.literalNames[expectedTokenType] + \">\";\n    }\n    var current = currentSymbol;\n    var lookback = recognizer.getTokenStream().LT(-1);\n    if (current.type===Token.EOF && lookback !== null) {\n        current = lookback;\n    }\n    return recognizer.getTokenFactory().create(current.source,\n        expectedTokenType, tokenText, Token.DEFAULT_CHANNEL,\n        -1, -1, current.line, current.column);\n};\n\nDefaultErrorStrategy.prototype.getExpectedTokens = function(recognizer) {\n    return recognizer.getExpectedTokens();\n};\n\n// How should a token be displayed in an error message? The default\n// is to display just the text, but during development you might\n// want to have a lot of information spit out. Override in that case\n// to use t.toString() (which, for CommonToken, dumps everything about\n// the token). This is better than forcing you to override a method in\n// your token objects because you don't have to go modify your lexer\n// so that it creates a new Java type.\n//\nDefaultErrorStrategy.prototype.getTokenErrorDisplay = function(t) {\n    if (t === null) {\n        return \"<no token>\";\n    }\n    var s = t.text;\n    if (s === null) {\n        if (t.type===Token.EOF) {\n            s = \"<EOF>\";\n        } else {\n            s = \"<\" + t.type + \">\";\n        }\n    }\n    return this.escapeWSAndQuote(s);\n};\n\nDefaultErrorStrategy.prototype.escapeWSAndQuote = function(s) {\n    s = s.replace(/\\n/g,\"\\\\n\");\n    s = s.replace(/\\r/g,\"\\\\r\");\n    s = s.replace(/\\t/g,\"\\\\t\");\n    return \"'\" + s + \"'\";\n};\n\n// Compute the error recovery set for the current rule. During\n// rule invocation, the parser pushes the set of tokens that can\n// follow that rule reference on the stack; this amounts to\n// computing FIRST of what follows the rule reference in the\n// enclosing rule. See LinearApproximator.FIRST().\n// This local follow set only includes tokens\n// from within the rule; i.e., the FIRST computation done by\n// ANTLR stops at the end of a rule.\n//\n// EXAMPLE\n//\n// When you find a \"no viable alt exception\", the input is not\n// consistent with any of the alternatives for rule r. The best\n// thing to do is to consume tokens until you see something that\n// can legally follow a call to r//or* any rule that called r.\n// You don't want the exact set of viable next tokens because the\n// input might just be missing a token--you might consume the\n// rest of the input looking for one of the missing tokens.\n//\n// Consider grammar:\n//\n// a : '[' b ']'\n// | '(' b ')'\n// ;\n// b : c '^' INT ;\n// c : ID\n// | INT\n// ;\n//\n// At each rule invocation, the set of tokens that could follow\n// that rule is pushed on a stack. Here are the various\n// context-sensitive follow sets:\n//\n// FOLLOW(b1_in_a) = FIRST(']') = ']'\n// FOLLOW(b2_in_a) = FIRST(')') = ')'\n// FOLLOW(c_in_b) = FIRST('^') = '^'\n//\n// Upon erroneous input \"[]\", the call chain is\n//\n// a -> b -> c\n//\n// and, hence, the follow context stack is:\n//\n// depth follow set start of rule execution\n// 0 <EOF> a (from main())\n// 1 ']' b\n// 2 '^' c\n//\n// Notice that ')' is not included, because b would have to have\n// been called from a different context in rule a for ')' to be\n// included.\n//\n// For error recovery, we cannot consider FOLLOW(c)\n// (context-sensitive or otherwise). We need the combined set of\n// all context-sensitive FOLLOW sets--the set of all tokens that\n// could follow any reference in the call chain. We need to\n// resync to one of those tokens. Note that FOLLOW(c)='^' and if\n// we resync'd to that token, we'd consume until EOF. We need to\n// sync to context-sensitive FOLLOWs for a, b, and c: {']','^'}.\n// In this case, for input \"[]\", LA(1) is ']' and in the set, so we would\n// not consume anything. After printing an error, rule c would\n// return normally. Rule b would not find the required '^' though.\n// At this point, it gets a mismatched token error and throws an\n// exception (since LA(1) is not in the viable following token\n// set). The rule exception handler tries to recover, but finds\n// the same recovery set and doesn't consume anything. Rule b\n// exits normally returning to rule a. Now it finds the ']' (and\n// with the successful match exits errorRecovery mode).\n//\n// So, you can see that the parser walks up the call chain looking\n// for the token that was a member of the recovery set.\n//\n// Errors are not generated in errorRecovery mode.\n//\n// ANTLR's error recovery mechanism is based upon original ideas:\n//\n// \"Algorithms + Data Structures = Programs\" by Niklaus Wirth\n//\n// and\n//\n// \"A note on error recovery in recursive descent parsers\":\n// http://portal.acm.org/citation.cfm?id=947902.947905\n//\n// Later, Josef Grosch had some good ideas:\n//\n// \"Efficient and Comfortable Error Recovery in Recursive Descent\n// Parsers\":\n// ftp://www.cocolab.com/products/cocktail/doca4.ps/ell.ps.zip\n//\n// Like Grosch I implement context-sensitive FOLLOW sets that are combined\n// at run-time upon error to avoid overhead during parsing.\n//\nDefaultErrorStrategy.prototype.getErrorRecoverySet = function(recognizer) {\n    var atn = recognizer._interp.atn;\n    var ctx = recognizer._ctx;\n    var recoverSet = new IntervalSet();\n    while (ctx !== null && ctx.invokingState>=0) {\n        // compute what follows who invoked us\n        var invokingState = atn.states[ctx.invokingState];\n        var rt = invokingState.transitions[0];\n        var follow = atn.nextTokens(rt.followState);\n        recoverSet.addSet(follow);\n        ctx = ctx.parentCtx;\n    }\n    recoverSet.removeOne(Token.EPSILON);\n    return recoverSet;\n};\n\n// Consume tokens until one matches the given token set.//\nDefaultErrorStrategy.prototype.consumeUntil = function(recognizer, set) {\n    var ttype = recognizer.getTokenStream().LA(1);\n    while( ttype !== Token.EOF && !set.contains(ttype)) {\n        recognizer.consume();\n        ttype = recognizer.getTokenStream().LA(1);\n    }\n};\n\n//\n// This implementation of {@link ANTLRErrorStrategy} responds to syntax errors\n// by immediately canceling the parse operation with a\n// {@link ParseCancellationException}. The implementation ensures that the\n// {@link ParserRuleContext//exception} field is set for all parse tree nodes\n// that were not completed prior to encountering the error.\n//\n// <p>\n// This error strategy is useful in the following scenarios.</p>\n//\n// <ul>\n// <li><strong>Two-stage parsing:</strong> This error strategy allows the first\n// stage of two-stage parsing to immediately terminate if an error is\n// encountered, and immediately fall back to the second stage. In addition to\n// avoiding wasted work by attempting to recover from errors here, the empty\n// implementation of {@link BailErrorStrategy//sync} improves the performance of\n// the first stage.</li>\n// <li><strong>Silent validation:</strong> When syntax errors are not being\n// reported or logged, and the parse result is simply ignored if errors occur,\n// the {@link BailErrorStrategy} avoids wasting work on recovering from errors\n// when the result will be ignored either way.</li>\n// </ul>\n//\n// <p>\n// {@code myparser.setErrorHandler(new BailErrorStrategy());}</p>\n//\n// @see Parser//setErrorHandler(ANTLRErrorStrategy)\n//\nfunction BailErrorStrategy() {\n\tDefaultErrorStrategy.call(this);\n\treturn this;\n}\n\nBailErrorStrategy.prototype = Object.create(DefaultErrorStrategy.prototype);\nBailErrorStrategy.prototype.constructor = BailErrorStrategy;\n\n// Instead of recovering from exception {@code e}, re-throw it wrapped\n// in a {@link ParseCancellationException} so it is not caught by the\n// rule function catches. Use {@link Exception//getCause()} to get the\n// original {@link RecognitionException}.\n//\nBailErrorStrategy.prototype.recover = function(recognizer, e) {\n    var context = recognizer._ctx;\n    while (context !== null) {\n        context.exception = e;\n        context = context.parentCtx;\n    }\n    throw new ParseCancellationException(e);\n};\n\n// Make sure we don't attempt to recover inline; if the parser\n// successfully recovers, it won't throw an exception.\n//\nBailErrorStrategy.prototype.recoverInline = function(recognizer) {\n    this.recover(recognizer, new InputMismatchException(recognizer));\n};\n\n// Make sure we don't attempt to recover from problems in subrules.//\nBailErrorStrategy.prototype.sync = function(recognizer) {\n    // pass\n};\n\nexports.BailErrorStrategy = BailErrorStrategy;\nexports.DefaultErrorStrategy = DefaultErrorStrategy;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/error/ErrorStrategy.js","import ace from 'ace';\r\nimport './my-mode';\r\nimport validate from '../lib/validate';\r\nimport run from '../lib/run';\r\n\r\nvar editor = ace.edit(\"editor\");\r\neditor.setTheme(\"ace/theme/chrome\");\r\neditor.getSession().setMode(\"ace/mode/my-mode\");\r\nvar Range = ace.require('ace/range').Range;\r\n\r\nvar markers = [];\r\n\r\neditor.getSession().on('change', function () {\r\n    var errors = validate(editor.getValue());\r\n    var session = editor.getSession();\r\n    markers.forEach(marker => session.removeMarker(marker));\r\n    markers = [];\r\n    session.setAnnotations(errors.map(error => ({\r\n        row: error.line,\r\n        column: error.column,\r\n        text: error.text,\r\n        type: \"error\" // also warning and information\r\n    })));\r\n\r\n    errors.forEach((error) => {\r\n        markers.push(session.addMarker(new Range(error.line, error.column, error.line, error.column + error.length), \"lint-mark-error\", false));\r\n    });\r\n});\r\n\r\ndocument.getElementById('btnRun').onclick = () => {\r\n    alert(run(editor.getValue()));\r\n};\n\n\n// WEBPACK FOOTER //\n// ./editor/index.js","module.exports = ace;\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"ace\"\n// module id = 33\n// module chunks = 0","ace.define('ace/mode/my-mode', [\"require\", \"exports\", \"module\", \"ace/lib/oop\", \"ace/mode/text\", \"ace/mode/text_highlight_rules\", \"ace/worker/worker_client\"], function (require, exports, module) {\r\n    var oop = require(\"ace/lib/oop\");\r\n    var TextMode = require(\"ace/mode/text\").Mode;\r\n    var TextHighlightRules = require(\"ace/mode/text_highlight_rules\").TextHighlightRules;\r\n\r\n    var MyHighlightRules = function () {\r\n        var keywordMapper = this.createKeywordMapper({\r\n            \"keyword.control\": \"if|then|else\",\r\n            \"keyword.operator\": \"and|or|not\",\r\n            \"keyword.other\": \"class\",\r\n            \"storage.type\": \"int|float|text\",\r\n            \"storage.modifier\": \"private|public\",\r\n            \"support.function\": \"print|sort\",\r\n            \"constant.language\": \"true|false\"\r\n        }, \"identifier\");\r\n        this.$rules = {\r\n            \"start\": [\r\n                { token: \"comment\", regex: \"//\" },\r\n                { token: \"string\", regex: '[\"](?:(?:\\\\\\\\.)|(?:[^\"\\\\\\\\]))*?[\"]' },\r\n                { token: \"constant.numeric\", regex: \"0[xX][0-9a-fA-F]+\\\\b\" },\r\n                { token: \"constant.numeric\", regex: \"[+-]?\\\\d+(?:(?:\\\\.\\\\d*)?(?:[eE][+-]?\\\\d+)?)?\\\\b\" },\r\n                { token: \"keyword.operator\", regex: \"!|%|\\\\\\\\|/|\\\\*|\\\\-|\\\\+|~=|==|<>|!=|<=|>=|=|<|>|&&|\\\\|\\\\|\" },\r\n                { token: \"punctuation.operator\", regex: \"\\\\?|\\\\:|\\\\,|\\\\;|\\\\.\" },\r\n                { token: \"paren.lparen\", regex: \"[[({]\" },\r\n                { token: \"paren.rparen\", regex: \"[\\\\])}]\" },\r\n                { token: \"text\", regex: \"\\\\s+\" },\r\n                { token: keywordMapper, regex: \"[a-zA-Z_$][a-zA-Z0-9_$]*\\\\b\" }\r\n            ]\r\n        };\r\n    };\r\n    oop.inherits(MyHighlightRules, TextHighlightRules);\r\n\r\n    var MyMode = function () {\r\n        this.HighlightRules = MyHighlightRules;\r\n    };\r\n    oop.inherits(MyMode, TextMode);\r\n\r\n    (function () {\r\n\r\n        this.$id = \"ace/mode/my-mode\";\r\n\r\n    }).call(MyMode.prototype);\r\n\r\n    exports.Mode = MyMode;\r\n});\n\n\n// WEBPACK FOOTER //\n// ./editor/my-mode.js","import { InputStream } from 'antlr4/InputStream';\r\nimport { CommonTokenStream } from 'antlr4/CommonTokenStream';\r\nimport { ErrorListener } from 'antlr4/error/ErrorListener';\r\nimport { ExprLexer } from './parsers/ExprLexer';\r\nimport { ExprParser } from './parsers/ExprParser';\r\n\r\n\r\nclass MyErrorListener extends ErrorListener {\r\n    constructor() {\r\n        super();\r\n        this.errors = [];\r\n    }\r\n    syntaxError(recognizer, offendingSymbol, line, column, text, e) {\r\n        var length = 1, col = column - 1, start;\r\n        if (e && e.ctx && e.ctx.start) {\r\n            col = e.ctx.start.column;\r\n            start = e.ctx.start.start;\r\n            length = e.ctx.start.stop - start + 1;\r\n            if (length < 1) {\r\n                length = 1;\r\n            }\r\n        }\r\n        this.errors.push({\r\n            line: line - 1,\r\n            column: col,\r\n            length,\r\n            text\r\n        });\r\n    }\r\n}\r\n\r\nexport default function validate(input) {\r\n    var listener = new MyErrorListener();\r\n\r\n    var chars = new InputStream(input);\r\n    var lexer = new ExprLexer(chars);\r\n    lexer.removeErrorListeners();\r\n    lexer.addErrorListener(listener);\r\n\r\n    var tokens = new CommonTokenStream(lexer);\r\n\r\n    var parser = new ExprParser(tokens);\r\n    parser.buildParseTrees = false;\r\n    parser.removeErrorListeners();\r\n    parser.addErrorListener(listener);\r\n\r\n    parser.prog();\r\n    return listener.errors;\r\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/validate.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\n// This implementation of {@link TokenStream} loads tokens from a\n// {@link TokenSource} on-demand, and places the tokens in a buffer to provide\n// access to any previous token by index.\n//\n// <p>\n// This token stream ignores the value of {@link Token//getChannel}. If your\n// parser requires the token stream filter tokens to only those on a particular\n// channel, such as {@link Token//DEFAULT_CHANNEL} or\n// {@link Token//HIDDEN_CHANNEL}, use a filtering token stream such a\n// {@link CommonTokenStream}.</p>\n\nvar Token = require('./Token').Token;\nvar Lexer = require('./Lexer').Lexer;\nvar Interval = require('./IntervalSet').Interval;\n\n// this is just to keep meaningful parameter types to Parser\nfunction TokenStream() {\n\treturn this;\n}\n\nfunction BufferedTokenStream(tokenSource) {\n\n\tTokenStream.call(this);\n\t// The {@link TokenSource} from which tokens for this stream are fetched.\n\tthis.tokenSource = tokenSource;\n\n\t// A collection of all tokens fetched from the token source. The list is\n\t// considered a complete view of the input once {@link //fetchedEOF} is set\n\t// to {@code true}.\n\tthis.tokens = [];\n\n\t// The index into {@link //tokens} of the current token (next token to\n\t// {@link //consume}). {@link //tokens}{@code [}{@link //p}{@code ]} should\n\t// be\n\t// {@link //LT LT(1)}.\n\t//\n\t// <p>This field is set to -1 when the stream is first constructed or when\n\t// {@link //setTokenSource} is called, indicating that the first token has\n\t// not yet been fetched from the token source. For additional information,\n\t// see the documentation of {@link IntStream} for a description of\n\t// Initializing Methods.</p>\n\tthis.index = -1;\n\n\t// Indicates whether the {@link Token//EOF} token has been fetched from\n\t// {@link //tokenSource} and added to {@link //tokens}. This field improves\n\t// performance for the following cases:\n\t//\n\t// <ul>\n\t// <li>{@link //consume}: The lookahead check in {@link //consume} to\n\t// prevent\n\t// consuming the EOF symbol is optimized by checking the values of\n\t// {@link //fetchedEOF} and {@link //p} instead of calling {@link\n\t// //LA}.</li>\n\t// <li>{@link //fetch}: The check to prevent adding multiple EOF symbols\n\t// into\n\t// {@link //tokens} is trivial with this field.</li>\n\t// <ul>\n\tthis.fetchedEOF = false;\n\treturn this;\n}\n\nBufferedTokenStream.prototype = Object.create(TokenStream.prototype);\nBufferedTokenStream.prototype.constructor = BufferedTokenStream;\n\nBufferedTokenStream.prototype.mark = function() {\n\treturn 0;\n};\n\nBufferedTokenStream.prototype.release = function(marker) {\n\t// no resources to release\n};\n\nBufferedTokenStream.prototype.reset = function() {\n\tthis.seek(0);\n};\n\nBufferedTokenStream.prototype.seek = function(index) {\n\tthis.lazyInit();\n\tthis.index = this.adjustSeekIndex(index);\n};\n\nBufferedTokenStream.prototype.get = function(index) {\n\tthis.lazyInit();\n\treturn this.tokens[index];\n};\n\nBufferedTokenStream.prototype.consume = function() {\n\tvar skipEofCheck = false;\n\tif (this.index >= 0) {\n\t\tif (this.fetchedEOF) {\n\t\t\t// the last token in tokens is EOF. skip check if p indexes any\n\t\t\t// fetched token except the last.\n\t\t\tskipEofCheck = this.index < this.tokens.length - 1;\n\t\t} else {\n\t\t\t// no EOF token in tokens. skip check if p indexes a fetched token.\n\t\t\tskipEofCheck = this.index < this.tokens.length;\n\t\t}\n\t} else {\n\t\t// not yet initialized\n\t\tskipEofCheck = false;\n\t}\n\tif (!skipEofCheck && this.LA(1) === Token.EOF) {\n\t\tthrow \"cannot consume EOF\";\n\t}\n\tif (this.sync(this.index + 1)) {\n\t\tthis.index = this.adjustSeekIndex(this.index + 1);\n\t}\n};\n\n// Make sure index {@code i} in tokens has a token.\n//\n// @return {@code true} if a token is located at index {@code i}, otherwise\n// {@code false}.\n// @see //get(int i)\n// /\nBufferedTokenStream.prototype.sync = function(i) {\n\tvar n = i - this.tokens.length + 1; // how many more elements we need?\n\tif (n > 0) {\n\t\tvar fetched = this.fetch(n);\n\t\treturn fetched >= n;\n\t}\n\treturn true;\n};\n\n// Add {@code n} elements to buffer.\n//\n// @return The actual number of elements added to the buffer.\n// /\nBufferedTokenStream.prototype.fetch = function(n) {\n\tif (this.fetchedEOF) {\n\t\treturn 0;\n\t}\n\tfor (var i = 0; i < n; i++) {\n\t\tvar t = this.tokenSource.nextToken();\n\t\tt.tokenIndex = this.tokens.length;\n\t\tthis.tokens.push(t);\n\t\tif (t.type === Token.EOF) {\n\t\t\tthis.fetchedEOF = true;\n\t\t\treturn i + 1;\n\t\t}\n\t}\n\treturn n;\n};\n\n// Get all tokens from start..stop inclusively///\nBufferedTokenStream.prototype.getTokens = function(start, stop, types) {\n\tif (types === undefined) {\n\t\ttypes = null;\n\t}\n\tif (start < 0 || stop < 0) {\n\t\treturn null;\n\t}\n\tthis.lazyInit();\n\tvar subset = [];\n\tif (stop >= this.tokens.length) {\n\t\tstop = this.tokens.length - 1;\n\t}\n\tfor (var i = start; i < stop; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (t.type === Token.EOF) {\n\t\t\tbreak;\n\t\t}\n\t\tif (types === null || types.contains(t.type)) {\n\t\t\tsubset.push(t);\n\t\t}\n\t}\n\treturn subset;\n};\n\nBufferedTokenStream.prototype.LA = function(i) {\n\treturn this.LT(i).type;\n};\n\nBufferedTokenStream.prototype.LB = function(k) {\n\tif (this.index - k < 0) {\n\t\treturn null;\n\t}\n\treturn this.tokens[this.index - k];\n};\n\nBufferedTokenStream.prototype.LT = function(k) {\n\tthis.lazyInit();\n\tif (k === 0) {\n\t\treturn null;\n\t}\n\tif (k < 0) {\n\t\treturn this.LB(-k);\n\t}\n\tvar i = this.index + k - 1;\n\tthis.sync(i);\n\tif (i >= this.tokens.length) { // return EOF token\n\t\t// EOF must be last token\n\t\treturn this.tokens[this.tokens.length - 1];\n\t}\n\treturn this.tokens[i];\n};\n\n// Allowed derived classes to modify the behavior of operations which change\n// the current stream position by adjusting the target token index of a seek\n// operation. The default implementation simply returns {@code i}. If an\n// exception is thrown in this method, the current stream index should not be\n// changed.\n//\n// <p>For example, {@link CommonTokenStream} overrides this method to ensure\n// that\n// the seek target is always an on-channel token.</p>\n//\n// @param i The target token index.\n// @return The adjusted target token index.\n\nBufferedTokenStream.prototype.adjustSeekIndex = function(i) {\n\treturn i;\n};\n\nBufferedTokenStream.prototype.lazyInit = function() {\n\tif (this.index === -1) {\n\t\tthis.setup();\n\t}\n};\n\nBufferedTokenStream.prototype.setup = function() {\n\tthis.sync(0);\n\tthis.index = this.adjustSeekIndex(0);\n};\n\n// Reset this token stream by setting its token source.///\nBufferedTokenStream.prototype.setTokenSource = function(tokenSource) {\n\tthis.tokenSource = tokenSource;\n\tthis.tokens = [];\n\tthis.index = -1;\n\tthis.fetchedEOF = false;\n};\n\n\n// Given a starting index, return the index of the next token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and EOF.\n// /\nBufferedTokenStream.prototype.nextTokenOnChannel = function(i, channel) {\n\tthis.sync(i);\n\tif (i >= this.tokens.length) {\n\t\treturn -1;\n\t}\n\tvar token = this.tokens[i];\n\twhile (token.channel !== this.channel) {\n\t\tif (token.type === Token.EOF) {\n\t\t\treturn -1;\n\t\t}\n\t\ti += 1;\n\t\tthis.sync(i);\n\t\ttoken = this.tokens[i];\n\t}\n\treturn i;\n};\n\n// Given a starting index, return the index of the previous token on channel.\n// Return i if tokens[i] is on channel. Return -1 if there are no tokens\n// on channel between i and 0.\nBufferedTokenStream.prototype.previousTokenOnChannel = function(i, channel) {\n\twhile (i >= 0 && this.tokens[i].channel !== channel) {\n\t\ti -= 1;\n\t}\n\treturn i;\n};\n\n// Collect all tokens on specified channel to the right of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL or\n// EOF. If channel is -1, find any non default channel token.\nBufferedTokenStream.prototype.getHiddenTokensToRight = function(tokenIndex,\n\t\tchannel) {\n\tif (channel === undefined) {\n\t\tchannel = -1;\n\t}\n\tthis.lazyInit();\n\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t}\n\tvar nextOnChannel = this.nextTokenOnChannel(tokenIndex + 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\tvar from_ = tokenIndex + 1;\n\t// if none onchannel to right, nextOnChannel=-1 so set to = last token\n\tvar to = nextOnChannel === -1 ? this.tokens.length - 1 : nextOnChannel;\n\treturn this.filterForChannel(from_, to, channel);\n};\n\n// Collect all tokens on specified channel to the left of\n// the current token up until we see a token on DEFAULT_TOKEN_CHANNEL.\n// If channel is -1, find any non default channel token.\nBufferedTokenStream.prototype.getHiddenTokensToLeft = function(tokenIndex,\n\t\tchannel) {\n\tif (channel === undefined) {\n\t\tchannel = -1;\n\t}\n\tthis.lazyInit();\n\tif (tokenIndex < 0 || tokenIndex >= this.tokens.length) {\n\t\tthrow \"\" + tokenIndex + \" not in 0..\" + this.tokens.length - 1;\n\t}\n\tvar prevOnChannel = this.previousTokenOnChannel(tokenIndex - 1, Lexer.DEFAULT_TOKEN_CHANNEL);\n\tif (prevOnChannel === tokenIndex - 1) {\n\t\treturn null;\n\t}\n\t// if none on channel to left, prevOnChannel=-1 then from=0\n\tvar from_ = prevOnChannel + 1;\n\tvar to = tokenIndex - 1;\n\treturn this.filterForChannel(from_, to, channel);\n};\n\nBufferedTokenStream.prototype.filterForChannel = function(left, right, channel) {\n\tvar hidden = [];\n\tfor (var i = left; i < right + 1; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (channel === -1) {\n\t\t\tif (t.channel !== Lexer.DEFAULT_TOKEN_CHANNEL) {\n\t\t\t\thidden.push(t);\n\t\t\t}\n\t\t} else if (t.channel === channel) {\n\t\t\thidden.push(t);\n\t\t}\n\t}\n\tif (hidden.length === 0) {\n\t\treturn null;\n\t}\n\treturn hidden;\n};\n\nBufferedTokenStream.prototype.getSourceName = function() {\n\treturn this.tokenSource.getSourceName();\n};\n\n// Get the text of all tokens in this buffer.///\nBufferedTokenStream.prototype.getText = function(interval) {\n\tthis.lazyInit();\n\tthis.fill();\n\tif (interval === undefined || interval === null) {\n\t\tinterval = new Interval(0, this.tokens.length - 1);\n\t}\n\tvar start = interval.start;\n\tif (start instanceof Token) {\n\t\tstart = start.tokenIndex;\n\t}\n\tvar stop = interval.stop;\n\tif (stop instanceof Token) {\n\t\tstop = stop.tokenIndex;\n\t}\n\tif (start === null || stop === null || start < 0 || stop < 0) {\n\t\treturn \"\";\n\t}\n\tif (stop >= this.tokens.length) {\n\t\tstop = this.tokens.length - 1;\n\t}\n\tvar s = \"\";\n\tfor (var i = start; i < stop + 1; i++) {\n\t\tvar t = this.tokens[i];\n\t\tif (t.type === Token.EOF) {\n\t\t\tbreak;\n\t\t}\n\t\ts = s + t.text;\n\t}\n\treturn s;\n};\n\n// Get all tokens from lexer until EOF///\nBufferedTokenStream.prototype.fill = function() {\n\tthis.lazyInit();\n\twhile (this.fetch(1000) === 1000) {\n\t\tcontinue;\n\t}\n};\n\nexports.BufferedTokenStream = BufferedTokenStream;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/BufferedTokenStream.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// This default implementation of {@link TokenFactory} creates\n// {@link CommonToken} objects.\n//\n\nvar CommonToken = require('./Token').CommonToken;\n\nfunction TokenFactory() {\n\treturn this;\n}\n\nfunction CommonTokenFactory(copyText) {\n\tTokenFactory.call(this);\n    // Indicates whether {@link CommonToken//setText} should be called after\n    // constructing tokens to explicitly set the text. This is useful for cases\n    // where the input stream might not be able to provide arbitrary substrings\n    // of text from the input after the lexer creates a token (e.g. the\n    // implementation of {@link CharStream//getText} in\n    // {@link UnbufferedCharStream} throws an\n    // {@link UnsupportedOperationException}). Explicitly setting the token text\n    // allows {@link Token//getText} to be called at any time regardless of the\n    // input stream implementation.\n    //\n    // <p>\n    // The default value is {@code false} to avoid the performance and memory\n    // overhead of copying text for every token unless explicitly requested.</p>\n    //\n    this.copyText = copyText===undefined ? false : copyText;\n\treturn this;\n}\n\nCommonTokenFactory.prototype = Object.create(TokenFactory.prototype);\nCommonTokenFactory.prototype.constructor = CommonTokenFactory;\n\n//\n// The default {@link CommonTokenFactory} instance.\n//\n// <p>\n// This token factory does not explicitly copy token text when constructing\n// tokens.</p>\n//\nCommonTokenFactory.DEFAULT = new CommonTokenFactory();\n\nCommonTokenFactory.prototype.create = function(source, type, text, channel, start, stop, line, column) {\n    var t = new CommonToken(source, type, channel, start, stop);\n    t.line = line;\n    t.column = column;\n    if (text !==null) {\n        t.text = text;\n    } else if (this.copyText && source[1] !==null) {\n        t.text = source[1].getText(start,stop);\n    }\n    return t;\n};\n\nCommonTokenFactory.prototype.createThin = function(type, text) {\n    var t = new CommonToken(null, type);\n    t.text = text;\n    return t;\n};\n\nexports.CommonTokenFactory = CommonTokenFactory;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/CommonTokenFactory.js","// Generated from lib/Expr.g4 by ANTLR 4.7\r\n// jshint ignore: start\r\nvar antlr4 = require('antlr4/index');\r\n\r\n\r\nvar serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\",\r\n    \"\\u0002\\r:\\b\\u0001\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0004\\u0004\",\r\n    \"\\t\\u0004\\u0004\\u0005\\t\\u0005\\u0004\\u0006\\t\\u0006\\u0004\\u0007\\t\\u0007\",\r\n    \"\\u0004\\b\\t\\b\\u0004\\t\\t\\t\\u0004\\n\\t\\n\\u0004\\u000b\\t\\u000b\\u0004\\f\\t\\f\",\r\n    \"\\u0003\\u0002\\u0003\\u0002\\u0003\\u0003\\u0003\\u0003\\u0003\\u0004\\u0003\\u0004\",\r\n    \"\\u0003\\u0005\\u0003\\u0005\\u0003\\u0006\\u0003\\u0006\\u0003\\u0007\\u0003\\u0007\",\r\n    \"\\u0003\\b\\u0003\\b\\u0003\\t\\u0003\\t\\u0003\\n\\u0006\\n+\\n\\n\\r\\n\\u000e\\n,\\u0003\",\r\n    \"\\u000b\\u0006\\u000b0\\n\\u000b\\r\\u000b\\u000e\\u000b1\\u0003\\f\\u0006\\f5\\n\",\r\n    \"\\f\\r\\f\\u000e\\f6\\u0003\\f\\u0003\\f\\u0002\\u0002\\r\\u0003\\u0003\\u0005\\u0004\",\r\n    \"\\u0007\\u0005\\t\\u0006\\u000b\\u0007\\r\\b\\u000f\\t\\u0011\\n\\u0013\\u000b\\u0015\",\r\n    \"\\f\\u0017\\r\\u0003\\u0002\\u0005\\u0003\\u00022;\\u0004\\u0002C\\\\c|\\u0005\\u0002\",\r\n    \"\\u000b\\f\\u000f\\u000f\\\"\\\"\\u0002<\\u0002\\u0003\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002\\u0005\\u0003\\u0002\\u0002\\u0002\\u0002\\u0007\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002\\t\\u0003\\u0002\\u0002\\u0002\\u0002\\u000b\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002\\r\\u0003\\u0002\\u0002\\u0002\\u0002\\u000f\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002\\u0011\\u0003\\u0002\\u0002\\u0002\\u0002\\u0013\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0002\\u0015\\u0003\\u0002\\u0002\\u0002\\u0002\\u0017\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0003\\u0019\\u0003\\u0002\\u0002\\u0002\\u0005\\u001b\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u0007\\u001d\\u0003\\u0002\\u0002\\u0002\\t\\u001f\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u000b!\\u0003\\u0002\\u0002\\u0002\\r#\\u0003\\u0002\\u0002\\u0002\\u000f%\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0011\\'\\u0003\\u0002\\u0002\\u0002\\u0013*\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0015/\\u0003\\u0002\\u0002\\u0002\\u00174\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u0019\\u001a\\u0007?\\u0002\\u0002\\u001a\\u0004\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u001b\\u001c\\u0007,\\u0002\\u0002\\u001c\\u0006\\u0003\\u0002\\u0002\",\r\n    \"\\u0002\\u001d\\u001e\\u00071\\u0002\\u0002\\u001e\\b\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\u001f \\u0007-\\u0002\\u0002 \\n\\u0003\\u0002\\u0002\\u0002!\\\"\\u0007/\\u0002\",\r\n    \"\\u0002\\\"\\f\\u0003\\u0002\\u0002\\u0002#$\\u0007*\\u0002\\u0002$\\u000e\\u0003\",\r\n    \"\\u0002\\u0002\\u0002%&\\u0007+\\u0002\\u0002&\\u0010\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\'(\\u0007=\\u0002\\u0002(\\u0012\\u0003\\u0002\\u0002\\u0002)+\\t\\u0002\\u0002\",\r\n    \"\\u0002*)\\u0003\\u0002\\u0002\\u0002+,\\u0003\\u0002\\u0002\\u0002,*\\u0003\\u0002\",\r\n    \"\\u0002\\u0002,-\\u0003\\u0002\\u0002\\u0002-\\u0014\\u0003\\u0002\\u0002\\u0002\",\r\n    \".0\\t\\u0003\\u0002\\u0002/.\\u0003\\u0002\\u0002\\u000201\\u0003\\u0002\\u0002\",\r\n    \"\\u00021/\\u0003\\u0002\\u0002\\u000212\\u0003\\u0002\\u0002\\u00022\\u0016\\u0003\",\r\n    \"\\u0002\\u0002\\u000235\\t\\u0004\\u0002\\u000243\\u0003\\u0002\\u0002\\u00025\",\r\n    \"6\\u0003\\u0002\\u0002\\u000264\\u0003\\u0002\\u0002\\u000267\\u0003\\u0002\\u0002\",\r\n    \"\\u000278\\u0003\\u0002\\u0002\\u000289\\b\\f\\u0002\\u00029\\u0018\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0006\\u0002,16\\u0003\\b\\u0002\\u0002\"].join(\"\");\r\n\r\n\r\nvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\r\n\r\nvar decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });\r\n\r\nfunction ExprLexer(input) {\r\n\tantlr4.Lexer.call(this, input);\r\n    this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());\r\n    return this;\r\n}\r\n\r\nExprLexer.prototype = Object.create(antlr4.Lexer.prototype);\r\nExprLexer.prototype.constructor = ExprLexer;\r\n\r\nExprLexer.EOF = antlr4.Token.EOF;\r\nExprLexer.T__0 = 1;\r\nExprLexer.T__1 = 2;\r\nExprLexer.T__2 = 3;\r\nExprLexer.T__3 = 4;\r\nExprLexer.T__4 = 5;\r\nExprLexer.T__5 = 6;\r\nExprLexer.T__6 = 7;\r\nExprLexer.NEWLINE = 8;\r\nExprLexer.INT = 9;\r\nExprLexer.ID = 10;\r\nExprLexer.WS = 11;\r\n\r\nExprLexer.prototype.channelNames = [ \"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\" ];\r\n\r\nExprLexer.prototype.modeNames = [ \"DEFAULT_MODE\" ];\r\n\r\nExprLexer.prototype.literalNames = [ null, \"'='\", \"'*'\", \"'/'\", \"'+'\", \"'-'\", \r\n                                     \"'('\", \"')'\", \"';'\" ];\r\n\r\nExprLexer.prototype.symbolicNames = [ null, null, null, null, null, null, \r\n                                      null, null, \"NEWLINE\", \"INT\", \"ID\", \r\n                                      \"WS\" ];\r\n\r\nExprLexer.prototype.ruleNames = [ \"T__0\", \"T__1\", \"T__2\", \"T__3\", \"T__4\", \r\n                                  \"T__5\", \"T__6\", \"NEWLINE\", \"INT\", \"ID\", \r\n                                  \"WS\" ];\r\n\r\nExprLexer.prototype.grammarFileName = \"Expr.g4\";\r\n\r\n\r\n\r\nexports.ExprLexer = ExprLexer;\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/parsers/ExprLexer.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.ATN = require('./ATN').ATN;\nexports.ATNDeserializer = require('./ATNDeserializer').ATNDeserializer;\nexports.LexerATNSimulator = require('./LexerATNSimulator').LexerATNSimulator;\nexports.ParserATNSimulator = require('./ParserATNSimulator').ParserATNSimulator;\nexports.PredictionMode = require('./PredictionMode').PredictionMode;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/index.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\nvar Set = require('./Utils').Set;\nvar BitSet = require('./Utils').BitSet;\nvar Token = require('./Token').Token;\nvar ATNConfig = require('./atn/ATNConfig').ATNConfig;\nvar Interval = require('./IntervalSet').Interval;\nvar IntervalSet = require('./IntervalSet').IntervalSet;\nvar RuleStopState = require('./atn/ATNState').RuleStopState;\nvar RuleTransition = require('./atn/Transition').RuleTransition;\nvar NotSetTransition = require('./atn/Transition').NotSetTransition;\nvar WildcardTransition = require('./atn/Transition').WildcardTransition;\nvar AbstractPredicateTransition = require('./atn/Transition').AbstractPredicateTransition;\n\nvar pc = require('./PredictionContext');\nvar predictionContextFromRuleContext = pc.predictionContextFromRuleContext;\nvar PredictionContext = pc.PredictionContext;\nvar SingletonPredictionContext = pc.SingletonPredictionContext;\n\nfunction LL1Analyzer (atn) {\n    this.atn = atn;\n}\n\n//* Special value added to the lookahead sets to indicate that we hit\n//  a predicate during analysis if {@code seeThruPreds==false}.\n///\nLL1Analyzer.HIT_PRED = Token.INVALID_TYPE;\n\n\n//*\n// Calculates the SLL(1) expected lookahead set for each outgoing transition\n// of an {@link ATNState}. The returned array has one element for each\n// outgoing transition in {@code s}. If the closure from transition\n// <em>i</em> leads to a semantic predicate before matching a symbol, the\n// element at index <em>i</em> of the result will be {@code null}.\n//\n// @param s the ATN state\n// @return the expected symbols for each outgoing transition of {@code s}.\n///\nLL1Analyzer.prototype.getDecisionLookahead = function(s) {\n    if (s === null) {\n        return null;\n    }\n    var count = s.transitions.length;\n    var look = [];\n    for(var alt=0; alt< count; alt++) {\n        look[alt] = new IntervalSet();\n        var lookBusy = new Set();\n        var seeThruPreds = false; // fail to get lookahead upon pred\n        this._LOOK(s.transition(alt).target, null, PredictionContext.EMPTY,\n              look[alt], lookBusy, new BitSet(), seeThruPreds, false);\n        // Wipe out lookahead for this alternative if we found nothing\n        // or we had a predicate when we !seeThruPreds\n        if (look[alt].length===0 || look[alt].contains(LL1Analyzer.HIT_PRED)) {\n            look[alt] = null;\n        }\n    }\n    return look;\n};\n\n//*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and the end of the rule containing\n// {@code s} is reached, {@link Token//EPSILON} is added to the result set.\n// If {@code ctx} is not {@code null} and the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx the complete parser context, or {@code null} if the context\n// should be ignored\n//\n// @return The set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n///\nLL1Analyzer.prototype.LOOK = function(s, stopState, ctx) {\n    var r = new IntervalSet();\n    var seeThruPreds = true; // ignore preds; get all lookahead\n\tctx = ctx || null;\n    var lookContext = ctx!==null ? predictionContextFromRuleContext(s.atn, ctx) : null;\n    this._LOOK(s, stopState, lookContext, r, new Set(), new BitSet(), seeThruPreds, true);\n    return r;\n};\n\n//*\n// Compute set of tokens that can follow {@code s} in the ATN in the\n// specified {@code ctx}.\n//\n// <p>If {@code ctx} is {@code null} and {@code stopState} or the end of the\n// rule containing {@code s} is reached, {@link Token//EPSILON} is added to\n// the result set. If {@code ctx} is not {@code null} and {@code addEOF} is\n// {@code true} and {@code stopState} or the end of the outermost rule is\n// reached, {@link Token//EOF} is added to the result set.</p>\n//\n// @param s the ATN state.\n// @param stopState the ATN state to stop at. This can be a\n// {@link BlockEndState} to detect epsilon paths through a closure.\n// @param ctx The outer context, or {@code null} if the outer context should\n// not be used.\n// @param look The result lookahead set.\n// @param lookBusy A set used for preventing epsilon closures in the ATN\n// from causing a stack overflow. Outside code should pass\n// {@code new Set<ATNConfig>} for this argument.\n// @param calledRuleStack A set used for preventing left recursion in the\n// ATN from causing a stack overflow. Outside code should pass\n// {@code new BitSet()} for this argument.\n// @param seeThruPreds {@code true} to true semantic predicates as\n// implicitly {@code true} and \"see through them\", otherwise {@code false}\n// to treat semantic predicates as opaque and add {@link //HIT_PRED} to the\n// result if one is encountered.\n// @param addEOF Add {@link Token//EOF} to the result if the end of the\n// outermost context is reached. This parameter has no effect if {@code ctx}\n// is {@code null}.\n///\nLL1Analyzer.prototype._LOOK = function(s, stopState , ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF) {\n    var c = new ATNConfig({state:s, alt:0, context: ctx}, null);\n    if (lookBusy.contains(c)) {\n        return;\n    }\n    lookBusy.add(c);\n    if (s === stopState) {\n        if (ctx ===null) {\n            look.addOne(Token.EPSILON);\n            return;\n        } else if (ctx.isEmpty() && addEOF) {\n            look.addOne(Token.EOF);\n            return;\n        }\n    }\n    if (s instanceof RuleStopState ) {\n        if (ctx ===null) {\n            look.addOne(Token.EPSILON);\n            return;\n        } else if (ctx.isEmpty() && addEOF) {\n            look.addOne(Token.EOF);\n            return;\n        }\n        if (ctx !== PredictionContext.EMPTY) {\n            // run thru all possible stack tops in ctx\n            for(var i=0; i<ctx.length; i++) {\n                var returnState = this.atn.states[ctx.getReturnState(i)];\n                var removed = calledRuleStack.contains(returnState.ruleIndex);\n                try {\n                    calledRuleStack.remove(returnState.ruleIndex);\n                    this._LOOK(returnState, stopState, ctx.getParent(i), look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n                } finally {\n                    if (removed) {\n                        calledRuleStack.add(returnState.ruleIndex);\n                    }\n                }\n            }\n            return;\n        }\n    }\n    for(var j=0; j<s.transitions.length; j++) {\n        var t = s.transitions[j];\n        if (t.constructor === RuleTransition) {\n            if (calledRuleStack.contains(t.target.ruleIndex)) {\n                continue;\n            }\n            var newContext = SingletonPredictionContext.create(ctx, t.followState.stateNumber);\n            try {\n                calledRuleStack.add(t.target.ruleIndex);\n                this._LOOK(t.target, stopState, newContext, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } finally {\n                calledRuleStack.remove(t.target.ruleIndex);\n            }\n        } else if (t instanceof AbstractPredicateTransition ) {\n            if (seeThruPreds) {\n                this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n            } else {\n                look.addOne(LL1Analyzer.HIT_PRED);\n            }\n        } else if( t.isEpsilon) {\n            this._LOOK(t.target, stopState, ctx, look, lookBusy, calledRuleStack, seeThruPreds, addEOF);\n        } else if (t.constructor === WildcardTransition) {\n            look.addRange( Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType );\n        } else {\n            var set = t.label;\n            if (set !== null) {\n                if (t instanceof NotSetTransition) {\n                    set = set.complement(Token.MIN_USER_TOKEN_TYPE, this.atn.maxTokenType);\n                }\n                look.addSet(set);\n            }\n        }\n    }\n};\n\nexports.LL1Analyzer = LL1Analyzer;\n\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/LL1Analyzer.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// Represents the type of recognizer an ATN applies to.\n\nfunction ATNType() {\n\n}\n\nATNType.LEXER = 0;\nATNType.PARSER = 1;\n\nexports.ATNType = ATNType;\n\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ATNType.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// When we hit an accept state in either the DFA or the ATN, we\n//  have to notify the character stream to start buffering characters\n//  via {@link IntStream//mark} and record the current state. The current sim state\n//  includes the current index into the input, the current line,\n//  and current character position in that line. Note that the Lexer is\n//  tracking the starting line and characterization of the token. These\n//  variables track the \"state\" of the simulator when it hits an accept state.\n//\n//  <p>We track these variables separately for the DFA and ATN simulation\n//  because the DFA simulation often has to fail over to the ATN\n//  simulation. If the ATN simulation fails, we need the DFA to fall\n//  back to its previously accepted state, if any. If the ATN succeeds,\n//  then the ATN does the accept and the DFA simulator that invoked it\n//  can simply return the predicted token type.</p>\n///\n\nvar Token = require('./../Token').Token;\nvar Lexer = require('./../Lexer').Lexer;\nvar ATN = require('./ATN').ATN;\nvar ATNSimulator = require('./ATNSimulator').ATNSimulator;\nvar DFAState = require('./../dfa/DFAState').DFAState;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar OrderedATNConfigSet = require('./ATNConfigSet').OrderedATNConfigSet;\nvar PredictionContext = require('./../PredictionContext').PredictionContext;\nvar SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;\nvar RuleStopState = require('./ATNState').RuleStopState;\nvar LexerATNConfig = require('./ATNConfig').LexerATNConfig;\nvar Transition = require('./Transition').Transition;\nvar LexerActionExecutor = require('./LexerActionExecutor').LexerActionExecutor;\nvar LexerNoViableAltException = require('./../error/Errors').LexerNoViableAltException;\n\nfunction resetSimState(sim) {\n\tsim.index = -1;\n\tsim.line = 0;\n\tsim.column = -1;\n\tsim.dfaState = null;\n}\n\nfunction SimState() {\n\tresetSimState(this);\n\treturn this;\n}\n\nSimState.prototype.reset = function() {\n\tresetSimState(this);\n};\n\nfunction LexerATNSimulator(recog, atn, decisionToDFA, sharedContextCache) {\n\tATNSimulator.call(this, atn, sharedContextCache);\n\tthis.decisionToDFA = decisionToDFA;\n\tthis.recog = recog;\n\t// The current token's starting index into the character stream.\n\t// Shared across DFA to ATN simulation in case the ATN fails and the\n\t// DFA did not have a previous accept state. In this case, we use the\n\t// ATN-generated exception object.\n\tthis.startIndex = -1;\n\t// line number 1..n within the input///\n\tthis.line = 1;\n\t// The index of the character relative to the beginning of the line\n\t// 0..n-1///\n\tthis.column = 0;\n\tthis.mode = Lexer.DEFAULT_MODE;\n\t// Used during DFA/ATN exec to record the most recent accept configuration\n\t// info\n\tthis.prevAccept = new SimState();\n\t// done\n\treturn this;\n}\n\nLexerATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nLexerATNSimulator.prototype.constructor = LexerATNSimulator;\n\nLexerATNSimulator.debug = false;\nLexerATNSimulator.dfa_debug = false;\n\nLexerATNSimulator.MIN_DFA_EDGE = 0;\nLexerATNSimulator.MAX_DFA_EDGE = 127; // forces unicode to stay in ATN\n\nLexerATNSimulator.match_calls = 0;\n\nLexerATNSimulator.prototype.copyState = function(simulator) {\n\tthis.column = simulator.column;\n\tthis.line = simulator.line;\n\tthis.mode = simulator.mode;\n\tthis.startIndex = simulator.startIndex;\n};\n\nLexerATNSimulator.prototype.match = function(input, mode) {\n\tthis.match_calls += 1;\n\tthis.mode = mode;\n\tvar mark = input.mark();\n\ttry {\n\t\tthis.startIndex = input.index;\n\t\tthis.prevAccept.reset();\n\t\tvar dfa = this.decisionToDFA[mode];\n\t\tif (dfa.s0 === null) {\n\t\t\treturn this.matchATN(input);\n\t\t} else {\n\t\t\treturn this.execATN(input, dfa.s0);\n\t\t}\n\t} finally {\n\t\tinput.release(mark);\n\t}\n};\n\nLexerATNSimulator.prototype.reset = function() {\n\tthis.prevAccept.reset();\n\tthis.startIndex = -1;\n\tthis.line = 1;\n\tthis.column = 0;\n\tthis.mode = Lexer.DEFAULT_MODE;\n};\n\nLexerATNSimulator.prototype.matchATN = function(input) {\n\tvar startState = this.atn.modeToStartState[this.mode];\n\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"matchATN mode \" + this.mode + \" start: \" + startState);\n\t}\n\tvar old_mode = this.mode;\n\tvar s0_closure = this.computeStartState(input, startState);\n\tvar suppressEdge = s0_closure.hasSemanticContext;\n\ts0_closure.hasSemanticContext = false;\n\n\tvar next = this.addDFAState(s0_closure);\n\tif (!suppressEdge) {\n\t\tthis.decisionToDFA[this.mode].s0 = next;\n\t}\n\n\tvar predict = this.execATN(input, next);\n\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"DFA after matchATN: \" + this.decisionToDFA[old_mode].toLexerString());\n\t}\n\treturn predict;\n};\n\nLexerATNSimulator.prototype.execATN = function(input, ds0) {\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"start state closure=\" + ds0.configs);\n\t}\n\tif (ds0.isAcceptState) {\n\t\t// allow zero-length tokens\n\t\tthis.captureSimState(this.prevAccept, input, ds0);\n\t}\n\tvar t = input.LA(1);\n\tvar s = ds0; // s is current/from DFA state\n\n\twhile (true) { // while more work\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"execATN loop starting closure: \" + s.configs);\n\t\t}\n\n\t\t// As we move src->trg, src->trg, we keep track of the previous trg to\n\t\t// avoid looking up the DFA state again, which is expensive.\n\t\t// If the previous target was already part of the DFA, we might\n\t\t// be able to avoid doing a reach operation upon t. If s!=null,\n\t\t// it means that semantic predicates didn't prevent us from\n\t\t// creating a DFA state. Once we know s!=null, we check to see if\n\t\t// the DFA state has an edge already for t. If so, we can just reuse\n\t\t// it's configuration set; there's no point in re-computing it.\n\t\t// This is kind of like doing DFA simulation within the ATN\n\t\t// simulation because DFA simulation is really just a way to avoid\n\t\t// computing reach/closure sets. Technically, once we know that\n\t\t// we have a previously added DFA state, we could jump over to\n\t\t// the DFA simulator. But, that would mean popping back and forth\n\t\t// a lot and making things more complicated algorithmically.\n\t\t// This optimization makes a lot of sense for loops within DFA.\n\t\t// A character will take us back to an existing DFA state\n\t\t// that already has lots of edges out of it. e.g., .* in comments.\n\t\t// print(\"Target for:\" + str(s) + \" and:\" + str(t))\n\t\tvar target = this.getExistingTargetState(s, t);\n\t\t// print(\"Existing:\" + str(target))\n\t\tif (target === null) {\n\t\t\ttarget = this.computeTargetState(input, s, t);\n\t\t\t// print(\"Computed:\" + str(target))\n\t\t}\n\t\tif (target === ATNSimulator.ERROR) {\n\t\t\tbreak;\n\t\t}\n\t\t// If this is a consumable input element, make sure to consume before\n\t\t// capturing the accept state so the input index, line, and char\n\t\t// position accurately reflect the state of the interpreter at the\n\t\t// end of the token.\n\t\tif (t !== Token.EOF) {\n\t\t\tthis.consume(input);\n\t\t}\n\t\tif (target.isAcceptState) {\n\t\t\tthis.captureSimState(this.prevAccept, input, target);\n\t\t\tif (t === Token.EOF) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tt = input.LA(1);\n\t\ts = target; // flip; current DFA target becomes new src/from state\n\t}\n\treturn this.failOrAccept(this.prevAccept, input, s.configs, t);\n};\n\n// Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param s The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\nLexerATNSimulator.prototype.getExistingTargetState = function(s, t) {\n\tif (s.edges === null || t < LexerATNSimulator.MIN_DFA_EDGE || t > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\treturn null;\n\t}\n\n\tvar target = s.edges[t - LexerATNSimulator.MIN_DFA_EDGE];\n\tif(target===undefined) {\n\t\ttarget = null;\n\t}\n\tif (LexerATNSimulator.debug && target !== null) {\n\t\tconsole.log(\"reuse state \" + s.stateNumber + \" edge to \" + target.stateNumber);\n\t}\n\treturn target;\n};\n\n// Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param input The input stream\n// @param s The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\nLexerATNSimulator.prototype.computeTargetState = function(input, s, t) {\n\tvar reach = new OrderedATNConfigSet();\n\t// if we don't find an existing DFA state\n\t// Fill reach starting from closure, following t transitions\n\tthis.getReachableConfigSet(input, s.configs, reach, t);\n\n\tif (reach.items.length === 0) { // we got nowhere on t from s\n\t\tif (!reach.hasSemanticContext) {\n\t\t\t// we got nowhere on t, don't throw out this knowledge; it'd\n\t\t\t// cause a failover from DFA later.\n\t\t\tthis.addDFAEdge(s, t, ATNSimulator.ERROR);\n\t\t}\n\t\t// stop when we can't match any more char\n\t\treturn ATNSimulator.ERROR;\n\t}\n\t// Add an edge from s to target DFA found/created for reach\n\treturn this.addDFAEdge(s, t, null, reach);\n};\n\nLexerATNSimulator.prototype.failOrAccept = function(prevAccept, input, reach, t) {\n\tif (this.prevAccept.dfaState !== null) {\n\t\tvar lexerActionExecutor = prevAccept.dfaState.lexerActionExecutor;\n\t\tthis.accept(input, lexerActionExecutor, this.startIndex,\n\t\t\t\tprevAccept.index, prevAccept.line, prevAccept.column);\n\t\treturn prevAccept.dfaState.prediction;\n\t} else {\n\t\t// if no accept and EOF is first char, return EOF\n\t\tif (t === Token.EOF && input.index === this.startIndex) {\n\t\t\treturn Token.EOF;\n\t\t}\n\t\tthrow new LexerNoViableAltException(this.recog, input, this.startIndex, reach);\n\t}\n};\n\n// Given a starting configuration set, figure out all ATN configurations\n// we can reach upon input {@code t}. Parameter {@code reach} is a return\n// parameter.\nLexerATNSimulator.prototype.getReachableConfigSet = function(input, closure,\n\t\treach, t) {\n\t// this is used to skip processing for configs which have a lower priority\n\t// than a config that already reached an accept state for the same rule\n\tvar skipAlt = ATN.INVALID_ALT_NUMBER;\n\tfor (var i = 0; i < closure.items.length; i++) {\n\t\tvar cfg = closure.items[i];\n\t\tvar currentAltReachedAcceptState = (cfg.alt === skipAlt);\n\t\tif (currentAltReachedAcceptState && cfg.passedThroughNonGreedyDecision) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"testing %s at %s\\n\", this.getTokenName(t), cfg\n\t\t\t\t\t.toString(this.recog, true));\n\t\t}\n\t\tfor (var j = 0; j < cfg.state.transitions.length; j++) {\n\t\t\tvar trans = cfg.state.transitions[j]; // for each transition\n\t\t\tvar target = this.getReachableTarget(trans, t);\n\t\t\tif (target !== null) {\n\t\t\t\tvar lexerActionExecutor = cfg.lexerActionExecutor;\n\t\t\t\tif (lexerActionExecutor !== null) {\n\t\t\t\t\tlexerActionExecutor = lexerActionExecutor.fixOffsetBeforeMatch(input.index - this.startIndex);\n\t\t\t\t}\n\t\t\t\tvar treatEofAsEpsilon = (t === Token.EOF);\n\t\t\t\tvar config = new LexerATNConfig({state:target, lexerActionExecutor:lexerActionExecutor}, cfg);\n\t\t\t\tif (this.closure(input, config, reach,\n\t\t\t\t\t\tcurrentAltReachedAcceptState, true, treatEofAsEpsilon)) {\n\t\t\t\t\t// any remaining configs for this alt have a lower priority\n\t\t\t\t\t// than the one that just reached an accept state.\n\t\t\t\t\tskipAlt = cfg.alt;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\nLexerATNSimulator.prototype.accept = function(input, lexerActionExecutor,\n\t\tstartIndex, index, line, charPos) {\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"ACTION %s\\n\", lexerActionExecutor);\n\t}\n\t// seek to after last char in token\n\tinput.seek(index);\n\tthis.line = line;\n\tthis.column = charPos;\n\tif (lexerActionExecutor !== null && this.recog !== null) {\n\t\tlexerActionExecutor.execute(this.recog, input, startIndex);\n\t}\n};\n\nLexerATNSimulator.prototype.getReachableTarget = function(trans, t) {\n\tif (trans.matches(t, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\treturn trans.target;\n\t} else {\n\t\treturn null;\n\t}\n};\n\nLexerATNSimulator.prototype.computeStartState = function(input, p) {\n\tvar initialContext = PredictionContext.EMPTY;\n\tvar configs = new OrderedATNConfigSet();\n\tfor (var i = 0; i < p.transitions.length; i++) {\n\t\tvar target = p.transitions[i].target;\n        var cfg = new LexerATNConfig({state:target, alt:i+1, context:initialContext}, null);\n\t\tthis.closure(input, cfg, configs, false, false, false);\n\t}\n\treturn configs;\n};\n\n// Since the alternatives within any lexer decision are ordered by\n// preference, this method stops pursuing the closure as soon as an accept\n// state is reached. After the first accept state is reached by depth-first\n// search from {@code config}, all other (potentially reachable) states for\n// this rule would have a lower priority.\n//\n// @return {@code true} if an accept state is reached, otherwise\n// {@code false}.\nLexerATNSimulator.prototype.closure = function(input, config, configs,\n\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon) {\n\tvar cfg = null;\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"closure(\" + config.toString(this.recog, true) + \")\");\n\t}\n\tif (config.state instanceof RuleStopState) {\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tif (this.recog !== null) {\n\t\t\t\tconsole.log(\"closure at %s rule stop %s\\n\", this.recog.ruleNames[config.state.ruleIndex], config);\n\t\t\t} else {\n\t\t\t\tconsole.log(\"closure at rule stop %s\\n\", config);\n\t\t\t}\n\t\t}\n\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\tif (config.context === null || config.context.isEmpty()) {\n\t\t\t\tconfigs.add(config);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconfigs.add(new LexerATNConfig({ state:config.state, context:PredictionContext.EMPTY}, config));\n\t\t\t\tcurrentAltReachedAcceptState = true;\n\t\t\t}\n\t\t}\n\t\tif (config.context !== null && !config.context.isEmpty()) {\n\t\t\tfor (var i = 0; i < config.context.length; i++) {\n\t\t\t\tif (config.context.getReturnState(i) !== PredictionContext.EMPTY_RETURN_STATE) {\n\t\t\t\t\tvar newContext = config.context.getParent(i); // \"pop\" return state\n\t\t\t\t\tvar returnState = this.atn.states[config.context.getReturnState(i)];\n\t\t\t\t\tcfg = new LexerATNConfig({ state:returnState, context:newContext }, config);\n\t\t\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg,\n\t\t\t\t\t\t\tconfigs, currentAltReachedAcceptState, speculative,\n\t\t\t\t\t\t\ttreatEofAsEpsilon);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn currentAltReachedAcceptState;\n\t}\n\t// optimization\n\tif (!config.state.epsilonOnlyTransitions) {\n\t\tif (!currentAltReachedAcceptState || !config.passedThroughNonGreedyDecision) {\n\t\t\tconfigs.add(config);\n\t\t}\n\t}\n\tfor (var j = 0; j < config.state.transitions.length; j++) {\n\t\tvar trans = config.state.transitions[j];\n\t\tcfg = this.getEpsilonTarget(input, config, trans, configs, speculative, treatEofAsEpsilon);\n\t\tif (cfg !== null) {\n\t\t\tcurrentAltReachedAcceptState = this.closure(input, cfg, configs,\n\t\t\t\t\tcurrentAltReachedAcceptState, speculative, treatEofAsEpsilon);\n\t\t}\n\t}\n\treturn currentAltReachedAcceptState;\n};\n\n// side-effect: can alter configs.hasSemanticContext\nLexerATNSimulator.prototype.getEpsilonTarget = function(input, config, trans,\n\t\tconfigs, speculative, treatEofAsEpsilon) {\n\tvar cfg = null;\n\tif (trans.serializationType === Transition.RULE) {\n\t\tvar newContext = SingletonPredictionContext.create(config.context, trans.followState.stateNumber);\n\t\tcfg = new LexerATNConfig( { state:trans.target, context:newContext}, config);\n\t} else if (trans.serializationType === Transition.PRECEDENCE) {\n\t\tthrow \"Precedence predicates are not supported in lexers.\";\n\t} else if (trans.serializationType === Transition.PREDICATE) {\n\t\t// Track traversing semantic predicates. If we traverse,\n\t\t// we cannot add a DFA state for this \"reach\" computation\n\t\t// because the DFA would not test the predicate again in the\n\t\t// future. Rather than creating collections of semantic predicates\n\t\t// like v3 and testing them on prediction, v4 will test them on the\n\t\t// fly all the time using the ATN not the DFA. This is slower but\n\t\t// semantically it's not used that often. One of the key elements to\n\t\t// this predicate mechanism is not adding DFA states that see\n\t\t// predicates immediately afterwards in the ATN. For example,\n\n\t\t// a : ID {p1}? | ID {p2}? ;\n\n\t\t// should create the start state for rule 'a' (to save start state\n\t\t// competition), but should not create target of ID state. The\n\t\t// collection of ATN states the following ID references includes\n\t\t// states reached by traversing predicates. Since this is when we\n\t\t// test them, we cannot cash the DFA state target of ID.\n\n\t\tif (LexerATNSimulator.debug) {\n\t\t\tconsole.log(\"EVAL rule \" + trans.ruleIndex + \":\" + trans.predIndex);\n\t\t}\n\t\tconfigs.hasSemanticContext = true;\n\t\tif (this.evaluatePredicate(input, trans.ruleIndex, trans.predIndex, speculative)) {\n\t\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t\t}\n\t} else if (trans.serializationType === Transition.ACTION) {\n\t\tif (config.context === null || config.context.hasEmptyPath()) {\n\t\t\t// execute actions anywhere in the start rule for a token.\n\t\t\t//\n\t\t\t// TODO: if the entry rule is invoked recursively, some\n\t\t\t// actions may be executed during the recursive call. The\n\t\t\t// problem can appear when hasEmptyPath() is true but\n\t\t\t// isEmpty() is false. In this case, the config needs to be\n\t\t\t// split into two contexts - one with just the empty path\n\t\t\t// and another with everything but the empty path.\n\t\t\t// Unfortunately, the current algorithm does not allow\n\t\t\t// getEpsilonTarget to return two configurations, so\n\t\t\t// additional modifications are needed before we can support\n\t\t\t// the split operation.\n\t\t\tvar lexerActionExecutor = LexerActionExecutor.append(config.lexerActionExecutor,\n\t\t\t\t\tthis.atn.lexerActions[trans.actionIndex]);\n\t\t\tcfg = new LexerATNConfig({ state:trans.target, lexerActionExecutor:lexerActionExecutor }, config);\n\t\t} else {\n\t\t\t// ignore actions in referenced rules\n\t\t\tcfg = new LexerATNConfig( { state:trans.target}, config);\n\t\t}\n\t} else if (trans.serializationType === Transition.EPSILON) {\n\t\tcfg = new LexerATNConfig({ state:trans.target}, config);\n\t} else if (trans.serializationType === Transition.ATOM ||\n\t\t\t\ttrans.serializationType === Transition.RANGE ||\n\t\t\t\ttrans.serializationType === Transition.SET) {\n\t\tif (treatEofAsEpsilon) {\n\t\t\tif (trans.matches(Token.EOF, 0, Lexer.MAX_CHAR_VALUE)) {\n\t\t\t\tcfg = new LexerATNConfig( { state:trans.target }, config);\n\t\t\t}\n\t\t}\n\t}\n\treturn cfg;\n};\n\n// Evaluate a predicate specified in the lexer.\n//\n// <p>If {@code speculative} is {@code true}, this method was called before\n// {@link //consume} for the matched character. This method should call\n// {@link //consume} before evaluating the predicate to ensure position\n// sensitive values, including {@link Lexer//getText}, {@link Lexer//getLine},\n// and {@link Lexer//getcolumn}, properly reflect the current\n// lexer state. This method should restore {@code input} and the simulator\n// to the original state before returning (i.e. undo the actions made by the\n// call to {@link //consume}.</p>\n//\n// @param input The input stream.\n// @param ruleIndex The rule containing the predicate.\n// @param predIndex The index of the predicate within the rule.\n// @param speculative {@code true} if the current index in {@code input} is\n// one character before the predicate's location.\n//\n// @return {@code true} if the specified predicate evaluates to\n// {@code true}.\n// /\nLexerATNSimulator.prototype.evaluatePredicate = function(input, ruleIndex,\n\t\tpredIndex, speculative) {\n\t// assume true if no recognizer was provided\n\tif (this.recog === null) {\n\t\treturn true;\n\t}\n\tif (!speculative) {\n\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t}\n\tvar savedcolumn = this.column;\n\tvar savedLine = this.line;\n\tvar index = input.index;\n\tvar marker = input.mark();\n\ttry {\n\t\tthis.consume(input);\n\t\treturn this.recog.sempred(null, ruleIndex, predIndex);\n\t} finally {\n\t\tthis.column = savedcolumn;\n\t\tthis.line = savedLine;\n\t\tinput.seek(index);\n\t\tinput.release(marker);\n\t}\n};\n\nLexerATNSimulator.prototype.captureSimState = function(settings, input, dfaState) {\n\tsettings.index = input.index;\n\tsettings.line = this.line;\n\tsettings.column = this.column;\n\tsettings.dfaState = dfaState;\n};\n\nLexerATNSimulator.prototype.addDFAEdge = function(from_, tk, to, cfgs) {\n\tif (to === undefined) {\n\t\tto = null;\n\t}\n\tif (cfgs === undefined) {\n\t\tcfgs = null;\n\t}\n\tif (to === null && cfgs !== null) {\n\t\t// leading to this call, ATNConfigSet.hasSemanticContext is used as a\n\t\t// marker indicating dynamic predicate evaluation makes this edge\n\t\t// dependent on the specific input sequence, so the static edge in the\n\t\t// DFA should be omitted. The target DFAState is still created since\n\t\t// execATN has the ability to resynchronize with the DFA state cache\n\t\t// following the predicate evaluation step.\n\t\t//\n\t\t// TJP notes: next time through the DFA, we see a pred again and eval.\n\t\t// If that gets us to a previously created (but dangling) DFA\n\t\t// state, we can continue in pure DFA mode from there.\n\t\t// /\n\t\tvar suppressEdge = cfgs.hasSemanticContext;\n\t\tcfgs.hasSemanticContext = false;\n\n\t\tto = this.addDFAState(cfgs);\n\n\t\tif (suppressEdge) {\n\t\t\treturn to;\n\t\t}\n\t}\n\t// add the edge\n\tif (tk < LexerATNSimulator.MIN_DFA_EDGE || tk > LexerATNSimulator.MAX_DFA_EDGE) {\n\t\t// Only track edges within the DFA bounds\n\t\treturn to;\n\t}\n\tif (LexerATNSimulator.debug) {\n\t\tconsole.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + tk);\n\t}\n\tif (from_.edges === null) {\n\t\t// make room for tokens 1..n and -1 masquerading as index 0\n\t\tfrom_.edges = [];\n\t}\n\tfrom_.edges[tk - LexerATNSimulator.MIN_DFA_EDGE] = to; // connect\n\n\treturn to;\n};\n\n// Add a new DFA state if there isn't one with this set of\n// configurations already. This method also detects the first\n// configuration containing an ATN rule stop state. Later, when\n// traversing the DFA, we will know which rule to accept.\nLexerATNSimulator.prototype.addDFAState = function(configs) {\n\tvar proposed = new DFAState(null, configs);\n\tvar firstConfigWithRuleStopState = null;\n\tfor (var i = 0; i < configs.items.length; i++) {\n\t\tvar cfg = configs.items[i];\n\t\tif (cfg.state instanceof RuleStopState) {\n\t\t\tfirstConfigWithRuleStopState = cfg;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (firstConfigWithRuleStopState !== null) {\n\t\tproposed.isAcceptState = true;\n\t\tproposed.lexerActionExecutor = firstConfigWithRuleStopState.lexerActionExecutor;\n\t\tproposed.prediction = this.atn.ruleToTokenType[firstConfigWithRuleStopState.state.ruleIndex];\n\t}\n\tvar dfa = this.decisionToDFA[this.mode];\n\tvar existing = dfa.states.get(proposed);\n\tif (existing!==null) {\n\t\treturn existing;\n\t}\n\tvar newState = proposed;\n\tnewState.stateNumber = dfa.states.length;\n\tconfigs.setReadonly(true);\n\tnewState.configs = configs;\n\tdfa.states.add(newState);\n\treturn newState;\n};\n\nLexerATNSimulator.prototype.getDFA = function(mode) {\n\treturn this.decisionToDFA[mode];\n};\n\n// Get the text matched so far for the current token.\nLexerATNSimulator.prototype.getText = function(input) {\n\t// index is first lookahead char, don't include.\n\treturn input.getText(this.startIndex, input.index - 1);\n};\n\nLexerATNSimulator.prototype.consume = function(input) {\n\tvar curChar = input.LA(1);\n\tif (curChar === \"\\n\".charCodeAt(0)) {\n\t\tthis.line += 1;\n\t\tthis.column = 0;\n\t} else {\n\t\tthis.column += 1;\n\t}\n\tinput.consume();\n};\n\nLexerATNSimulator.prototype.getTokenName = function(tt) {\n\tif (tt === -1) {\n\t\treturn \"EOF\";\n\t} else {\n\t\treturn \"'\" + String.fromCharCode(tt) + \"'\";\n\t}\n};\n\nexports.LexerATNSimulator = LexerATNSimulator;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/LexerATNSimulator.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n///\n\n// Represents an executor for a sequence of lexer actions which traversed during\n// the matching operation of a lexer rule (token).\n//\n// <p>The executor tracks position information for position-dependent lexer actions\n// efficiently, ensuring that actions appearing only at the end of the rule do\n// not cause bloating of the {@link DFA} created for the lexer.</p>\n\nvar hashStuff = require(\"../Utils\").hashStuff;\nvar LexerIndexedCustomAction = require('./LexerAction').LexerIndexedCustomAction;\n\nfunction LexerActionExecutor(lexerActions) {\n\tthis.lexerActions = lexerActions === null ? [] : lexerActions;\n\t// Caches the result of {@link //hashCode} since the hash code is an element\n\t// of the performance-critical {@link LexerATNConfig//hashCode} operation.\n\tthis.cachedHashCode = hashStuff(lexerActions); // \"\".join([str(la) for la in\n\t// lexerActions]))\n\treturn this;\n}\n\n// Creates a {@link LexerActionExecutor} which executes the actions for\n// the input {@code lexerActionExecutor} followed by a specified\n// {@code lexerAction}.\n//\n// @param lexerActionExecutor The executor for actions already traversed by\n// the lexer while matching a token within a particular\n// {@link LexerATNConfig}. If this is {@code null}, the method behaves as\n// though it were an empty executor.\n// @param lexerAction The lexer action to execute after the actions\n// specified in {@code lexerActionExecutor}.\n//\n// @return A {@link LexerActionExecutor} for executing the combine actions\n// of {@code lexerActionExecutor} and {@code lexerAction}.\nLexerActionExecutor.append = function(lexerActionExecutor, lexerAction) {\n\tif (lexerActionExecutor === null) {\n\t\treturn new LexerActionExecutor([ lexerAction ]);\n\t}\n\tvar lexerActions = lexerActionExecutor.lexerActions.concat([ lexerAction ]);\n\treturn new LexerActionExecutor(lexerActions);\n};\n\n// Creates a {@link LexerActionExecutor} which encodes the current offset\n// for position-dependent lexer actions.\n//\n// <p>Normally, when the executor encounters lexer actions where\n// {@link LexerAction//isPositionDependent} returns {@code true}, it calls\n// {@link IntStream//seek} on the input {@link CharStream} to set the input\n// position to the <em>end</em> of the current token. This behavior provides\n// for efficient DFA representation of lexer actions which appear at the end\n// of a lexer rule, even when the lexer rule matches a variable number of\n// characters.</p>\n//\n// <p>Prior to traversing a match transition in the ATN, the current offset\n// from the token start index is assigned to all position-dependent lexer\n// actions which have not already been assigned a fixed offset. By storing\n// the offsets relative to the token start index, the DFA representation of\n// lexer actions which appear in the middle of tokens remains efficient due\n// to sharing among tokens of the same length, regardless of their absolute\n// position in the input stream.</p>\n//\n// <p>If the current executor already has offsets assigned to all\n// position-dependent lexer actions, the method returns {@code this}.</p>\n//\n// @param offset The current offset to assign to all position-dependent\n// lexer actions which do not already have offsets assigned.\n//\n// @return A {@link LexerActionExecutor} which stores input stream offsets\n// for all position-dependent lexer actions.\n// /\nLexerActionExecutor.prototype.fixOffsetBeforeMatch = function(offset) {\n\tvar updatedLexerActions = null;\n\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\tif (this.lexerActions[i].isPositionDependent &&\n\t\t\t\t!(this.lexerActions[i] instanceof LexerIndexedCustomAction)) {\n\t\t\tif (updatedLexerActions === null) {\n\t\t\t\tupdatedLexerActions = this.lexerActions.concat([]);\n\t\t\t}\n\t\t\tupdatedLexerActions[i] = new LexerIndexedCustomAction(offset,\n\t\t\t\t\tthis.lexerActions[i]);\n\t\t}\n\t}\n\tif (updatedLexerActions === null) {\n\t\treturn this;\n\t} else {\n\t\treturn new LexerActionExecutor(updatedLexerActions);\n\t}\n};\n\n// Execute the actions encapsulated by this executor within the context of a\n// particular {@link Lexer}.\n//\n// <p>This method calls {@link IntStream//seek} to set the position of the\n// {@code input} {@link CharStream} prior to calling\n// {@link LexerAction//execute} on a position-dependent action. Before the\n// method returns, the input position will be restored to the same position\n// it was in when the method was invoked.</p>\n//\n// @param lexer The lexer instance.\n// @param input The input stream which is the source for the current token.\n// When this method is called, the current {@link IntStream//index} for\n// {@code input} should be the start of the following token, i.e. 1\n// character past the end of the current token.\n// @param startIndex The token start index. This value may be passed to\n// {@link IntStream//seek} to set the {@code input} position to the beginning\n// of the token.\n// /\nLexerActionExecutor.prototype.execute = function(lexer, input, startIndex) {\n\tvar requiresSeek = false;\n\tvar stopIndex = input.index;\n\ttry {\n\t\tfor (var i = 0; i < this.lexerActions.length; i++) {\n\t\t\tvar lexerAction = this.lexerActions[i];\n\t\t\tif (lexerAction instanceof LexerIndexedCustomAction) {\n\t\t\t\tvar offset = lexerAction.offset;\n\t\t\t\tinput.seek(startIndex + offset);\n\t\t\t\tlexerAction = lexerAction.action;\n\t\t\t\trequiresSeek = (startIndex + offset) !== stopIndex;\n\t\t\t} else if (lexerAction.isPositionDependent) {\n\t\t\t\tinput.seek(stopIndex);\n\t\t\t\trequiresSeek = false;\n\t\t\t}\n\t\t\tlexerAction.execute(lexer);\n\t\t}\n\t} finally {\n\t\tif (requiresSeek) {\n\t\t\tinput.seek(stopIndex);\n\t\t}\n\t}\n};\n\nLexerActionExecutor.prototype.hashCode = function() {\n\treturn this.cachedHashCode;\n};\n\nLexerActionExecutor.prototype.updateHashCode = function(hash) {\n    hash.update(this.cachedHashCode);\n};\n\n\nLexerActionExecutor.prototype.equals = function(other) {\n\tif (this === other) {\n\t\treturn true;\n\t} else if (!(other instanceof LexerActionExecutor)) {\n\t\treturn false;\n\t} else if (this.cachedHashCode != other.cachedHashCode) {\n\t\treturn false;\n\t} else if (this.lexerActions.length != other.lexerActions.length) {\n\t\treturn false;\n\t} else {\n\t\tvar numActions = this.lexerActions.length\n\t\tfor (var idx = 0; idx < numActions; ++idx) {\n\t\t\tif (!this.lexerActions[idx].equals(other.lexerActions[idx])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n};\n\nexports.LexerActionExecutor = LexerActionExecutor;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/LexerActionExecutor.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// The embodiment of the adaptive LL(*), ALL(*), parsing strategy.\n//\n// <p>\n// The basic complexity of the adaptive strategy makes it harder to understand.\n// We begin with ATN simulation to build paths in a DFA. Subsequent prediction\n// requests go through the DFA first. If they reach a state without an edge for\n// the current symbol, the algorithm fails over to the ATN simulation to\n// complete the DFA path for the current input (until it finds a conflict state\n// or uniquely predicting state).</p>\n//\n// <p>\n// All of that is done without using the outer context because we want to create\n// a DFA that is not dependent upon the rule invocation stack when we do a\n// prediction. One DFA works in all contexts. We avoid using context not\n// necessarily because it's slower, although it can be, but because of the DFA\n// caching problem. The closure routine only considers the rule invocation stack\n// created during prediction beginning in the decision rule. For example, if\n// prediction occurs without invoking another rule's ATN, there are no context\n// stacks in the configurations. When lack of context leads to a conflict, we\n// don't know if it's an ambiguity or a weakness in the strong LL(*) parsing\n// strategy (versus full LL(*)).</p>\n//\n// <p>\n// When SLL yields a configuration set with conflict, we rewind the input and\n// retry the ATN simulation, this time using full outer context without adding\n// to the DFA. Configuration context stacks will be the full invocation stacks\n// from the start rule. If we get a conflict using full context, then we can\n// definitively say we have a true ambiguity for that input sequence. If we\n// don't get a conflict, it implies that the decision is sensitive to the outer\n// context. (It is not context-sensitive in the sense of context-sensitive\n// grammars.)</p>\n//\n// <p>\n// The next time we reach this DFA state with an SLL conflict, through DFA\n// simulation, we will again retry the ATN simulation using full context mode.\n// This is slow because we can't save the results and have to \"interpret\" the\n// ATN each time we get that input.</p>\n//\n// <p>\n// <strong>CACHING FULL CONTEXT PREDICTIONS</strong></p>\n//\n// <p>\n// We could cache results from full context to predicted alternative easily and\n// that saves a lot of time but doesn't work in presence of predicates. The set\n// of visible predicates from the ATN start state changes depending on the\n// context, because closure can fall off the end of a rule. I tried to cache\n// tuples (stack context, semantic context, predicted alt) but it was slower\n// than interpreting and much more complicated. Also required a huge amount of\n// memory. The goal is not to create the world's fastest parser anyway. I'd like\n// to keep this algorithm simple. By launching multiple threads, we can improve\n// the speed of parsing across a large number of files.</p>\n//\n// <p>\n// There is no strict ordering between the amount of input used by SLL vs LL,\n// which makes it really hard to build a cache for full context. Let's say that\n// we have input A B C that leads to an SLL conflict with full context X. That\n// implies that using X we might only use A B but we could also use A B C D to\n// resolve conflict. Input A B C D could predict alternative 1 in one position\n// in the input and A B C E could predict alternative 2 in another position in\n// input. The conflicting SLL configurations could still be non-unique in the\n// full context prediction, which would lead us to requiring more input than the\n// original A B C.\tTo make a\tprediction cache work, we have to track\tthe exact\n// input\tused during the previous prediction. That amounts to a cache that maps\n// X to a specific DFA for that context.</p>\n//\n// <p>\n// Something should be done for left-recursive expression predictions. They are\n// likely LL(1) + pred eval. Easier to do the whole SLL unless error and retry\n// with full LL thing Sam does.</p>\n//\n// <p>\n// <strong>AVOIDING FULL CONTEXT PREDICTION</strong></p>\n//\n// <p>\n// We avoid doing full context retry when the outer context is empty, we did not\n// dip into the outer context by falling off the end of the decision state rule,\n// or when we force SLL mode.</p>\n//\n// <p>\n// As an example of the not dip into outer context case, consider as super\n// constructor calls versus function calls. One grammar might look like\n// this:</p>\n//\n// <pre>\n// ctorBody\n//   : '{' superCall? stat* '}'\n//   ;\n// </pre>\n//\n// <p>\n// Or, you might see something like</p>\n//\n// <pre>\n// stat\n//   : superCall ';'\n//   | expression ';'\n//   | ...\n//   ;\n// </pre>\n//\n// <p>\n// In both cases I believe that no closure operations will dip into the outer\n// context. In the first case ctorBody in the worst case will stop at the '}'.\n// In the 2nd case it should stop at the ';'. Both cases should stay within the\n// entry rule and not dip into the outer context.</p>\n//\n// <p>\n// <strong>PREDICATES</strong></p>\n//\n// <p>\n// Predicates are always evaluated if present in either SLL or LL both. SLL and\n// LL simulation deals with predicates differently. SLL collects predicates as\n// it performs closure operations like ANTLR v3 did. It delays predicate\n// evaluation until it reaches and accept state. This allows us to cache the SLL\n// ATN simulation whereas, if we had evaluated predicates on-the-fly during\n// closure, the DFA state configuration sets would be different and we couldn't\n// build up a suitable DFA.</p>\n//\n// <p>\n// When building a DFA accept state during ATN simulation, we evaluate any\n// predicates and return the sole semantically valid alternative. If there is\n// more than 1 alternative, we report an ambiguity. If there are 0 alternatives,\n// we throw an exception. Alternatives without predicates act like they have\n// true predicates. The simple way to think about it is to strip away all\n// alternatives with false predicates and choose the minimum alternative that\n// remains.</p>\n//\n// <p>\n// When we start in the DFA and reach an accept state that's predicated, we test\n// those and return the minimum semantically viable alternative. If no\n// alternatives are viable, we throw an exception.</p>\n//\n// <p>\n// During full LL ATN simulation, closure always evaluates predicates and\n// on-the-fly. This is crucial to reducing the configuration set size during\n// closure. It hits a landmine when parsing with the Java grammar, for example,\n// without this on-the-fly evaluation.</p>\n//\n// <p>\n// <strong>SHARING DFA</strong></p>\n//\n// <p>\n// All instances of the same parser share the same decision DFAs through a\n// static field. Each instance gets its own ATN simulator but they share the\n// same {@link //decisionToDFA} field. They also share a\n// {@link PredictionContextCache} object that makes sure that all\n// {@link PredictionContext} objects are shared among the DFA states. This makes\n// a big size difference.</p>\n//\n// <p>\n// <strong>THREAD SAFETY</strong></p>\n//\n// <p>\n// The {@link ParserATNSimulator} locks on the {@link //decisionToDFA} field when\n// it adds a new DFA object to that array. {@link //addDFAEdge}\n// locks on the DFA for the current decision when setting the\n// {@link DFAState//edges} field. {@link //addDFAState} locks on\n// the DFA for the current decision when looking up a DFA state to see if it\n// already exists. We must make sure that all requests to add DFA states that\n// are equivalent result in the same shared DFA object. This is because lots of\n// threads will be trying to update the DFA at once. The\n// {@link //addDFAState} method also locks inside the DFA lock\n// but this time on the shared context cache when it rebuilds the\n// configurations' {@link PredictionContext} objects using cached\n// subgraphs/nodes. No other locking occurs, even during DFA simulation. This is\n// safe as long as we can guarantee that all threads referencing\n// {@code s.edge[t]} get the same physical target {@link DFAState}, or\n// {@code null}. Once into the DFA, the DFA simulation does not reference the\n// {@link DFA//states} map. It follows the {@link DFAState//edges} field to new\n// targets. The DFA simulator will either find {@link DFAState//edges} to be\n// {@code null}, to be non-{@code null} and {@code dfa.edges[t]} null, or\n// {@code dfa.edges[t]} to be non-null. The\n// {@link //addDFAEdge} method could be racing to set the field\n// but in either case the DFA simulator works; if {@code null}, and requests ATN\n// simulation. It could also race trying to get {@code dfa.edges[t]}, but either\n// way it will work because it's not doing a test and set operation.</p>\n//\n// <p>\n// <strong>Starting with SLL then failing to combined SLL/LL (Two-Stage\n// Parsing)</strong></p>\n//\n// <p>\n// Sam pointed out that if SLL does not give a syntax error, then there is no\n// point in doing full LL, which is slower. We only have to try LL if we get a\n// syntax error. For maximum speed, Sam starts the parser set to pure SLL\n// mode with the {@link BailErrorStrategy}:</p>\n//\n// <pre>\n// parser.{@link Parser//getInterpreter() getInterpreter()}.{@link //setPredictionMode setPredictionMode}{@code (}{@link PredictionMode//SLL}{@code )};\n// parser.{@link Parser//setErrorHandler setErrorHandler}(new {@link BailErrorStrategy}());\n// </pre>\n//\n// <p>\n// If it does not get a syntax error, then we're done. If it does get a syntax\n// error, we need to retry with the combined SLL/LL strategy.</p>\n//\n// <p>\n// The reason this works is as follows. If there are no SLL conflicts, then the\n// grammar is SLL (at least for that input set). If there is an SLL conflict,\n// the full LL analysis must yield a set of viable alternatives which is a\n// subset of the alternatives reported by SLL. If the LL set is a singleton,\n// then the grammar is LL but not SLL. If the LL set is the same size as the SLL\n// set, the decision is SLL. If the LL set has size &gt; 1, then that decision\n// is truly ambiguous on the current input. If the LL set is smaller, then the\n// SLL conflict resolution might choose an alternative that the full LL would\n// rule out as a possibility based upon better context information. If that's\n// the case, then the SLL parse will definitely get an error because the full LL\n// analysis says it's not viable. If SLL conflict resolution chooses an\n// alternative within the LL set, them both SLL and LL would choose the same\n// alternative because they both choose the minimum of multiple conflicting\n// alternatives.</p>\n//\n// <p>\n// Let's say we have a set of SLL conflicting alternatives {@code {1, 2, 3}} and\n// a smaller LL set called <em>s</em>. If <em>s</em> is {@code {2, 3}}, then SLL\n// parsing will get an error because SLL will pursue alternative 1. If\n// <em>s</em> is {@code {1, 2}} or {@code {1, 3}} then both SLL and LL will\n// choose the same alternative because alternative one is the minimum of either\n// set. If <em>s</em> is {@code {2}} or {@code {3}} then SLL will get a syntax\n// error. If <em>s</em> is {@code {1}} then SLL will succeed.</p>\n//\n// <p>\n// Of course, if the input is invalid, then we will get an error for sure in\n// both SLL and LL parsing. Erroneous input will therefore require 2 passes over\n// the input.</p>\n//\n\nvar Utils = require('./../Utils');\nvar Set = Utils.Set;\nvar BitSet = Utils.BitSet;\nvar DoubleDict = Utils.DoubleDict;\nvar ATN = require('./ATN').ATN;\nvar ATNState = require('./ATNState').ATNState;\nvar ATNConfig = require('./ATNConfig').ATNConfig;\nvar ATNConfigSet = require('./ATNConfigSet').ATNConfigSet;\nvar Token = require('./../Token').Token;\nvar DFAState = require('./../dfa/DFAState').DFAState;\nvar PredPrediction = require('./../dfa/DFAState').PredPrediction;\nvar ATNSimulator = require('./ATNSimulator').ATNSimulator;\nvar PredictionMode = require('./PredictionMode').PredictionMode;\nvar RuleContext = require('./../RuleContext').RuleContext;\nvar ParserRuleContext = require('./../ParserRuleContext').ParserRuleContext;\nvar SemanticContext = require('./SemanticContext').SemanticContext;\nvar StarLoopEntryState = require('./ATNState').StarLoopEntryState;\nvar RuleStopState = require('./ATNState').RuleStopState;\nvar PredictionContext = require('./../PredictionContext').PredictionContext;\nvar Interval = require('./../IntervalSet').Interval;\nvar Transitions = require('./Transition');\nvar Transition = Transitions.Transition;\nvar SetTransition = Transitions.SetTransition;\nvar NotSetTransition = Transitions.NotSetTransition;\nvar RuleTransition = Transitions.RuleTransition;\nvar ActionTransition = Transitions.ActionTransition;\nvar NoViableAltException = require('./../error/Errors').NoViableAltException;\n\nvar SingletonPredictionContext = require('./../PredictionContext').SingletonPredictionContext;\nvar predictionContextFromRuleContext = require('./../PredictionContext').predictionContextFromRuleContext;\n\nfunction ParserATNSimulator(parser, atn, decisionToDFA, sharedContextCache) {\n\tATNSimulator.call(this, atn, sharedContextCache);\n    this.parser = parser;\n    this.decisionToDFA = decisionToDFA;\n    // SLL, LL, or LL + exact ambig detection?//\n    this.predictionMode = PredictionMode.LL;\n    // LAME globals to avoid parameters!!!!! I need these down deep in predTransition\n    this._input = null;\n    this._startIndex = 0;\n    this._outerContext = null;\n    this._dfa = null;\n    // Each prediction operation uses a cache for merge of prediction contexts.\n    //  Don't keep around as it wastes huge amounts of memory. DoubleKeyMap\n    //  isn't synchronized but we're ok since two threads shouldn't reuse same\n    //  parser/atnsim object because it can only handle one input at a time.\n    //  This maps graphs a and b to merged result c. (a,b)&rarr;c. We can avoid\n    //  the merge if we ever see a and b again.  Note that (b,a)&rarr;c should\n    //  also be examined during cache lookup.\n    //\n    this.mergeCache = null;\n    return this;\n}\n\nParserATNSimulator.prototype = Object.create(ATNSimulator.prototype);\nParserATNSimulator.prototype.constructor = ParserATNSimulator;\n\nParserATNSimulator.prototype.debug = false;\nParserATNSimulator.prototype.debug_closure = false;\nParserATNSimulator.prototype.debug_add = false;\nParserATNSimulator.prototype.debug_list_atn_decisions = false;\nParserATNSimulator.prototype.dfa_debug = false;\nParserATNSimulator.prototype.retry_debug = false;\n\n\nParserATNSimulator.prototype.reset = function() {\n};\n\nParserATNSimulator.prototype.adaptivePredict = function(input, decision, outerContext) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"adaptivePredict decision \" + decision +\n                               \" exec LA(1)==\" + this.getLookaheadName(input) +\n                               \" line \" + input.LT(1).line + \":\" +\n                               input.LT(1).column);\n    }\n    this._input = input;\n    this._startIndex = input.index;\n    this._outerContext = outerContext;\n\n    var dfa = this.decisionToDFA[decision];\n    this._dfa = dfa;\n    var m = input.mark();\n    var index = input.index;\n\n    // Now we are certain to have a specific decision's DFA\n    // But, do we still need an initial state?\n    try {\n        var s0;\n        if (dfa.precedenceDfa) {\n            // the start state for a precedence DFA depends on the current\n            // parser precedence, and is provided by a DFA method.\n            s0 = dfa.getPrecedenceStartState(this.parser.getPrecedence());\n        } else {\n            // the start state for a \"regular\" DFA is just s0\n            s0 = dfa.s0;\n        }\n        if (s0===null) {\n            if (outerContext===null) {\n                outerContext = RuleContext.EMPTY;\n            }\n            if (this.debug || this.debug_list_atn_decisions) {\n                console.log(\"predictATN decision \" + dfa.decision +\n                                   \" exec LA(1)==\" + this.getLookaheadName(input) +\n                                   \", outerContext=\" + outerContext.toString(this.parser.ruleNames));\n            }\n\n            var fullCtx = false;\n            var s0_closure = this.computeStartState(dfa.atnStartState, RuleContext.EMPTY, fullCtx);\n\n            if( dfa.precedenceDfa) {\n                // If this is a precedence DFA, we use applyPrecedenceFilter\n                // to convert the computed start state to a precedence start\n                // state. We then use DFA.setPrecedenceStartState to set the\n                // appropriate start state for the precedence level rather\n                // than simply setting DFA.s0.\n                //\n                dfa.s0.configs = s0_closure; // not used for prediction but useful to know start configs anyway\n                s0_closure = this.applyPrecedenceFilter(s0_closure);\n                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                dfa.setPrecedenceStartState(this.parser.getPrecedence(), s0);\n            } else {\n                s0 = this.addDFAState(dfa, new DFAState(null, s0_closure));\n                dfa.s0 = s0;\n            }\n        }\n        var alt = this.execATN(dfa, s0, input, index, outerContext);\n        if (this.debug) {\n            console.log(\"DFA after predictATN: \" + dfa.toString(this.parser.literalNames));\n        }\n        return alt;\n    } finally {\n        this._dfa = null;\n        this.mergeCache = null; // wack cache after each prediction\n        input.seek(index);\n        input.release(m);\n    }\n};\n// Performs ATN simulation to compute a predicted alternative based\n//  upon the remaining input, but also updates the DFA cache to avoid\n//  having to traverse the ATN again for the same input sequence.\n\n// There are some key conditions we're looking for after computing a new\n// set of ATN configs (proposed DFA state):\n      // if the set is empty, there is no viable alternative for current symbol\n      // does the state uniquely predict an alternative?\n      // does the state have a conflict that would prevent us from\n      //   putting it on the work list?\n\n// We also have some key operations to do:\n      // add an edge from previous DFA state to potentially new DFA state, D,\n      //   upon current symbol but only if adding to work list, which means in all\n      //   cases except no viable alternative (and possibly non-greedy decisions?)\n      // collecting predicates and adding semantic context to DFA accept states\n      // adding rule context to context-sensitive DFA accept states\n      // consuming an input symbol\n      // reporting a conflict\n      // reporting an ambiguity\n      // reporting a context sensitivity\n      // reporting insufficient predicates\n\n// cover these cases:\n//    dead end\n//    single alt\n//    single alt + preds\n//    conflict\n//    conflict + preds\n//\nParserATNSimulator.prototype.execATN = function(dfa, s0, input, startIndex, outerContext ) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATN decision \" + dfa.decision +\n                \" exec LA(1)==\" + this.getLookaheadName(input) +\n                \" line \" + input.LT(1).line + \":\" + input.LT(1).column);\n    }\n    var alt;\n    var previousD = s0;\n\n    if (this.debug) {\n        console.log(\"s0 = \" + s0);\n    }\n    var t = input.LA(1);\n    while(true) { // while more work\n        var D = this.getExistingTargetState(previousD, t);\n        if(D===null) {\n            D = this.computeTargetState(dfa, previousD, t);\n        }\n        if(D===ATNSimulator.ERROR) {\n            // if any configs in previous dipped into outer context, that\n            // means that input up to t actually finished entry rule\n            // at least for SLL decision. Full LL doesn't dip into outer\n            // so don't need special case.\n            // We will get an error no matter what so delay until after\n            // decision; better error message. Also, no reachable target\n            // ATN states in SLL implies LL will also get nowhere.\n            // If conflict in states that dip out, choose min since we\n            // will get error no matter what.\n            var e = this.noViableAlt(input, outerContext, previousD.configs, startIndex);\n            input.seek(startIndex);\n            alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previousD.configs, outerContext);\n            if(alt!==ATN.INVALID_ALT_NUMBER) {\n                return alt;\n            } else {\n                throw e;\n            }\n        }\n        if(D.requiresFullContext && this.predictionMode !== PredictionMode.SLL) {\n            // IF PREDS, MIGHT RESOLVE TO SINGLE ALT => SLL (or syntax error)\n            var conflictingAlts = null;\n            if (D.predicates!==null) {\n                if (this.debug) {\n                    console.log(\"DFA state has preds in DFA sim LL failover\");\n                }\n                var conflictIndex = input.index;\n                if(conflictIndex !== startIndex) {\n                    input.seek(startIndex);\n                }\n                conflictingAlts = this.evalSemanticContext(D.predicates, outerContext, true);\n                if (conflictingAlts.length===1) {\n                    if(this.debug) {\n                        console.log(\"Full LL avoided\");\n                    }\n                    return conflictingAlts.minValue();\n                }\n                if (conflictIndex !== startIndex) {\n                    // restore the index so reporting the fallback to full\n                    // context occurs with the index at the correct spot\n                    input.seek(conflictIndex);\n                }\n            }\n            if (this.dfa_debug) {\n                console.log(\"ctx sensitive state \" + outerContext +\" in \" + D);\n            }\n            var fullCtx = true;\n            var s0_closure = this.computeStartState(dfa.atnStartState, outerContext, fullCtx);\n            this.reportAttemptingFullContext(dfa, conflictingAlts, D.configs, startIndex, input.index);\n            alt = this.execATNWithFullContext(dfa, D, s0_closure, input, startIndex, outerContext);\n            return alt;\n        }\n        if (D.isAcceptState) {\n            if (D.predicates===null) {\n                return D.prediction;\n            }\n            var stopIndex = input.index;\n            input.seek(startIndex);\n            var alts = this.evalSemanticContext(D.predicates, outerContext, true);\n            if (alts.length===0) {\n                throw this.noViableAlt(input, outerContext, D.configs, startIndex);\n            } else if (alts.length===1) {\n                return alts.minValue();\n            } else {\n                // report ambiguity after predicate evaluation to make sure the correct set of ambig alts is reported.\n                this.reportAmbiguity(dfa, D, startIndex, stopIndex, false, alts, D.configs);\n                return alts.minValue();\n            }\n        }\n        previousD = D;\n\n        if (t !== Token.EOF) {\n            input.consume();\n            t = input.LA(1);\n        }\n    }\n};\n//\n// Get an existing target state for an edge in the DFA. If the target state\n// for the edge has not yet been computed or is otherwise not available,\n// this method returns {@code null}.\n//\n// @param previousD The current DFA state\n// @param t The next input symbol\n// @return The existing target DFA state for the given input symbol\n// {@code t}, or {@code null} if the target state for this edge is not\n// already cached\n//\nParserATNSimulator.prototype.getExistingTargetState = function(previousD, t) {\n    var edges = previousD.edges;\n    if (edges===null) {\n        return null;\n    } else {\n        return edges[t + 1] || null;\n    }\n};\n//\n// Compute a target state for an edge in the DFA, and attempt to add the\n// computed state and corresponding edge to the DFA.\n//\n// @param dfa The DFA\n// @param previousD The current DFA state\n// @param t The next input symbol\n//\n// @return The computed target DFA state for the given input symbol\n// {@code t}. If {@code t} does not lead to a valid DFA state, this method\n// returns {@link //ERROR}.\n//\nParserATNSimulator.prototype.computeTargetState = function(dfa, previousD, t) {\n   var reach = this.computeReachSet(previousD.configs, t, false);\n    if(reach===null) {\n        this.addDFAEdge(dfa, previousD, t, ATNSimulator.ERROR);\n        return ATNSimulator.ERROR;\n    }\n    // create new target state; we'll add to DFA after it's complete\n    var D = new DFAState(null, reach);\n\n    var predictedAlt = this.getUniqueAlt(reach);\n\n    if (this.debug) {\n        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        console.log(\"SLL altSubSets=\" + Utils.arrayToString(altSubSets) +\n                    \", previous=\" + previousD.configs +\n                    \", configs=\" + reach +\n                    \", predict=\" + predictedAlt +\n                    \", allSubsetsConflict=\" +\n                    PredictionMode.allSubsetsConflict(altSubSets) + \", conflictingAlts=\" +\n                    this.getConflictingAlts(reach));\n    }\n    if (predictedAlt!==ATN.INVALID_ALT_NUMBER) {\n        // NO CONFLICT, UNIQUELY PREDICTED ALT\n        D.isAcceptState = true;\n        D.configs.uniqueAlt = predictedAlt;\n        D.prediction = predictedAlt;\n    } else if (PredictionMode.hasSLLConflictTerminatingPrediction(this.predictionMode, reach)) {\n        // MORE THAN ONE VIABLE ALTERNATIVE\n        D.configs.conflictingAlts = this.getConflictingAlts(reach);\n        D.requiresFullContext = true;\n        // in SLL-only mode, we will stop at this state and return the minimum alt\n        D.isAcceptState = true;\n        D.prediction = D.configs.conflictingAlts.minValue();\n    }\n    if (D.isAcceptState && D.configs.hasSemanticContext) {\n        this.predicateDFAState(D, this.atn.getDecisionState(dfa.decision));\n        if( D.predicates!==null) {\n            D.prediction = ATN.INVALID_ALT_NUMBER;\n        }\n    }\n    // all adds to dfa are done after we've created full D state\n    D = this.addDFAEdge(dfa, previousD, t, D);\n    return D;\n};\n\nParserATNSimulator.prototype.predicateDFAState = function(dfaState, decisionState) {\n    // We need to test all predicates, even in DFA states that\n    // uniquely predict alternative.\n    var nalts = decisionState.transitions.length;\n    // Update DFA so reach becomes accept state with (predicate,alt)\n    // pairs if preds found for conflicting alts\n    var altsToCollectPredsFrom = this.getConflictingAltsOrUniqueAlt(dfaState.configs);\n    var altToPred = this.getPredsForAmbigAlts(altsToCollectPredsFrom, dfaState.configs, nalts);\n    if (altToPred!==null) {\n        dfaState.predicates = this.getPredicatePredictions(altsToCollectPredsFrom, altToPred);\n        dfaState.prediction = ATN.INVALID_ALT_NUMBER; // make sure we use preds\n    } else {\n        // There are preds in configs but they might go away\n        // when OR'd together like {p}? || NONE == NONE. If neither\n        // alt has preds, resolve to min alt\n        dfaState.prediction = altsToCollectPredsFrom.minValue();\n    }\n};\n\n// comes back with reach.uniqueAlt set to a valid alt\nParserATNSimulator.prototype.execATNWithFullContext = function(dfa, D, // how far we got before failing over\n                                     s0,\n                                     input,\n                                     startIndex,\n                                     outerContext) {\n    if (this.debug || this.debug_list_atn_decisions) {\n        console.log(\"execATNWithFullContext \"+s0);\n    }\n    var fullCtx = true;\n    var foundExactAmbig = false;\n    var reach = null;\n    var previous = s0;\n    input.seek(startIndex);\n    var t = input.LA(1);\n    var predictedAlt = -1;\n    while (true) { // while more work\n        reach = this.computeReachSet(previous, t, fullCtx);\n        if (reach===null) {\n            // if any configs in previous dipped into outer context, that\n            // means that input up to t actually finished entry rule\n            // at least for LL decision. Full LL doesn't dip into outer\n            // so don't need special case.\n            // We will get an error no matter what so delay until after\n            // decision; better error message. Also, no reachable target\n            // ATN states in SLL implies LL will also get nowhere.\n            // If conflict in states that dip out, choose min since we\n            // will get error no matter what.\n            var e = this.noViableAlt(input, outerContext, previous, startIndex);\n            input.seek(startIndex);\n            var alt = this.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule(previous, outerContext);\n            if(alt!==ATN.INVALID_ALT_NUMBER) {\n                return alt;\n            } else {\n                throw e;\n            }\n        }\n        var altSubSets = PredictionMode.getConflictingAltSubsets(reach);\n        if(this.debug) {\n            console.log(\"LL altSubSets=\" + altSubSets + \", predict=\" +\n                  PredictionMode.getUniqueAlt(altSubSets) + \", resolvesToJustOneViableAlt=\" +\n                  PredictionMode.resolvesToJustOneViableAlt(altSubSets));\n        }\n        reach.uniqueAlt = this.getUniqueAlt(reach);\n        // unique prediction?\n        if(reach.uniqueAlt!==ATN.INVALID_ALT_NUMBER) {\n            predictedAlt = reach.uniqueAlt;\n            break;\n        } else if (this.predictionMode !== PredictionMode.LL_EXACT_AMBIG_DETECTION) {\n            predictedAlt = PredictionMode.resolvesToJustOneViableAlt(altSubSets);\n            if(predictedAlt !== ATN.INVALID_ALT_NUMBER) {\n                break;\n            }\n        } else {\n            // In exact ambiguity mode, we never try to terminate early.\n            // Just keeps scarfing until we know what the conflict is\n            if (PredictionMode.allSubsetsConflict(altSubSets) && PredictionMode.allSubsetsEqual(altSubSets)) {\n                foundExactAmbig = true;\n                predictedAlt = PredictionMode.getSingleViableAlt(altSubSets);\n                break;\n            }\n            // else there are multiple non-conflicting subsets or\n            // we're not sure what the ambiguity is yet.\n            // So, keep going.\n        }\n        previous = reach;\n        if( t !== Token.EOF) {\n            input.consume();\n            t = input.LA(1);\n        }\n    }\n    // If the configuration set uniquely predicts an alternative,\n    // without conflict, then we know that it's a full LL decision\n    // not SLL.\n    if (reach.uniqueAlt !== ATN.INVALID_ALT_NUMBER ) {\n        this.reportContextSensitivity(dfa, predictedAlt, reach, startIndex, input.index);\n        return predictedAlt;\n    }\n    // We do not check predicates here because we have checked them\n    // on-the-fly when doing full context prediction.\n\n    //\n    // In non-exact ambiguity detection mode, we might\tactually be able to\n    // detect an exact ambiguity, but I'm not going to spend the cycles\n    // needed to check. We only emit ambiguity warnings in exact ambiguity\n    // mode.\n    //\n    // For example, we might know that we have conflicting configurations.\n    // But, that does not mean that there is no way forward without a\n    // conflict. It's possible to have nonconflicting alt subsets as in:\n\n    // altSubSets=[{1, 2}, {1, 2}, {1}, {1, 2}]\n\n    // from\n    //\n    //    [(17,1,[5 $]), (13,1,[5 10 $]), (21,1,[5 10 $]), (11,1,[$]),\n    //     (13,2,[5 10 $]), (21,2,[5 10 $]), (11,2,[$])]\n    //\n    // In this case, (17,1,[5 $]) indicates there is some next sequence that\n    // would resolve this without conflict to alternative 1. Any other viable\n    // next sequence, however, is associated with a conflict.  We stop\n    // looking for input because no amount of further lookahead will alter\n    // the fact that we should predict alternative 1.  We just can't say for\n    // sure that there is an ambiguity without looking further.\n\n    this.reportAmbiguity(dfa, D, startIndex, input.index, foundExactAmbig, null, reach);\n\n    return predictedAlt;\n};\n\nParserATNSimulator.prototype.computeReachSet = function(closure, t, fullCtx) {\n    if (this.debug) {\n        console.log(\"in computeReachSet, starting closure: \" + closure);\n    }\n    if( this.mergeCache===null) {\n        this.mergeCache = new DoubleDict();\n    }\n    var intermediate = new ATNConfigSet(fullCtx);\n\n    // Configurations already in a rule stop state indicate reaching the end\n    // of the decision rule (local context) or end of the start rule (full\n    // context). Once reached, these configurations are never updated by a\n    // closure operation, so they are handled separately for the performance\n    // advantage of having a smaller intermediate set when calling closure.\n    //\n    // For full-context reach operations, separate handling is required to\n    // ensure that the alternative matching the longest overall sequence is\n    // chosen when multiple such configurations can match the input.\n\n    var skippedStopStates = null;\n\n    // First figure out where we can reach on input t\n    for (var i=0; i<closure.items.length;i++) {\n        var c = closure.items[i];\n        if(this.debug_add) {\n            console.log(\"testing \" + this.getTokenName(t) + \" at \" + c);\n        }\n        if (c.state instanceof RuleStopState) {\n            if (fullCtx || t === Token.EOF) {\n                if (skippedStopStates===null) {\n                    skippedStopStates = [];\n                }\n                skippedStopStates.push(c);\n                if(this.debug_add) {\n                    console.log(\"added \" + c + \" to skippedStopStates\");\n                }\n            }\n            continue;\n        }\n        for(var j=0;j<c.state.transitions.length;j++) {\n            var trans = c.state.transitions[j];\n            var target = this.getReachableTarget(trans, t);\n            if (target!==null) {\n                var cfg = new ATNConfig({state:target}, c);\n                intermediate.add(cfg, this.mergeCache);\n                if(this.debug_add) {\n                    console.log(\"added \" + cfg + \" to intermediate\");\n                }\n            }\n        }\n    }\n    // Now figure out where the reach operation can take us...\n    var reach = null;\n\n    // This block optimizes the reach operation for intermediate sets which\n    // trivially indicate a termination state for the overall\n    // adaptivePredict operation.\n    //\n    // The conditions assume that intermediate\n    // contains all configurations relevant to the reach set, but this\n    // condition is not true when one or more configurations have been\n    // withheld in skippedStopStates, or when the current symbol is EOF.\n    //\n    if (skippedStopStates===null && t!==Token.EOF) {\n        if (intermediate.items.length===1) {\n            // Don't pursue the closure if there is just one state.\n            // It can only have one alternative; just add to result\n            // Also don't pursue the closure if there is unique alternative\n            // among the configurations.\n            reach = intermediate;\n        } else if (this.getUniqueAlt(intermediate)!==ATN.INVALID_ALT_NUMBER) {\n            // Also don't pursue the closure if there is unique alternative\n            // among the configurations.\n            reach = intermediate;\n        }\n    }\n    // If the reach set could not be trivially determined, perform a closure\n    // operation on the intermediate set to compute its initial value.\n    //\n    if (reach===null) {\n        reach = new ATNConfigSet(fullCtx);\n        var closureBusy = new Set();\n        var treatEofAsEpsilon = t === Token.EOF;\n        for (var k=0; k<intermediate.items.length;k++) {\n            this.closure(intermediate.items[k], reach, closureBusy, false, fullCtx, treatEofAsEpsilon);\n        }\n    }\n    if (t === Token.EOF) {\n        // After consuming EOF no additional input is possible, so we are\n        // only interested in configurations which reached the end of the\n        // decision rule (local context) or end of the start rule (full\n        // context). Update reach to contain only these configurations. This\n        // handles both explicit EOF transitions in the grammar and implicit\n        // EOF transitions following the end of the decision or start rule.\n        //\n        // When reach==intermediate, no closure operation was performed. In\n        // this case, removeAllConfigsNotInRuleStopState needs to check for\n        // reachable rule stop states as well as configurations already in\n        // a rule stop state.\n        //\n        // This is handled before the configurations in skippedStopStates,\n        // because any configurations potentially added from that list are\n        // already guaranteed to meet this condition whether or not it's\n        // required.\n        //\n        reach = this.removeAllConfigsNotInRuleStopState(reach, reach === intermediate);\n    }\n    // If skippedStopStates!==null, then it contains at least one\n    // configuration. For full-context reach operations, these\n    // configurations reached the end of the start rule, in which case we\n    // only add them back to reach if no configuration during the current\n    // closure operation reached such a state. This ensures adaptivePredict\n    // chooses an alternative matching the longest overall sequence when\n    // multiple alternatives are viable.\n    //\n    if (skippedStopStates!==null && ( (! fullCtx) || (! PredictionMode.hasConfigInRuleStopState(reach)))) {\n        for (var l=0; l<skippedStopStates.length;l++) {\n            reach.add(skippedStopStates[l], this.mergeCache);\n        }\n    }\n    if (reach.items.length===0) {\n        return null;\n    } else {\n        return reach;\n    }\n};\n//\n// Return a configuration set containing only the configurations from\n// {@code configs} which are in a {@link RuleStopState}. If all\n// configurations in {@code configs} are already in a rule stop state, this\n// method simply returns {@code configs}.\n//\n// <p>When {@code lookToEndOfRule} is true, this method uses\n// {@link ATN//nextTokens} for each configuration in {@code configs} which is\n// not already in a rule stop state to see if a rule stop state is reachable\n// from the configuration via epsilon-only transitions.</p>\n//\n// @param configs the configuration set to update\n// @param lookToEndOfRule when true, this method checks for rule stop states\n// reachable by epsilon-only transitions from each configuration in\n// {@code configs}.\n//\n// @return {@code configs} if all configurations in {@code configs} are in a\n// rule stop state, otherwise return a new configuration set containing only\n// the configurations from {@code configs} which are in a rule stop state\n//\nParserATNSimulator.prototype.removeAllConfigsNotInRuleStopState = function(configs, lookToEndOfRule) {\n    if (PredictionMode.allConfigsInRuleStopStates(configs)) {\n        return configs;\n    }\n    var result = new ATNConfigSet(configs.fullCtx);\n    for(var i=0; i<configs.items.length;i++) {\n        var config = configs.items[i];\n        if (config.state instanceof RuleStopState) {\n            result.add(config, this.mergeCache);\n            continue;\n        }\n        if (lookToEndOfRule && config.state.epsilonOnlyTransitions) {\n            var nextTokens = this.atn.nextTokens(config.state);\n            if (nextTokens.contains(Token.EPSILON)) {\n                var endOfRuleState = this.atn.ruleToStopState[config.state.ruleIndex];\n                result.add(new ATNConfig({state:endOfRuleState}, config), this.mergeCache);\n            }\n        }\n    }\n    return result;\n};\n\nParserATNSimulator.prototype.computeStartState = function(p, ctx, fullCtx) {\n    // always at least the implicit call to start rule\n    var initialContext = predictionContextFromRuleContext(this.atn, ctx);\n    var configs = new ATNConfigSet(fullCtx);\n    for(var i=0;i<p.transitions.length;i++) {\n        var target = p.transitions[i].target;\n        var c = new ATNConfig({ state:target, alt:i+1, context:initialContext }, null);\n        var closureBusy = new Set();\n        this.closure(c, configs, closureBusy, true, fullCtx, false);\n    }\n    return configs;\n};\n\n//\n// This method transforms the start state computed by\n// {@link //computeStartState} to the special start state used by a\n// precedence DFA for a particular precedence value. The transformation\n// process applies the following changes to the start state's configuration\n// set.\n//\n// <ol>\n// <li>Evaluate the precedence predicates for each configuration using\n// {@link SemanticContext//evalPrecedence}.</li>\n// <li>Remove all configurations which predict an alternative greater than\n// 1, for which another configuration that predicts alternative 1 is in the\n// same ATN state with the same prediction context. This transformation is\n// valid for the following reasons:\n// <ul>\n// <li>The closure block cannot contain any epsilon transitions which bypass\n// the body of the closure, so all states reachable via alternative 1 are\n// part of the precedence alternatives of the transformed left-recursive\n// rule.</li>\n// <li>The \"primary\" portion of a left recursive rule cannot contain an\n// epsilon transition, so the only way an alternative other than 1 can exist\n// in a state that is also reachable via alternative 1 is by nesting calls\n// to the left-recursive rule, with the outer calls not being at the\n// preferred precedence level.</li>\n// </ul>\n// </li>\n// </ol>\n//\n// <p>\n// The prediction context must be considered by this filter to address\n// situations like the following.\n// </p>\n// <code>\n// <pre>\n// grammar TA;\n// prog: statement* EOF;\n// statement: letterA | statement letterA 'b' ;\n// letterA: 'a';\n// </pre>\n// </code>\n// <p>\n// If the above grammar, the ATN state immediately before the token\n// reference {@code 'a'} in {@code letterA} is reachable from the left edge\n// of both the primary and closure blocks of the left-recursive rule\n// {@code statement}. The prediction context associated with each of these\n// configurations distinguishes between them, and prevents the alternative\n// which stepped out to {@code prog} (and then back in to {@code statement}\n// from being eliminated by the filter.\n// </p>\n//\n// @param configs The configuration set computed by\n// {@link //computeStartState} as the start state for the DFA.\n// @return The transformed configuration set representing the start state\n// for a precedence DFA at a particular precedence level (determined by\n// calling {@link Parser//getPrecedence}).\n//\nParserATNSimulator.prototype.applyPrecedenceFilter = function(configs) {\n\tvar config;\n\tvar statesFromAlt1 = [];\n    var configSet = new ATNConfigSet(configs.fullCtx);\n    for(var i=0; i<configs.items.length; i++) {\n        config = configs.items[i];\n        // handle alt 1 first\n        if (config.alt !== 1) {\n            continue;\n        }\n        var updatedContext = config.semanticContext.evalPrecedence(this.parser, this._outerContext);\n        if (updatedContext===null) {\n            // the configuration was eliminated\n            continue;\n        }\n        statesFromAlt1[config.state.stateNumber] = config.context;\n        if (updatedContext !== config.semanticContext) {\n            configSet.add(new ATNConfig({semanticContext:updatedContext}, config), this.mergeCache);\n        } else {\n            configSet.add(config, this.mergeCache);\n        }\n    }\n    for(i=0; i<configs.items.length; i++) {\n        config = configs.items[i];\n        if (config.alt === 1) {\n            // already handled\n            continue;\n        }\n        // In the future, this elimination step could be updated to also\n        // filter the prediction context for alternatives predicting alt>1\n        // (basically a graph subtraction algorithm).\n\t\tif (!config.precedenceFilterSuppressed) {\n            var context = statesFromAlt1[config.state.stateNumber] || null;\n            if (context!==null && context.equals(config.context)) {\n                // eliminated\n                continue;\n            }\n\t\t}\n        configSet.add(config, this.mergeCache);\n    }\n    return configSet;\n};\n\nParserATNSimulator.prototype.getReachableTarget = function(trans, ttype) {\n    if (trans.matches(ttype, 0, this.atn.maxTokenType)) {\n        return trans.target;\n    } else {\n        return null;\n    }\n};\n\nParserATNSimulator.prototype.getPredsForAmbigAlts = function(ambigAlts, configs, nalts) {\n    // REACH=[1|1|[]|0:0, 1|2|[]|0:1]\n    // altToPred starts as an array of all null contexts. The entry at index i\n    // corresponds to alternative i. altToPred[i] may have one of three values:\n    //   1. null: no ATNConfig c is found such that c.alt==i\n    //   2. SemanticContext.NONE: At least one ATNConfig c exists such that\n    //      c.alt==i and c.semanticContext==SemanticContext.NONE. In other words,\n    //      alt i has at least one unpredicated config.\n    //   3. Non-NONE Semantic Context: There exists at least one, and for all\n    //      ATNConfig c such that c.alt==i, c.semanticContext!=SemanticContext.NONE.\n    //\n    // From this, it is clear that NONE||anything==NONE.\n    //\n    var altToPred = [];\n    for(var i=0;i<configs.items.length;i++) {\n        var c = configs.items[i];\n        if(ambigAlts.contains( c.alt )) {\n            altToPred[c.alt] = SemanticContext.orContext(altToPred[c.alt] || null, c.semanticContext);\n        }\n    }\n    var nPredAlts = 0;\n    for (i =1;i< nalts+1;i++) {\n        var pred = altToPred[i] || null;\n        if (pred===null) {\n            altToPred[i] = SemanticContext.NONE;\n        } else if (pred !== SemanticContext.NONE) {\n            nPredAlts += 1;\n        }\n    }\n    // nonambig alts are null in altToPred\n    if (nPredAlts===0) {\n        altToPred = null;\n    }\n    if (this.debug) {\n        console.log(\"getPredsForAmbigAlts result \" + Utils.arrayToString(altToPred));\n    }\n    return altToPred;\n};\n\nParserATNSimulator.prototype.getPredicatePredictions = function(ambigAlts, altToPred) {\n    var pairs = [];\n    var containsPredicate = false;\n    for (var i=1; i<altToPred.length;i++) {\n        var pred = altToPred[i];\n        // unpredicated is indicated by SemanticContext.NONE\n        if( ambigAlts!==null && ambigAlts.contains( i )) {\n            pairs.push(new PredPrediction(pred, i));\n        }\n        if (pred !== SemanticContext.NONE) {\n            containsPredicate = true;\n        }\n    }\n    if (! containsPredicate) {\n        return null;\n    }\n    return pairs;\n};\n\n//\n// This method is used to improve the localization of error messages by\n// choosing an alternative rather than throwing a\n// {@link NoViableAltException} in particular prediction scenarios where the\n// {@link //ERROR} state was reached during ATN simulation.\n//\n// <p>\n// The default implementation of this method uses the following\n// algorithm to identify an ATN configuration which successfully parsed the\n// decision entry rule. Choosing such an alternative ensures that the\n// {@link ParserRuleContext} returned by the calling rule will be complete\n// and valid, and the syntax error will be reported later at a more\n// localized location.</p>\n//\n// <ul>\n// <li>If a syntactically valid path or paths reach the end of the decision rule and\n// they are semantically valid if predicated, return the min associated alt.</li>\n// <li>Else, if a semantically invalid but syntactically valid path exist\n// or paths exist, return the minimum associated alt.\n// </li>\n// <li>Otherwise, return {@link ATN//INVALID_ALT_NUMBER}.</li>\n// </ul>\n//\n// <p>\n// In some scenarios, the algorithm described above could predict an\n// alternative which will result in a {@link FailedPredicateException} in\n// the parser. Specifically, this could occur if the <em>only</em> configuration\n// capable of successfully parsing to the end of the decision rule is\n// blocked by a semantic predicate. By choosing this alternative within\n// {@link //adaptivePredict} instead of throwing a\n// {@link NoViableAltException}, the resulting\n// {@link FailedPredicateException} in the parser will identify the specific\n// predicate which is preventing the parser from successfully parsing the\n// decision rule, which helps developers identify and correct logic errors\n// in semantic predicates.\n// </p>\n//\n// @param configs The ATN configurations which were valid immediately before\n// the {@link //ERROR} state was reached\n// @param outerContext The is the \\gamma_0 initial parser context from the paper\n// or the parser stack at the instant before prediction commences.\n//\n// @return The value to return from {@link //adaptivePredict}, or\n// {@link ATN//INVALID_ALT_NUMBER} if a suitable alternative was not\n// identified and {@link //adaptivePredict} should report an error instead.\n//\nParserATNSimulator.prototype.getSynValidOrSemInvalidAltThatFinishedDecisionEntryRule = function(configs, outerContext) {\n    var cfgs = this.splitAccordingToSemanticValidity(configs, outerContext);\n    var semValidConfigs = cfgs[0];\n    var semInvalidConfigs = cfgs[1];\n    var alt = this.getAltThatFinishedDecisionEntryRule(semValidConfigs);\n    if (alt!==ATN.INVALID_ALT_NUMBER) { // semantically/syntactically viable path exists\n        return alt;\n    }\n    // Is there a syntactically valid path with a failed pred?\n    if (semInvalidConfigs.items.length>0) {\n        alt = this.getAltThatFinishedDecisionEntryRule(semInvalidConfigs);\n        if (alt!==ATN.INVALID_ALT_NUMBER) { // syntactically viable path exists\n            return alt;\n        }\n    }\n    return ATN.INVALID_ALT_NUMBER;\n};\n\nParserATNSimulator.prototype.getAltThatFinishedDecisionEntryRule = function(configs) {\n    var alts = [];\n    for(var i=0;i<configs.items.length; i++) {\n        var c = configs.items[i];\n        if (c.reachesIntoOuterContext>0 || ((c.state instanceof RuleStopState) && c.context.hasEmptyPath())) {\n            if(alts.indexOf(c.alt)<0) {\n                alts.push(c.alt);\n            }\n        }\n    }\n    if (alts.length===0) {\n        return ATN.INVALID_ALT_NUMBER;\n    } else {\n        return Math.min.apply(null, alts);\n    }\n};\n// Walk the list of configurations and split them according to\n//  those that have preds evaluating to true/false.  If no pred, assume\n//  true pred and include in succeeded set.  Returns Pair of sets.\n//\n//  Create a new set so as not to alter the incoming parameter.\n//\n//  Assumption: the input stream has been restored to the starting point\n//  prediction, which is where predicates need to evaluate.\n//\nParserATNSimulator.prototype.splitAccordingToSemanticValidity = function( configs, outerContext) {\n    var succeeded = new ATNConfigSet(configs.fullCtx);\n    var failed = new ATNConfigSet(configs.fullCtx);\n    for(var i=0;i<configs.items.length; i++) {\n        var c = configs.items[i];\n        if (c.semanticContext !== SemanticContext.NONE) {\n            var predicateEvaluationResult = c.semanticContext.evaluate(this.parser, outerContext);\n            if (predicateEvaluationResult) {\n                succeeded.add(c);\n            } else {\n                failed.add(c);\n            }\n        } else {\n            succeeded.add(c);\n        }\n    }\n    return [succeeded, failed];\n};\n\n// Look through a list of predicate/alt pairs, returning alts for the\n//  pairs that win. A {@code NONE} predicate indicates an alt containing an\n//  unpredicated config which behaves as \"always true.\" If !complete\n//  then we stop at the first predicate that evaluates to true. This\n//  includes pairs with null predicates.\n//\nParserATNSimulator.prototype.evalSemanticContext = function(predPredictions, outerContext, complete) {\n    var predictions = new BitSet();\n    for(var i=0;i<predPredictions.length;i++) {\n    \tvar pair = predPredictions[i];\n        if (pair.pred === SemanticContext.NONE) {\n            predictions.add(pair.alt);\n            if (! complete) {\n                break;\n            }\n            continue;\n        }\n        var predicateEvaluationResult = pair.pred.evaluate(this.parser, outerContext);\n        if (this.debug || this.dfa_debug) {\n            console.log(\"eval pred \" + pair + \"=\" + predicateEvaluationResult);\n        }\n        if (predicateEvaluationResult) {\n            if (this.debug || this.dfa_debug) {\n                console.log(\"PREDICT \" + pair.alt);\n            }\n            predictions.add(pair.alt);\n            if (! complete) {\n                break;\n            }\n        }\n    }\n    return predictions;\n};\n\n// TODO: If we are doing predicates, there is no point in pursuing\n//     closure operations if we reach a DFA state that uniquely predicts\n//     alternative. We will not be caching that DFA state and it is a\n//     waste to pursue the closure. Might have to advance when we do\n//     ambig detection thought :(\n//\n\nParserATNSimulator.prototype.closure = function(config, configs, closureBusy, collectPredicates, fullCtx, treatEofAsEpsilon) {\n    var initialDepth = 0;\n    this.closureCheckingStopState(config, configs, closureBusy, collectPredicates,\n                             fullCtx, initialDepth, treatEofAsEpsilon);\n};\n\n\nParserATNSimulator.prototype.closureCheckingStopState = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    if (this.debug || this.debug_closure) {\n        console.log(\"closure(\" + config.toString(this.parser,true) + \")\");\n        // console.log(\"configs(\" + configs.toString() + \")\");\n        if(config.reachesIntoOuterContext>50) {\n            throw \"problem\";\n        }\n    }\n    if (config.state instanceof RuleStopState) {\n        // We hit rule end. If we have context info, use it\n        // run thru all possible stack tops in ctx\n        if (! config.context.isEmpty()) {\n            for ( var i =0; i<config.context.length; i++) {\n                if (config.context.getReturnState(i) === PredictionContext.EMPTY_RETURN_STATE) {\n                    if (fullCtx) {\n                        configs.add(new ATNConfig({state:config.state, context:PredictionContext.EMPTY}, config), this.mergeCache);\n                        continue;\n                    } else {\n                        // we have no context info, just chase follow links (if greedy)\n                        if (this.debug) {\n                            console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n                        }\n                        this.closure_(config, configs, closureBusy, collectPredicates,\n                                 fullCtx, depth, treatEofAsEpsilon);\n                    }\n                    continue;\n                }\n                var returnState = this.atn.states[config.context.getReturnState(i)];\n                var newContext = config.context.getParent(i); // \"pop\" return state\n                var parms = {state:returnState, alt:config.alt, context:newContext, semanticContext:config.semanticContext};\n                var c = new ATNConfig(parms, null);\n                // While we have context to pop back from, we may have\n                // gotten that context AFTER having falling off a rule.\n                // Make sure we track that we are now out of context.\n                c.reachesIntoOuterContext = config.reachesIntoOuterContext;\n                this.closureCheckingStopState(c, configs, closureBusy, collectPredicates, fullCtx, depth - 1, treatEofAsEpsilon);\n            }\n            return;\n        } else if( fullCtx) {\n            // reached end of start rule\n            configs.add(config, this.mergeCache);\n            return;\n        } else {\n            // else if we have no context info, just chase follow links (if greedy)\n            if (this.debug) {\n                console.log(\"FALLING off rule \" + this.getRuleName(config.state.ruleIndex));\n            }\n        }\n    }\n    this.closure_(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon);\n};\n\n\n// Do the actual work of walking epsilon edges//\nParserATNSimulator.prototype.closure_ = function(config, configs, closureBusy, collectPredicates, fullCtx, depth, treatEofAsEpsilon) {\n    var p = config.state;\n    // optimization\n    if (! p.epsilonOnlyTransitions) {\n        configs.add(config, this.mergeCache);\n        // make sure to not return here, because EOF transitions can act as\n        // both epsilon transitions and non-epsilon transitions.\n    }\n    for(var i = 0;i<p.transitions.length; i++) {\n        if(i==0 && this.canDropLoopEntryEdgeInLeftRecursiveRule(config))\n            continue;\n\n        var t = p.transitions[i];\n        var continueCollecting = collectPredicates && !(t instanceof ActionTransition);\n        var c = this.getEpsilonTarget(config, t, continueCollecting, depth === 0, fullCtx, treatEofAsEpsilon);\n        if (c!==null) {\n\t\t\tif (!t.isEpsilon && closureBusy.add(c)!==c){\n\t\t\t\t// avoid infinite recursion for EOF* and EOF+\n\t\t\t\tcontinue;\n\t\t\t}\n            var newDepth = depth;\n            if ( config.state instanceof RuleStopState) {\n                // target fell off end of rule; mark resulting c as having dipped into outer context\n                // We can't get here if incoming config was rule stop and we had context\n                // track how far we dip into outer context.  Might\n                // come in handy and we avoid evaluating context dependent\n                // preds if this is > 0.\n\n                if (closureBusy.add(c)!==c) {\n                    // avoid infinite recursion for right-recursive rules\n                    continue;\n                }\n\n\t\t\t\tif (this._dfa !== null && this._dfa.precedenceDfa) {\n\t\t\t\t\tif (t.outermostPrecedenceReturn === this._dfa.atnStartState.ruleIndex) {\n\t\t\t\t\t\tc.precedenceFilterSuppressed = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n                c.reachesIntoOuterContext += 1;\n                configs.dipsIntoOuterContext = true; // TODO: can remove? only care when we add to set per middle of this method\n                newDepth -= 1;\n                if (this.debug) {\n                    console.log(\"dips into outer ctx: \" + c);\n                }\n            } else if (t instanceof RuleTransition) {\n                // latch when newDepth goes negative - once we step out of the entry context we can't return\n                if (newDepth >= 0) {\n                    newDepth += 1;\n                }\n            }\n            this.closureCheckingStopState(c, configs, closureBusy, continueCollecting, fullCtx, newDepth, treatEofAsEpsilon);\n        }\n    }\n};\n\n\nParserATNSimulator.prototype.canDropLoopEntryEdgeInLeftRecursiveRule = function(config) {\n    // return False\n    var p = config.state;\n    // First check to see if we are in StarLoopEntryState generated during\n    // left-recursion elimination. For efficiency, also check if\n    // the context has an empty stack case. If so, it would mean\n    // global FOLLOW so we can't perform optimization\n    // Are we the special loop entry/exit state? or SLL wildcard\n    if(p.stateType != ATNState.STAR_LOOP_ENTRY)\n        return false;\n    if(p.stateType != ATNState.STAR_LOOP_ENTRY || !p.isPrecedenceDecision ||\n           config.context.isEmpty() || config.context.hasEmptyPath())\n        return false;\n\n    // Require all return states to return back to the same rule that p is in.\n    var numCtxs = config.context.length;\n    for(var i=0; i<numCtxs; i++) { // for each stack context\n        var returnState = this.atn.states[config.context.getReturnState(i)];\n        if (returnState.ruleIndex != p.ruleIndex)\n            return false;\n    }\n\n    var decisionStartState = p.transitions[0].target;\n    var blockEndStateNum = decisionStartState.endState.stateNumber;\n    var blockEndState = this.atn.states[blockEndStateNum];\n\n    // Verify that the top of each stack context leads to loop entry/exit\n    // state through epsilon edges and w/o leaving rule.\n    for(var i=0; i<numCtxs; i++) { // for each stack context\n        var returnStateNumber = config.context.getReturnState(i);\n        var returnState = this.atn.states[returnStateNumber];\n        // all states must have single outgoing epsilon edge\n        if (returnState.transitions.length != 1 || !returnState.transitions[0].isEpsilon)\n            return false;\n\n        // Look for prefix op case like 'not expr', (' type ')' expr\n        var returnStateTarget = returnState.transitions[0].target;\n        if ( returnState.stateType == ATNState.BLOCK_END && returnStateTarget == p )\n            continue;\n\n        // Look for 'expr op expr' or case where expr's return state is block end\n        // of (...)* internal block; the block end points to loop back\n        // which points to p but we don't need to check that\n        if ( returnState == blockEndState )\n            continue;\n\n        // Look for ternary expr ? expr : expr. The return state points at block end,\n        // which points at loop entry state\n        if ( returnStateTarget == blockEndState )\n            continue;\n\n        // Look for complex prefix 'between expr and expr' case where 2nd expr's\n        // return state points at block end state of (...)* internal block\n        if (returnStateTarget.stateType == ATNState.BLOCK_END && returnStateTarget.transitions.length == 1\n                && returnStateTarget.transitions[0].isEpsilon && returnStateTarget.transitions[0].target == p)\n            continue;\n\n        // anything else ain't conforming\n        return false;\n    }\n    return true;\n};\n\n\nParserATNSimulator.prototype.getRuleName = function( index) {\n    if (this.parser!==null && index>=0) {\n        return this.parser.ruleNames[index];\n    } else {\n        return \"<rule \" + index + \">\";\n    }\n};\n\nParserATNSimulator.prototype.getEpsilonTarget = function(config, t, collectPredicates, inContext, fullCtx, treatEofAsEpsilon) {\n    switch(t.serializationType) {\n    case Transition.RULE:\n        return this.ruleTransition(config, t);\n    case Transition.PRECEDENCE:\n        return this.precedenceTransition(config, t, collectPredicates, inContext, fullCtx);\n    case Transition.PREDICATE:\n        return this.predTransition(config, t, collectPredicates, inContext, fullCtx);\n    case Transition.ACTION:\n        return this.actionTransition(config, t);\n    case Transition.EPSILON:\n        return new ATNConfig({state:t.target}, config);\n    case Transition.ATOM:\n    case Transition.RANGE:\n    case Transition.SET:\n        // EOF transitions act like epsilon transitions after the first EOF\n        // transition is traversed\n        if (treatEofAsEpsilon) {\n            if (t.matches(Token.EOF, 0, 1)) {\n                return new ATNConfig({state: t.target}, config);\n            }\n        }\n        return null;\n    default:\n    \treturn null;\n    }\n};\n\nParserATNSimulator.prototype.actionTransition = function(config, t) {\n    if (this.debug) {\n        var index = t.actionIndex==-1 ? 65535 : t.actionIndex;\n        console.log(\"ACTION edge \" + t.ruleIndex + \":\" + index);\n    }\n    return new ATNConfig({state:t.target}, config);\n};\n\nParserATNSimulator.prototype.precedenceTransition = function(config, pt,  collectPredicates, inContext, fullCtx) {\n    if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" +\n                pt.precedence + \">=_p, ctx dependent=true\");\n        if (this.parser!==null) {\n        \tconsole.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n    }\n    var c = null;\n    if (collectPredicates && inContext) {\n        if (fullCtx) {\n            // In full context mode, we can evaluate predicates on-the-fly\n            // during closure, which dramatically reduces the size of\n            // the config sets. It also obviates the need to test predicates\n            // later during conflict resolution.\n            var currentPosition = this._input.index;\n            this._input.seek(this._startIndex);\n            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n            this._input.seek(currentPosition);\n            if (predSucceeds) {\n                c = new ATNConfig({state:pt.target}, config); // no pred context\n            }\n        } else {\n            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n        }\n    } else {\n        c = new ATNConfig({state:pt.target}, config);\n    }\n    if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n};\n\nParserATNSimulator.prototype.predTransition = function(config, pt, collectPredicates, inContext, fullCtx) {\n    if (this.debug) {\n        console.log(\"PRED (collectPredicates=\" + collectPredicates + \") \" + pt.ruleIndex +\n                \":\" + pt.predIndex + \", ctx dependent=\" + pt.isCtxDependent);\n        if (this.parser!==null) {\n            console.log(\"context surrounding pred is \" + Utils.arrayToString(this.parser.getRuleInvocationStack()));\n        }\n    }\n    var c = null;\n    if (collectPredicates && ((pt.isCtxDependent && inContext) || ! pt.isCtxDependent)) {\n        if (fullCtx) {\n            // In full context mode, we can evaluate predicates on-the-fly\n            // during closure, which dramatically reduces the size of\n            // the config sets. It also obviates the need to test predicates\n            // later during conflict resolution.\n            var currentPosition = this._input.index;\n            this._input.seek(this._startIndex);\n            var predSucceeds = pt.getPredicate().evaluate(this.parser, this._outerContext);\n            this._input.seek(currentPosition);\n            if (predSucceeds) {\n                c = new ATNConfig({state:pt.target}, config); // no pred context\n            }\n        } else {\n            var newSemCtx = SemanticContext.andContext(config.semanticContext, pt.getPredicate());\n            c = new ATNConfig({state:pt.target, semanticContext:newSemCtx}, config);\n        }\n    } else {\n        c = new ATNConfig({state:pt.target}, config);\n    }\n    if (this.debug) {\n        console.log(\"config from pred transition=\" + c);\n    }\n    return c;\n};\n\nParserATNSimulator.prototype.ruleTransition = function(config, t) {\n    if (this.debug) {\n        console.log(\"CALL rule \" + this.getRuleName(t.target.ruleIndex) + \", ctx=\" + config.context);\n    }\n    var returnState = t.followState;\n    var newContext = SingletonPredictionContext.create(config.context, returnState.stateNumber);\n    return new ATNConfig({state:t.target, context:newContext}, config );\n};\n\nParserATNSimulator.prototype.getConflictingAlts = function(configs) {\n    var altsets = PredictionMode.getConflictingAltSubsets(configs);\n    return PredictionMode.getAlts(altsets);\n};\n\n // Sam pointed out a problem with the previous definition, v3, of\n // ambiguous states. If we have another state associated with conflicting\n // alternatives, we should keep going. For example, the following grammar\n //\n // s : (ID | ID ID?) ';' ;\n //\n // When the ATN simulation reaches the state before ';', it has a DFA\n // state that looks like: [12|1|[], 6|2|[], 12|2|[]]. Naturally\n // 12|1|[] and 12|2|[] conflict, but we cannot stop processing this node\n // because alternative to has another way to continue, via [6|2|[]].\n // The key is that we have a single state that has config's only associated\n // with a single alternative, 2, and crucially the state transitions\n // among the configurations are all non-epsilon transitions. That means\n // we don't consider any conflicts that include alternative 2. So, we\n // ignore the conflict between alts 1 and 2. We ignore a set of\n // conflicting alts when there is an intersection with an alternative\n // associated with a single alt state in the state&rarr;config-list map.\n //\n // It's also the case that we might have two conflicting configurations but\n // also a 3rd nonconflicting configuration for a different alternative:\n // [1|1|[], 1|2|[], 8|3|[]]. This can come about from grammar:\n //\n // a : A | A | A B ;\n //\n // After matching input A, we reach the stop state for rule A, state 1.\n // State 8 is the state right before B. Clearly alternatives 1 and 2\n // conflict and no amount of further lookahead will separate the two.\n // However, alternative 3 will be able to continue and so we do not\n // stop working on this state. In the previous example, we're concerned\n // with states associated with the conflicting alternatives. Here alt\n // 3 is not associated with the conflicting configs, but since we can continue\n // looking for input reasonably, I don't declare the state done. We\n // ignore a set of conflicting alts when we have an alternative\n // that we still need to pursue.\n//\n\nParserATNSimulator.prototype.getConflictingAltsOrUniqueAlt = function(configs) {\n    var conflictingAlts = null;\n    if (configs.uniqueAlt!== ATN.INVALID_ALT_NUMBER) {\n        conflictingAlts = new BitSet();\n        conflictingAlts.add(configs.uniqueAlt);\n    } else {\n        conflictingAlts = configs.conflictingAlts;\n    }\n    return conflictingAlts;\n};\n\nParserATNSimulator.prototype.getTokenName = function( t) {\n    if (t===Token.EOF) {\n        return \"EOF\";\n    }\n    if( this.parser!==null && this.parser.literalNames!==null) {\n        if (t >= this.parser.literalNames.length && t >= this.parser.symbolicNames.length) {\n            console.log(\"\" + t + \" ttype out of range: \" + this.parser.literalNames);\n            console.log(\"\" + this.parser.getInputStream().getTokens());\n        } else {\n            var name = this.parser.literalNames[t] || this.parser.symbolicNames[t];\n            return name + \"<\" + t + \">\";\n        }\n    }\n    return \"\" + t;\n};\n\nParserATNSimulator.prototype.getLookaheadName = function(input) {\n    return this.getTokenName(input.LA(1));\n};\n\n// Used for debugging in adaptivePredict around execATN but I cut\n//  it out for clarity now that alg. works well. We can leave this\n//  \"dead\" code for a bit.\n//\nParserATNSimulator.prototype.dumpDeadEndConfigs = function(nvae) {\n    console.log(\"dead end configs: \");\n    var decs = nvae.getDeadEndConfigs();\n    for(var i=0; i<decs.length; i++) {\n    \tvar c = decs[i];\n        var trans = \"no edges\";\n        if (c.state.transitions.length>0) {\n            var t = c.state.transitions[0];\n            if (t instanceof AtomTransition) {\n                trans = \"Atom \"+ this.getTokenName(t.label);\n            } else if (t instanceof SetTransition) {\n                var neg = (t instanceof NotSetTransition);\n                trans = (neg ? \"~\" : \"\") + \"Set \" + t.set;\n            }\n        }\n        console.error(c.toString(this.parser, true) + \":\" + trans);\n    }\n};\n\nParserATNSimulator.prototype.noViableAlt = function(input, outerContext, configs, startIndex) {\n    return new NoViableAltException(this.parser, input, input.get(startIndex), input.LT(1), configs, outerContext);\n};\n\nParserATNSimulator.prototype.getUniqueAlt = function(configs) {\n    var alt = ATN.INVALID_ALT_NUMBER;\n    for(var i=0;i<configs.items.length;i++) {\n    \tvar c = configs.items[i];\n        if (alt === ATN.INVALID_ALT_NUMBER) {\n            alt = c.alt // found first alt\n        } else if( c.alt!==alt) {\n            return ATN.INVALID_ALT_NUMBER;\n        }\n    }\n    return alt;\n};\n\n//\n// Add an edge to the DFA, if possible. This method calls\n// {@link //addDFAState} to ensure the {@code to} state is present in the\n// DFA. If {@code from} is {@code null}, or if {@code t} is outside the\n// range of edges that can be represented in the DFA tables, this method\n// returns without adding the edge to the DFA.\n//\n// <p>If {@code to} is {@code null}, this method returns {@code null}.\n// Otherwise, this method returns the {@link DFAState} returned by calling\n// {@link //addDFAState} for the {@code to} state.</p>\n//\n// @param dfa The DFA\n// @param from The source state for the edge\n// @param t The input symbol\n// @param to The target state for the edge\n//\n// @return If {@code to} is {@code null}, this method returns {@code null};\n// otherwise this method returns the result of calling {@link //addDFAState}\n// on {@code to}\n//\nParserATNSimulator.prototype.addDFAEdge = function(dfa, from_, t, to) {\n    if( this.debug) {\n        console.log(\"EDGE \" + from_ + \" -> \" + to + \" upon \" + this.getTokenName(t));\n    }\n    if (to===null) {\n        return null;\n    }\n    to = this.addDFAState(dfa, to); // used existing if possible not incoming\n    if (from_===null || t < -1 || t > this.atn.maxTokenType) {\n        return to;\n    }\n    if (from_.edges===null) {\n        from_.edges = [];\n    }\n    from_.edges[t+1] = to; // connect\n\n    if (this.debug) {\n        var literalNames = this.parser===null ? null : this.parser.literalNames;\n        var symbolicNames = this.parser===null ? null : this.parser.symbolicNames;\n        console.log(\"DFA=\\n\" + dfa.toString(literalNames, symbolicNames));\n    }\n    return to;\n};\n//\n// Add state {@code D} to the DFA if it is not already present, and return\n// the actual instance stored in the DFA. If a state equivalent to {@code D}\n// is already in the DFA, the existing state is returned. Otherwise this\n// method returns {@code D} after adding it to the DFA.\n//\n// <p>If {@code D} is {@link //ERROR}, this method returns {@link //ERROR} and\n// does not change the DFA.</p>\n//\n// @param dfa The dfa\n// @param D The DFA state to add\n// @return The state stored in the DFA. This will be either the existing\n// state if {@code D} is already in the DFA, or {@code D} itself if the\n// state was not already present.\n//\nParserATNSimulator.prototype.addDFAState = function(dfa, D) {\n    if (D == ATNSimulator.ERROR) {\n        return D;\n    }\n    var existing = dfa.states.get(D);\n    if(existing!==null) {\n        return existing;\n    }\n    D.stateNumber = dfa.states.length;\n    if (! D.configs.readOnly) {\n        D.configs.optimizeConfigs(this);\n        D.configs.setReadonly(true);\n    }\n    dfa.states.add(D);\n    if (this.debug) {\n        console.log(\"adding new DFA state: \" + D);\n    }\n    return D;\n};\n\nParserATNSimulator.prototype.reportAttemptingFullContext = function(dfa, conflictingAlts, configs, startIndex, stopIndex) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAttemptingFullContext decision=\" + dfa.decision + \":\" + configs +\n                           \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser!==null) {\n        this.parser.getErrorListenerDispatch().reportAttemptingFullContext(this.parser, dfa, startIndex, stopIndex, conflictingAlts, configs);\n    }\n};\n\nParserATNSimulator.prototype.reportContextSensitivity = function(dfa, prediction, configs, startIndex, stopIndex) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportContextSensitivity decision=\" + dfa.decision + \":\" + configs +\n                           \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser!==null) {\n        this.parser.getErrorListenerDispatch().reportContextSensitivity(this.parser, dfa, startIndex, stopIndex, prediction, configs);\n    }\n};\n\n// If context sensitive parsing, we know it's ambiguity not conflict//\nParserATNSimulator.prototype.reportAmbiguity = function(dfa, D, startIndex, stopIndex,\n                               exact, ambigAlts, configs ) {\n    if (this.debug || this.retry_debug) {\n        var interval = new Interval(startIndex, stopIndex + 1);\n        console.log(\"reportAmbiguity \" + ambigAlts + \":\" + configs +\n                           \", input=\" + this.parser.getTokenStream().getText(interval));\n    }\n    if (this.parser!==null) {\n        this.parser.getErrorListenerDispatch().reportAmbiguity(this.parser, dfa, startIndex, stopIndex, exact, ambigAlts, configs);\n    }\n};\n\nexports.ParserATNSimulator = ParserATNSimulator;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/atn/ParserATNSimulator.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.DFA = require('./DFA').DFA;\nexports.DFASerializer = require('./DFASerializer').DFASerializer;\nexports.LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;\nexports.PredPrediction = require('./DFAState').PredPrediction;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/dfa/index.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Set = require(\"../Utils\").Set;\nvar DFAState = require('./DFAState').DFAState;\nvar StarLoopEntryState = require('../atn/ATNState').StarLoopEntryState;\nvar ATNConfigSet = require('./../atn/ATNConfigSet').ATNConfigSet;\nvar DFASerializer = require('./DFASerializer').DFASerializer;\nvar LexerDFASerializer = require('./DFASerializer').LexerDFASerializer;\n\n\n\nfunction DFA(atnStartState, decision) {\n\tif (decision === undefined) {\n\t\tdecision = 0;\n\t}\n\t// From which ATN state did we create this DFA?\n\tthis.atnStartState = atnStartState;\n\tthis.decision = decision;\n\t// A set of all DFA states. Use {@link Map} so we can get old state back\n\t// ({@link Set} only allows you to see if it's there).\n\tthis._states = new Set();\n\tthis.s0 = null;\n\t// {@code true} if this DFA is for a precedence decision; otherwise,\n\t// {@code false}. This is the backing field for {@link //isPrecedenceDfa},\n\t// {@link //setPrecedenceDfa}.\n\tthis.precedenceDfa = false;\n    if (atnStartState instanceof StarLoopEntryState)\n    {\n        if (atnStartState.isPrecedenceDecision) {\n            this.precedenceDfa = true;\n            var precedenceState = new DFAState(null, new ATNConfigSet());\n            precedenceState.edges = [];\n            precedenceState.isAcceptState = false;\n            precedenceState.requiresFullContext = false;\n            this.s0 = precedenceState;\n        }\n    }\n\treturn this;\n}\n\n// Get the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @return The start state corresponding to the specified precedence, or\n// {@code null} if no start state exists for the specified precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n\nDFA.prototype.getPrecedenceStartState = function(precedence) {\n\tif (!(this.precedenceDfa)) {\n\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t}\n\t// s0.edges is never null for a precedence DFA\n\tif (precedence < 0 || precedence >= this.s0.edges.length) {\n\t\treturn null;\n\t}\n\treturn this.s0.edges[precedence] || null;\n};\n\n// Set the start state for a specific precedence value.\n//\n// @param precedence The current precedence.\n// @param startState The start state corresponding to the specified\n// precedence.\n//\n// @throws IllegalStateException if this is not a precedence DFA.\n// @see //isPrecedenceDfa()\n//\nDFA.prototype.setPrecedenceStartState = function(precedence, startState) {\n\tif (!(this.precedenceDfa)) {\n\t\tthrow (\"Only precedence DFAs may contain a precedence start state.\");\n\t}\n\tif (precedence < 0) {\n\t\treturn;\n\t}\n\n\t// synchronization on s0 here is ok. when the DFA is turned into a\n\t// precedence DFA, s0 will be initialized once and not updated again\n\t// s0.edges is never null for a precedence DFA\n\tthis.s0.edges[precedence] = startState;\n};\n\n//\n// Sets whether this is a precedence DFA. If the specified value differs\n// from the current DFA configuration, the following actions are taken;\n// otherwise no changes are made to the current DFA.\n//\n// <ul>\n// <li>The {@link //states} map is cleared</li>\n// <li>If {@code precedenceDfa} is {@code false}, the initial state\n// {@link //s0} is set to {@code null}; otherwise, it is initialized to a new\n// {@link DFAState} with an empty outgoing {@link DFAState//edges} array to\n// store the start states for individual precedence values.</li>\n// <li>The {@link //precedenceDfa} field is updated</li>\n// </ul>\n//\n// @param precedenceDfa {@code true} if this is a precedence DFA; otherwise,\n// {@code false}\n\nDFA.prototype.setPrecedenceDfa = function(precedenceDfa) {\n\tif (this.precedenceDfa!==precedenceDfa) {\n\t\tthis._states = new DFAStatesSet();\n\t\tif (precedenceDfa) {\n\t\t\tvar precedenceState = new DFAState(null, new ATNConfigSet());\n\t\t\tprecedenceState.edges = [];\n\t\t\tprecedenceState.isAcceptState = false;\n\t\t\tprecedenceState.requiresFullContext = false;\n\t\t\tthis.s0 = precedenceState;\n\t\t} else {\n\t\t\tthis.s0 = null;\n\t\t}\n\t\tthis.precedenceDfa = precedenceDfa;\n\t}\n};\n\nObject.defineProperty(DFA.prototype, \"states\", {\n\tget : function() {\n\t\treturn this._states;\n\t}\n});\n\n// Return a list of all states in this DFA, ordered by state number.\nDFA.prototype.sortedStates = function() {\n\tvar list = this._states.values();\n\treturn list.sort(function(a, b) {\n\t\treturn a.stateNumber - b.stateNumber;\n\t});\n};\n\nDFA.prototype.toString = function(literalNames, symbolicNames) {\n\tliteralNames = literalNames || null;\n\tsymbolicNames = symbolicNames || null;\n\tif (this.s0 === null) {\n\t\treturn \"\";\n\t}\n\tvar serializer = new DFASerializer(this, literalNames, symbolicNames);\n\treturn serializer.toString();\n};\n\nDFA.prototype.toLexerString = function() {\n\tif (this.s0 === null) {\n\t\treturn \"\";\n\t}\n\tvar serializer = new LexerDFASerializer(this);\n\treturn serializer.toString();\n};\n\nexports.DFA = DFA;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/dfa/DFA.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Tree = require('./Tree');\nexports.Trees = require('./Trees').Trees;\nexports.RuleNode = Tree.RuleNode;\nexports.ParseTreeListener = Tree.ParseTreeListener;\nexports.ParseTreeVisitor = Tree.ParseTreeVisitor;\nexports.ParseTreeWalker = Tree.ParseTreeWalker;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/tree/index.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nexports.RecognitionException = require('./Errors').RecognitionException;\nexports.NoViableAltException = require('./Errors').NoViableAltException;\nexports.LexerNoViableAltException = require('./Errors').LexerNoViableAltException;\nexports.InputMismatchException = require('./Errors').InputMismatchException;\nexports.FailedPredicateException = require('./Errors').FailedPredicateException;\nexports.DiagnosticErrorListener = require('./DiagnosticErrorListener').DiagnosticErrorListener;\nexports.BailErrorStrategy = require('./ErrorStrategy').BailErrorStrategy;\nexports.ErrorListener = require('./ErrorListener').ErrorListener;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/error/index.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n// This implementation of {@link ANTLRErrorListener} can be used to identify\n// certain potential correctness and performance problems in grammars. \"Reports\"\n// are made by calling {@link Parser//notifyErrorListeners} with the appropriate\n// message.\n//\n// <ul>\n// <li><b>Ambiguities</b>: These are cases where more than one path through the\n// grammar can match the input.</li>\n// <li><b>Weak context sensitivity</b>: These are cases where full-context\n// prediction resolved an SLL conflict to a unique alternative which equaled the\n// minimum alternative of the SLL conflict.</li>\n// <li><b>Strong (forced) context sensitivity</b>: These are cases where the\n// full-context prediction resolved an SLL conflict to a unique alternative,\n// <em>and</em> the minimum alternative of the SLL conflict was found to not be\n// a truly viable alternative. Two-stage parsing cannot be used for inputs where\n// this situation occurs.</li>\n// </ul>\n\nvar BitSet = require('./../Utils').BitSet;\nvar ErrorListener = require('./ErrorListener').ErrorListener;\nvar Interval = require('./../IntervalSet').Interval;\n\nfunction DiagnosticErrorListener(exactOnly) {\n\tErrorListener.call(this);\n\texactOnly = exactOnly || true;\n\t// whether all ambiguities or only exact ambiguities are reported.\n\tthis.exactOnly = exactOnly;\n\treturn this;\n}\n\nDiagnosticErrorListener.prototype = Object.create(ErrorListener.prototype);\nDiagnosticErrorListener.prototype.constructor = DiagnosticErrorListener;\n\nDiagnosticErrorListener.prototype.reportAmbiguity = function(recognizer, dfa,\n\t\tstartIndex, stopIndex, exact, ambigAlts, configs) {\n\tif (this.exactOnly && !exact) {\n\t\treturn;\n\t}\n\tvar msg = \"reportAmbiguity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\": ambigAlts=\" +\n\t\t\tthis.getConflictingAlts(ambigAlts, configs) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportAttemptingFullContext = function(\n\t\trecognizer, dfa, startIndex, stopIndex, conflictingAlts, configs) {\n\tvar msg = \"reportAttemptingFullContext d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.reportContextSensitivity = function(\n\t\trecognizer, dfa, startIndex, stopIndex, prediction, configs) {\n\tvar msg = \"reportContextSensitivity d=\" +\n\t\t\tthis.getDecisionDescription(recognizer, dfa) +\n\t\t\t\", input='\" +\n\t\t\trecognizer.getTokenStream().getText(new Interval(startIndex, stopIndex)) + \"'\";\n\trecognizer.notifyErrorListeners(msg);\n};\n\nDiagnosticErrorListener.prototype.getDecisionDescription = function(recognizer, dfa) {\n\tvar decision = dfa.decision;\n\tvar ruleIndex = dfa.atnStartState.ruleIndex;\n\n\tvar ruleNames = recognizer.ruleNames;\n\tif (ruleIndex < 0 || ruleIndex >= ruleNames.length) {\n\t\treturn \"\" + decision;\n\t}\n\tvar ruleName = ruleNames[ruleIndex] || null;\n\tif (ruleName === null || ruleName.length === 0) {\n\t\treturn \"\" + decision;\n\t}\n\treturn \"\" + decision + \" (\" + ruleName + \")\";\n};\n\n//\n// Computes the set of conflicting or ambiguous alternatives from a\n// configuration set, if that information was not already provided by the\n// parser.\n//\n// @param reportedAlts The set of conflicting or ambiguous alternatives, as\n// reported by the parser.\n// @param configs The conflicting or ambiguous configuration set.\n// @return Returns {@code reportedAlts} if it is not {@code null}, otherwise\n// returns the set of alternatives represented in {@code configs}.\n//\nDiagnosticErrorListener.prototype.getConflictingAlts = function(reportedAlts, configs) {\n\tif (reportedAlts !== null) {\n\t\treturn reportedAlts;\n\t}\n\tvar result = new BitSet();\n\tfor (var i = 0; i < configs.items.length; i++) {\n\t\tresult.add(configs.items[i].alt);\n\t}\n\treturn \"{\" + result.values().join(\", \") + \"}\";\n};\n\nexports.DiagnosticErrorListener = DiagnosticErrorListener;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/error/DiagnosticErrorListener.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\nvar InputStream = require('./InputStream').InputStream;\n\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? require(\"fs\") : null;\n\n// Utility functions to create InputStreams from various sources.\n//\n// All returned InputStreams support the full range of Unicode\n// up to U+10FFFF (the default behavior of InputStream only supports\n// code points up to U+FFFF).\nvar CharStreams = {\n  // Creates an InputStream from a string.\n  fromString: function(str) {\n    return InputStream(str, true);\n  },\n\n  // Asynchronously creates an InputStream from a blob given the\n  // encoding of the bytes in that blob (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes onLoad(result) on success, onError(error) on\n  // failure.\n  fromBlob: function(blob, encoding, onLoad, onError) {\n    var reader = FileReader();\n    reader.onload = function(e) {\n      var is = InputStream(e.target.result, true);\n      onLoad(is);\n    };\n    reader.onerror = onError;\n    reader.readAsText(blob, encoding);\n  },\n\n  // Creates an InputStream from a Buffer given the\n  // encoding of the bytes in that buffer (defaults to 'utf8' if\n  // encoding is null).\n  fromBuffer: function(buffer, encoding) {\n    return InputStream(buffer.toString(encoding), true);\n  },\n\n  // Asynchronously creates an InputStream from a file on disk given\n  // the encoding of the bytes in that file (defaults to 'utf8' if\n  // encoding is null).\n  //\n  // Invokes callback(error, result) on completion.\n  fromPath: function(path, encoding, callback) {\n    fs.readFile(path, encoding, function(err, data) {\n      var is = null;\n      if (data !== null) {\n        is = InputStream(data, true);\n      }\n      callback(err, is);\n    });\n  },\n\n  // Synchronously creates an InputStream given a path to a file\n  // on disk and the encoding of the bytes in that file (defaults to\n  // 'utf8' if encoding is null).\n  fromPathSync: function(path, encoding) {\n    var data = fs.readFileSync(path, encoding);\n    return InputStream(data, true);\n  }\n};\n\nexports.CharStreams = CharStreams;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/CharStreams.js","//\n/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n//\n\n//\n//  This is an InputStream that is loaded from a file all at once\n//  when you construct the object.\n//\nvar InputStream = require('./InputStream').InputStream;\nvar isNodeJs = typeof window === 'undefined' && typeof importScripts === 'undefined';\nvar fs = isNodeJs ? require(\"fs\") : null;\n\nfunction FileStream(fileName, decodeToUnicodeCodePoints) {\n\tvar data = fs.readFileSync(fileName, \"utf8\");\n\tInputStream.call(this, data, decodeToUnicodeCodePoints);\n\tthis.fileName = fileName;\n\treturn this;\n}\n\nFileStream.prototype = Object.create(InputStream.prototype);\nFileStream.prototype.constructor = FileStream;\n\nexports.FileStream = FileStream;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/FileStream.js","/* Copyright (c) 2012-2017 The ANTLR Project. All rights reserved.\n * Use of this file is governed by the BSD 3-clause license that\n * can be found in the LICENSE.txt file in the project root.\n */\n\nvar Token = require('./Token').Token;\nvar ParseTreeListener = require('./tree/Tree').ParseTreeListener;\nvar Recognizer = require('./Recognizer').Recognizer;\nvar DefaultErrorStrategy = require('./error/ErrorStrategy').DefaultErrorStrategy;\nvar ATNDeserializer = require('./atn/ATNDeserializer').ATNDeserializer;\nvar ATNDeserializationOptions = require('./atn/ATNDeserializationOptions').ATNDeserializationOptions;\nvar TerminalNode = require('./tree/Tree').TerminalNode;\nvar ErrorNode = require('./tree/Tree').ErrorNode;\n\nfunction TraceListener(parser) {\n\tParseTreeListener.call(this);\n    this.parser = parser;\n\treturn this;\n}\n\nTraceListener.prototype = Object.create(ParseTreeListener.prototype);\nTraceListener.prototype.constructor = TraceListener;\n\nTraceListener.prototype.enterEveryRule = function(ctx) {\n\tconsole.log(\"enter   \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n};\n\nTraceListener.prototype.visitTerminal = function( node) {\n\tconsole.log(\"consume \" + node.symbol + \" rule \" + this.parser.ruleNames[this.parser._ctx.ruleIndex]);\n};\n\nTraceListener.prototype.exitEveryRule = function(ctx) {\n\tconsole.log(\"exit    \" + this.parser.ruleNames[ctx.ruleIndex] + \", LT(1)=\" + this.parser._input.LT(1).text);\n};\n\n// this is all the parsing support code essentially; most of it is error\n// recovery stuff.//\nfunction Parser(input) {\n\tRecognizer.call(this);\n\t// The input stream.\n\tthis._input = null;\n\t// The error handling strategy for the parser. The default value is a new\n\t// instance of {@link DefaultErrorStrategy}.\n\tthis._errHandler = new DefaultErrorStrategy();\n\tthis._precedenceStack = [];\n\tthis._precedenceStack.push(0);\n\t// The {@link ParserRuleContext} object for the currently executing rule.\n\t// this is always non-null during the parsing process.\n\tthis._ctx = null;\n\t// Specifies whether or not the parser should construct a parse tree during\n\t// the parsing process. The default value is {@code true}.\n\tthis.buildParseTrees = true;\n\t// When {@link //setTrace}{@code (true)} is called, a reference to the\n\t// {@link TraceListener} is stored here so it can be easily removed in a\n\t// later call to {@link //setTrace}{@code (false)}. The listener itself is\n\t// implemented as a parser listener so this field is not directly used by\n\t// other parser methods.\n\tthis._tracer = null;\n\t// The list of {@link ParseTreeListener} listeners registered to receive\n\t// events during the parse.\n\tthis._parseListeners = null;\n\t// The number of syntax errors reported during parsing. this value is\n\t// incremented each time {@link //notifyErrorListeners} is called.\n\tthis._syntaxErrors = 0;\n\tthis.setInputStream(input);\n\treturn this;\n}\n\nParser.prototype = Object.create(Recognizer.prototype);\nParser.prototype.contructor = Parser;\n\n// this field maps from the serialized ATN string to the deserialized {@link\n// ATN} with\n// bypass alternatives.\n//\n// @see ATNDeserializationOptions//isGenerateRuleBypassTransitions()\n//\nParser.bypassAltsAtnCache = {};\n\n// reset the parser's state//\nParser.prototype.reset = function() {\n\tif (this._input !== null) {\n\t\tthis._input.seek(0);\n\t}\n\tthis._errHandler.reset(this);\n\tthis._ctx = null;\n\tthis._syntaxErrors = 0;\n\tthis.setTrace(false);\n\tthis._precedenceStack = [];\n\tthis._precedenceStack.push(0);\n\tif (this._interp !== null) {\n\t\tthis._interp.reset();\n\t}\n};\n\n// Match current input symbol against {@code ttype}. If the symbol type\n// matches, {@link ANTLRErrorStrategy//reportMatch} and {@link //consume} are\n// called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @param ttype the token type to match\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// {@code ttype} and the error strategy could not recover from the\n// mismatched symbol\n\nParser.prototype.match = function(ttype) {\n\tvar t = this.getCurrentToken();\n\tif (t.type === ttype) {\n\t\tthis._errHandler.reportMatch(this);\n\t\tthis.consume();\n\t} else {\n\t\tt = this._errHandler.recoverInline(this);\n\t\tif (this.buildParseTrees && t.tokenIndex === -1) {\n\t\t\t// we must have conjured up a new token during single token\n\t\t\t// insertion\n\t\t\t// if it's not the current symbol\n\t\t\tthis._ctx.addErrorNode(t);\n\t\t}\n\t}\n\treturn t;\n};\n// Match current input symbol as a wildcard. If the symbol type matches\n// (i.e. has a value greater than 0), {@link ANTLRErrorStrategy//reportMatch}\n// and {@link //consume} are called to complete the match process.\n//\n// <p>If the symbol type does not match,\n// {@link ANTLRErrorStrategy//recoverInline} is called on the current error\n// strategy to attempt recovery. If {@link //getBuildParseTree} is\n// {@code true} and the token index of the symbol returned by\n// {@link ANTLRErrorStrategy//recoverInline} is -1, the symbol is added to\n// the parse tree by calling {@link ParserRuleContext//addErrorNode}.</p>\n//\n// @return the matched symbol\n// @throws RecognitionException if the current input symbol did not match\n// a wildcard and the error strategy could not recover from the mismatched\n// symbol\n\nParser.prototype.matchWildcard = function() {\n\tvar t = this.getCurrentToken();\n\tif (t.type > 0) {\n\t\tthis._errHandler.reportMatch(this);\n\t\tthis.consume();\n\t} else {\n\t\tt = this._errHandler.recoverInline(this);\n\t\tif (this._buildParseTrees && t.tokenIndex === -1) {\n\t\t\t// we must have conjured up a new token during single token\n\t\t\t// insertion\n\t\t\t// if it's not the current symbol\n\t\t\tthis._ctx.addErrorNode(t);\n\t\t}\n\t}\n\treturn t;\n};\n\nParser.prototype.getParseListeners = function() {\n\treturn this._parseListeners || [];\n};\n\n// Registers {@code listener} to receive events during the parsing process.\n//\n// <p>To support output-preserving grammar transformations (including but not\n// limited to left-recursion removal, automated left-factoring, and\n// optimized code generation), calls to listener methods during the parse\n// may differ substantially from calls made by\n// {@link ParseTreeWalker//DEFAULT} used after the parse is complete. In\n// particular, rule entry and exit events may occur in a different order\n// during the parse than after the parser. In addition, calls to certain\n// rule entry methods may be omitted.</p>\n//\n// <p>With the following specific exceptions, calls to listener events are\n// <em>deterministic</em>, i.e. for identical input the calls to listener\n// methods will be the same.</p>\n//\n// <ul>\n// <li>Alterations to the grammar used to generate code may change the\n// behavior of the listener calls.</li>\n// <li>Alterations to the command line options passed to ANTLR 4 when\n// generating the parser may change the behavior of the listener calls.</li>\n// <li>Changing the version of the ANTLR Tool used to generate the parser\n// may change the behavior of the listener calls.</li>\n// </ul>\n//\n// @param listener the listener to add\n//\n// @throws NullPointerException if {@code} listener is {@code null}\n//\nParser.prototype.addParseListener = function(listener) {\n\tif (listener === null) {\n\t\tthrow \"listener\";\n\t}\n\tif (this._parseListeners === null) {\n\t\tthis._parseListeners = [];\n\t}\n\tthis._parseListeners.push(listener);\n};\n\n//\n// Remove {@code listener} from the list of parse listeners.\n//\n// <p>If {@code listener} is {@code null} or has not been added as a parse\n// listener, this method does nothing.</p>\n// @param listener the listener to remove\n//\nParser.prototype.removeParseListener = function(listener) {\n\tif (this._parseListeners !== null) {\n\t\tvar idx = this._parseListeners.indexOf(listener);\n\t\tif (idx >= 0) {\n\t\t\tthis._parseListeners.splice(idx, 1);\n\t\t}\n\t\tif (this._parseListeners.length === 0) {\n\t\t\tthis._parseListeners = null;\n\t\t}\n\t}\n};\n\n// Remove all parse listeners.\nParser.prototype.removeParseListeners = function() {\n\tthis._parseListeners = null;\n};\n\n// Notify any parse listeners of an enter rule event.\nParser.prototype.triggerEnterRuleEvent = function() {\n\tif (this._parseListeners !== null) {\n        var ctx = this._ctx;\n\t\tthis._parseListeners.map(function(listener) {\n\t\t\tlistener.enterEveryRule(ctx);\n\t\t\tctx.enterRule(listener);\n\t\t});\n\t}\n};\n\n//\n// Notify any parse listeners of an exit rule event.\n//\n// @see //addParseListener\n//\nParser.prototype.triggerExitRuleEvent = function() {\n\tif (this._parseListeners !== null) {\n\t\t// reverse order walk of listeners\n        var ctx = this._ctx;\n\t\tthis._parseListeners.slice(0).reverse().map(function(listener) {\n\t\t\tctx.exitRule(listener);\n\t\t\tlistener.exitEveryRule(ctx);\n\t\t});\n\t}\n};\n\nParser.prototype.getTokenFactory = function() {\n\treturn this._input.tokenSource._factory;\n};\n\n// Tell our token source and error strategy about a new way to create tokens.//\nParser.prototype.setTokenFactory = function(factory) {\n\tthis._input.tokenSource._factory = factory;\n};\n\n// The ATN with bypass alternatives is expensive to create so we create it\n// lazily.\n//\n// @throws UnsupportedOperationException if the current parser does not\n// implement the {@link //getSerializedATN()} method.\n//\nParser.prototype.getATNWithBypassAlts = function() {\n\tvar serializedAtn = this.getSerializedATN();\n\tif (serializedAtn === null) {\n\t\tthrow \"The current parser does not support an ATN with bypass alternatives.\";\n\t}\n\tvar result = this.bypassAltsAtnCache[serializedAtn];\n\tif (result === null) {\n\t\tvar deserializationOptions = new ATNDeserializationOptions();\n\t\tdeserializationOptions.generateRuleBypassTransitions = true;\n\t\tresult = new ATNDeserializer(deserializationOptions)\n\t\t\t\t.deserialize(serializedAtn);\n\t\tthis.bypassAltsAtnCache[serializedAtn] = result;\n\t}\n\treturn result;\n};\n\n// The preferred method of getting a tree pattern. For example, here's a\n// sample use:\n//\n// <pre>\n// ParseTree t = parser.expr();\n// ParseTreePattern p = parser.compileParseTreePattern(\"&lt;ID&gt;+0\",\n// MyParser.RULE_expr);\n// ParseTreeMatch m = p.match(t);\n// String id = m.get(\"ID\");\n// </pre>\n\nvar Lexer = require('./Lexer').Lexer;\n\nParser.prototype.compileParseTreePattern = function(pattern, patternRuleIndex, lexer) {\n\tlexer = lexer || null;\n\tif (lexer === null) {\n\t\tif (this.getTokenStream() !== null) {\n\t\t\tvar tokenSource = this.getTokenStream().tokenSource;\n\t\t\tif (tokenSource instanceof Lexer) {\n\t\t\t\tlexer = tokenSource;\n\t\t\t}\n\t\t}\n\t}\n\tif (lexer === null) {\n\t\tthrow \"Parser can't discover a lexer to use\";\n\t}\n\tvar m = new ParseTreePatternMatcher(lexer, this);\n\treturn m.compile(pattern, patternRuleIndex);\n};\n\nParser.prototype.getInputStream = function() {\n\treturn this.getTokenStream();\n};\n\nParser.prototype.setInputStream = function(input) {\n\tthis.setTokenStream(input);\n};\n\nParser.prototype.getTokenStream = function() {\n\treturn this._input;\n};\n\n// Set the token stream and reset the parser.//\nParser.prototype.setTokenStream = function(input) {\n\tthis._input = null;\n\tthis.reset();\n\tthis._input = input;\n};\n\n// Match needs to return the current input symbol, which gets put\n// into the label for the associated token ref; e.g., x=ID.\n//\nParser.prototype.getCurrentToken = function() {\n\treturn this._input.LT(1);\n};\n\nParser.prototype.notifyErrorListeners = function(msg, offendingToken, err) {\n\toffendingToken = offendingToken || null;\n\terr = err || null;\n\tif (offendingToken === null) {\n\t\toffendingToken = this.getCurrentToken();\n\t}\n\tthis._syntaxErrors += 1;\n\tvar line = offendingToken.line;\n\tvar column = offendingToken.column;\n\tvar listener = this.getErrorListenerDispatch();\n\tlistener.syntaxError(this, offendingToken, line, column, msg, err);\n};\n\n//\n// Consume and return the {@linkplain //getCurrentToken current symbol}.\n//\n// <p>E.g., given the following input with {@code A} being the current\n// lookahead symbol, this function moves the cursor to {@code B} and returns\n// {@code A}.</p>\n//\n// <pre>\n// A B\n// ^\n// </pre>\n//\n// If the parser is not in error recovery mode, the consumed symbol is added\n// to the parse tree using {@link ParserRuleContext//addChild(Token)}, and\n// {@link ParseTreeListener//visitTerminal} is called on any parse listeners.\n// If the parser <em>is</em> in error recovery mode, the consumed symbol is\n// added to the parse tree using\n// {@link ParserRuleContext//addErrorNode(Token)}, and\n// {@link ParseTreeListener//visitErrorNode} is called on any parse\n// listeners.\n//\nParser.prototype.consume = function() {\n\tvar o = this.getCurrentToken();\n\tif (o.type !== Token.EOF) {\n\t\tthis.getInputStream().consume();\n\t}\n\tvar hasListener = this._parseListeners !== null && this._parseListeners.length > 0;\n\tif (this.buildParseTrees || hasListener) {\n\t\tvar node;\n\t\tif (this._errHandler.inErrorRecoveryMode(this)) {\n\t\t\tnode = this._ctx.addErrorNode(o);\n\t\t} else {\n\t\t\tnode = this._ctx.addTokenNode(o);\n\t\t}\n        node.invokingState = this.state;\n\t\tif (hasListener) {\n\t\t\tthis._parseListeners.map(function(listener) {\n\t\t\t\tif (node instanceof ErrorNode || (node.isErrorNode !== undefined && node.isErrorNode())) {\n\t\t\t\t\tlistener.visitErrorNode(node);\n\t\t\t\t} else if (node instanceof TerminalNode) {\n\t\t\t\t\tlistener.visitTerminal(node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\treturn o;\n};\n\nParser.prototype.addContextToParseTree = function() {\n\t// add current context to parent if we have a parent\n\tif (this._ctx.parentCtx !== null) {\n\t\tthis._ctx.parentCtx.addChild(this._ctx);\n\t}\n};\n\n// Always called by generated parsers upon entry to a rule. Access field\n// {@link //_ctx} get the current context.\n\nParser.prototype.enterRule = function(localctx, state, ruleIndex) {\n\tthis.state = state;\n\tthis._ctx = localctx;\n\tthis._ctx.start = this._input.LT(1);\n\tif (this.buildParseTrees) {\n\t\tthis.addContextToParseTree();\n\t}\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent();\n\t}\n};\n\nParser.prototype.exitRule = function() {\n\tthis._ctx.stop = this._input.LT(-1);\n\t// trigger event on _ctx, before it reverts to parent\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerExitRuleEvent();\n\t}\n\tthis.state = this._ctx.invokingState;\n\tthis._ctx = this._ctx.parentCtx;\n};\n\nParser.prototype.enterOuterAlt = function(localctx, altNum) {\n   \tlocalctx.setAltNumber(altNum);\n\t// if we have new localctx, make sure we replace existing ctx\n\t// that is previous child of parse tree\n\tif (this.buildParseTrees && this._ctx !== localctx) {\n\t\tif (this._ctx.parentCtx !== null) {\n\t\t\tthis._ctx.parentCtx.removeLastChild();\n\t\t\tthis._ctx.parentCtx.addChild(localctx);\n\t\t}\n\t}\n\tthis._ctx = localctx;\n};\n\n// Get the precedence level for the top-most precedence rule.\n//\n// @return The precedence level for the top-most precedence rule, or -1 if\n// the parser context is not nested within a precedence rule.\n\nParser.prototype.getPrecedence = function() {\n\tif (this._precedenceStack.length === 0) {\n\t\treturn -1;\n\t} else {\n\t\treturn this._precedenceStack[this._precedenceStack.length-1];\n\t}\n};\n\nParser.prototype.enterRecursionRule = function(localctx, state, ruleIndex,\n\t\tprecedence) {\n\tthis.state = state;\n\tthis._precedenceStack.push(precedence);\n\tthis._ctx = localctx;\n\tthis._ctx.start = this._input.LT(1);\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t\t\t\t\t\t\t\t// left-recursive rules\n\t}\n};\n\n//\n// Like {@link //enterRule} but for recursive rules.\n\nParser.prototype.pushNewRecursionContext = function(localctx, state, ruleIndex) {\n\tvar previous = this._ctx;\n\tprevious.parentCtx = localctx;\n\tprevious.invokingState = state;\n\tprevious.stop = this._input.LT(-1);\n\n\tthis._ctx = localctx;\n\tthis._ctx.start = previous.start;\n\tif (this.buildParseTrees) {\n\t\tthis._ctx.addChild(previous);\n\t}\n\tif (this._parseListeners !== null) {\n\t\tthis.triggerEnterRuleEvent(); // simulates rule entry for\n\t\t\t\t\t\t\t\t\t\t// left-recursive rules\n\t}\n};\n\nParser.prototype.unrollRecursionContexts = function(parentCtx) {\n\tthis._precedenceStack.pop();\n\tthis._ctx.stop = this._input.LT(-1);\n\tvar retCtx = this._ctx; // save current ctx (return value)\n\t// unroll so _ctx is as it was before call to recursive method\n\tif (this._parseListeners !== null) {\n\t\twhile (this._ctx !== parentCtx) {\n\t\t\tthis.triggerExitRuleEvent();\n\t\t\tthis._ctx = this._ctx.parentCtx;\n\t\t}\n\t} else {\n\t\tthis._ctx = parentCtx;\n\t}\n\t// hook into tree\n\tretCtx.parentCtx = parentCtx;\n\tif (this.buildParseTrees && parentCtx !== null) {\n\t\t// add return ctx into invoking rule's tree\n\t\tparentCtx.addChild(retCtx);\n\t}\n};\n\nParser.prototype.getInvokingContext = function(ruleIndex) {\n\tvar ctx = this._ctx;\n\twhile (ctx !== null) {\n\t\tif (ctx.ruleIndex === ruleIndex) {\n\t\t\treturn ctx;\n\t\t}\n\t\tctx = ctx.parentCtx;\n\t}\n\treturn null;\n};\n\nParser.prototype.precpred = function(localctx, precedence) {\n\treturn precedence >= this._precedenceStack[this._precedenceStack.length-1];\n};\n\nParser.prototype.inContext = function(context) {\n\t// TODO: useful in parser?\n\treturn false;\n};\n\n//\n// Checks whether or not {@code symbol} can follow the current state in the\n// ATN. The behavior of this method is equivalent to the following, but is\n// implemented such that the complete context-sensitive follow set does not\n// need to be explicitly constructed.\n//\n// <pre>\n// return getExpectedTokens().contains(symbol);\n// </pre>\n//\n// @param symbol the symbol type to check\n// @return {@code true} if {@code symbol} can follow the current state in\n// the ATN, otherwise {@code false}.\n\nParser.prototype.isExpectedToken = function(symbol) {\n\tvar atn = this._interp.atn;\n\tvar ctx = this._ctx;\n\tvar s = atn.states[this.state];\n\tvar following = atn.nextTokens(s);\n\tif (following.contains(symbol)) {\n\t\treturn true;\n\t}\n\tif (!following.contains(Token.EPSILON)) {\n\t\treturn false;\n\t}\n\twhile (ctx !== null && ctx.invokingState >= 0 && following.contains(Token.EPSILON)) {\n\t\tvar invokingState = atn.states[ctx.invokingState];\n\t\tvar rt = invokingState.transitions[0];\n\t\tfollowing = atn.nextTokens(rt.followState);\n\t\tif (following.contains(symbol)) {\n\t\t\treturn true;\n\t\t}\n\t\tctx = ctx.parentCtx;\n\t}\n\tif (following.contains(Token.EPSILON) && symbol === Token.EOF) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n};\n\n// Computes the set of input symbols which could follow the current parser\n// state and context, as given by {@link //getState} and {@link //getContext},\n// respectively.\n//\n// @see ATN//getExpectedTokens(int, RuleContext)\n//\nParser.prototype.getExpectedTokens = function() {\n\treturn this._interp.atn.getExpectedTokens(this.state, this._ctx);\n};\n\nParser.prototype.getExpectedTokensWithinCurrentRule = function() {\n\tvar atn = this._interp.atn;\n\tvar s = atn.states[this.state];\n\treturn atn.nextTokens(s);\n};\n\n// Get a rule's index (i.e., {@code RULE_ruleName} field) or -1 if not found.//\nParser.prototype.getRuleIndex = function(ruleName) {\n\tvar ruleIndex = this.getRuleIndexMap()[ruleName];\n\tif (ruleIndex !== null) {\n\t\treturn ruleIndex;\n\t} else {\n\t\treturn -1;\n\t}\n};\n\n// Return List&lt;String&gt; of the rule names in your parser instance\n// leading up to a call to the current rule. You could override if\n// you want more details such as the file/line info of where\n// in the ATN a rule is invoked.\n//\n// this is very useful for error messages.\n//\nParser.prototype.getRuleInvocationStack = function(p) {\n\tp = p || null;\n\tif (p === null) {\n\t\tp = this._ctx;\n\t}\n\tvar stack = [];\n\twhile (p !== null) {\n\t\t// compute what follows who invoked us\n\t\tvar ruleIndex = p.ruleIndex;\n\t\tif (ruleIndex < 0) {\n\t\t\tstack.push(\"n/a\");\n\t\t} else {\n\t\t\tstack.push(this.ruleNames[ruleIndex]);\n\t\t}\n\t\tp = p.parentCtx;\n\t}\n\treturn stack;\n};\n\n// For debugging and other purposes.//\nParser.prototype.getDFAStrings = function() {\n\treturn this._interp.decisionToDFA.toString();\n};\n// For debugging and other purposes.//\nParser.prototype.dumpDFA = function() {\n\tvar seenOne = false;\n\tfor (var i = 0; i < this._interp.decisionToDFA.length; i++) {\n\t\tvar dfa = this._interp.decisionToDFA[i];\n\t\tif (dfa.states.length > 0) {\n\t\t\tif (seenOne) {\n\t\t\t\tconsole.log();\n\t\t\t}\n\t\t\tthis.printer.println(\"Decision \" + dfa.decision + \":\");\n\t\t\tthis.printer.print(dfa.toString(this.literalNames, this.symbolicNames));\n\t\t\tseenOne = true;\n\t\t}\n\t}\n};\n\n/*\n\"\t\t\tprinter = function() {\\r\\n\" +\n\"\t\t\t\tthis.println = function(s) { document.getElementById('output') += s + '\\\\n'; }\\r\\n\" +\n\"\t\t\t\tthis.print = function(s) { document.getElementById('output') += s; }\\r\\n\" +\n\"\t\t\t};\\r\\n\" +\n*/\n\nParser.prototype.getSourceName = function() {\n\treturn this._input.sourceName;\n};\n\n// During a parse is sometimes useful to listen in on the rule entry and exit\n// events as well as token matches. this is for quick and dirty debugging.\n//\nParser.prototype.setTrace = function(trace) {\n\tif (!trace) {\n\t\tthis.removeParseListener(this._tracer);\n\t\tthis._tracer = null;\n\t} else {\n\t\tif (this._tracer !== null) {\n\t\t\tthis.removeParseListener(this._tracer);\n\t\t}\n\t\tthis._tracer = new TraceListener(this);\n\t\tthis.addParseListener(this._tracer);\n\t}\n};\n\nexports.Parser = Parser;\n\n\n// WEBPACK FOOTER //\n// ./node_modules/antlr4/Parser.js","// Generated from lib/Expr.g4 by ANTLR 4.7\r\n// jshint ignore: start\r\nvar antlr4 = require('antlr4/index');\r\nvar ExprVisitor = require('./ExprVisitor').ExprVisitor;\r\n\r\nvar grammarFileName = \"Expr.g4\";\r\n\r\nvar serializedATN = [\"\\u0003\\u608b\\ua72a\\u8133\\ub9ed\\u417c\\u3be7\\u7786\\u5964\",\r\n    \"\\u0003\\r-\\u0004\\u0002\\t\\u0002\\u0004\\u0003\\t\\u0003\\u0004\\u0004\\t\\u0004\",\r\n    \"\\u0003\\u0002\\u0006\\u0002\\n\\n\\u0002\\r\\u0002\\u000e\\u0002\\u000b\\u0003\\u0003\",\r\n    \"\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\\u0003\",\r\n    \"\\u0003\\u0003\\u0003\\u0003\\u0005\\u0003\\u0017\\n\\u0003\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0005\",\r\n    \"\\u0004 \\n\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\\u0004\\u0003\",\r\n    \"\\u0004\\u0003\\u0004\\u0007\\u0004(\\n\\u0004\\f\\u0004\\u000e\\u0004+\\u000b\\u0004\",\r\n    \"\\u0003\\u0004\\u0002\\u0003\\u0006\\u0005\\u0002\\u0004\\u0006\\u0002\\u0004\\u0003\",\r\n    \"\\u0002\\u0004\\u0005\\u0003\\u0002\\u0006\\u0007\\u00020\\u0002\\t\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0004\\u0016\\u0003\\u0002\\u0002\\u0002\\u0006\\u001f\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\b\\n\\u0005\\u0004\\u0003\\u0002\\t\\b\\u0003\\u0002\\u0002\\u0002\",\r\n    \"\\n\\u000b\\u0003\\u0002\\u0002\\u0002\\u000b\\t\\u0003\\u0002\\u0002\\u0002\\u000b\",\r\n    \"\\f\\u0003\\u0002\\u0002\\u0002\\f\\u0003\\u0003\\u0002\\u0002\\u0002\\r\\u000e\\u0005\",\r\n    \"\\u0006\\u0004\\u0002\\u000e\\u000f\\u0007\\n\\u0002\\u0002\\u000f\\u0017\\u0003\",\r\n    \"\\u0002\\u0002\\u0002\\u0010\\u0011\\u0007\\f\\u0002\\u0002\\u0011\\u0012\\u0007\",\r\n    \"\\u0003\\u0002\\u0002\\u0012\\u0013\\u0005\\u0006\\u0004\\u0002\\u0013\\u0014\\u0007\",\r\n    \"\\n\\u0002\\u0002\\u0014\\u0017\\u0003\\u0002\\u0002\\u0002\\u0015\\u0017\\u0007\",\r\n    \"\\n\\u0002\\u0002\\u0016\\r\\u0003\\u0002\\u0002\\u0002\\u0016\\u0010\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0016\\u0015\\u0003\\u0002\\u0002\\u0002\\u0017\\u0005\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0018\\u0019\\b\\u0004\\u0001\\u0002\\u0019\\u001a\\u0007\\b\\u0002\",\r\n    \"\\u0002\\u001a\\u001b\\u0005\\u0006\\u0004\\u0002\\u001b\\u001c\\u0007\\t\\u0002\",\r\n    \"\\u0002\\u001c \\u0003\\u0002\\u0002\\u0002\\u001d \\u0007\\u000b\\u0002\\u0002\",\r\n    \"\\u001e \\u0007\\f\\u0002\\u0002\\u001f\\u0018\\u0003\\u0002\\u0002\\u0002\\u001f\",\r\n    \"\\u001d\\u0003\\u0002\\u0002\\u0002\\u001f\\u001e\\u0003\\u0002\\u0002\\u0002 \",\r\n    \")\\u0003\\u0002\\u0002\\u0002!\\\"\\f\\u0007\\u0002\\u0002\\\"#\\t\\u0002\\u0002\\u0002\",\r\n    \"#(\\u0005\\u0006\\u0004\\b$%\\f\\u0006\\u0002\\u0002%&\\t\\u0003\\u0002\\u0002&\",\r\n    \"(\\u0005\\u0006\\u0004\\u0007\\'!\\u0003\\u0002\\u0002\\u0002\\'$\\u0003\\u0002\",\r\n    \"\\u0002\\u0002(+\\u0003\\u0002\\u0002\\u0002)\\'\\u0003\\u0002\\u0002\\u0002)*\",\r\n    \"\\u0003\\u0002\\u0002\\u0002*\\u0007\\u0003\\u0002\\u0002\\u0002+)\\u0003\\u0002\",\r\n    \"\\u0002\\u0002\\u0007\\u000b\\u0016\\u001f\\')\"].join(\"\");\r\n\r\n\r\nvar atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);\r\n\r\nvar decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });\r\n\r\nvar sharedContextCache = new antlr4.PredictionContextCache();\r\n\r\nvar literalNames = [ null, \"'='\", \"'*'\", \"'/'\", \"'+'\", \"'-'\", \"'('\", \"')'\", \r\n                     \"';'\" ];\r\n\r\nvar symbolicNames = [ null, null, null, null, null, null, null, null, \"NEWLINE\", \r\n                      \"INT\", \"ID\", \"WS\" ];\r\n\r\nvar ruleNames =  [ \"prog\", \"stat\", \"expr\" ];\r\n\r\nfunction ExprParser (input) {\r\n\tantlr4.Parser.call(this, input);\r\n    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);\r\n    this.ruleNames = ruleNames;\r\n    this.literalNames = literalNames;\r\n    this.symbolicNames = symbolicNames;\r\n    return this;\r\n}\r\n\r\nExprParser.prototype = Object.create(antlr4.Parser.prototype);\r\nExprParser.prototype.constructor = ExprParser;\r\n\r\nObject.defineProperty(ExprParser.prototype, \"atn\", {\r\n\tget : function() {\r\n\t\treturn atn;\r\n\t}\r\n});\r\n\r\nExprParser.EOF = antlr4.Token.EOF;\r\nExprParser.T__0 = 1;\r\nExprParser.T__1 = 2;\r\nExprParser.T__2 = 3;\r\nExprParser.T__3 = 4;\r\nExprParser.T__4 = 5;\r\nExprParser.T__5 = 6;\r\nExprParser.T__6 = 7;\r\nExprParser.NEWLINE = 8;\r\nExprParser.INT = 9;\r\nExprParser.ID = 10;\r\nExprParser.WS = 11;\r\n\r\nExprParser.RULE_prog = 0;\r\nExprParser.RULE_stat = 1;\r\nExprParser.RULE_expr = 2;\r\n\r\nfunction ProgContext(parser, parent, invokingState) {\r\n\tif(parent===undefined) {\r\n\t    parent = null;\r\n\t}\r\n\tif(invokingState===undefined || invokingState===null) {\r\n\t\tinvokingState = -1;\r\n\t}\r\n\tantlr4.ParserRuleContext.call(this, parent, invokingState);\r\n    this.parser = parser;\r\n    this.ruleIndex = ExprParser.RULE_prog;\r\n    return this;\r\n}\r\n\r\nProgContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\r\nProgContext.prototype.constructor = ProgContext;\r\n\r\nProgContext.prototype.stat = function(i) {\r\n    if(i===undefined) {\r\n        i = null;\r\n    }\r\n    if(i===null) {\r\n        return this.getTypedRuleContexts(StatContext);\r\n    } else {\r\n        return this.getTypedRuleContext(StatContext,i);\r\n    }\r\n};\r\n\r\nProgContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitProg(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nExprParser.ProgContext = ProgContext;\r\n\r\nExprParser.prototype.prog = function() {\r\n\r\n    var localctx = new ProgContext(this, this._ctx, this.state);\r\n    this.enterRule(localctx, 0, ExprParser.RULE_prog);\r\n    var _la = 0; // Token type\r\n    try {\r\n        this.enterOuterAlt(localctx, 1);\r\n        this.state = 7; \r\n        this._errHandler.sync(this);\r\n        _la = this._input.LA(1);\r\n        do {\r\n            this.state = 6;\r\n            this.stat();\r\n            this.state = 9; \r\n            this._errHandler.sync(this);\r\n            _la = this._input.LA(1);\r\n        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ExprParser.T__5) | (1 << ExprParser.NEWLINE) | (1 << ExprParser.INT) | (1 << ExprParser.ID))) !== 0));\r\n    } catch (re) {\r\n    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t        localctx.exception = re;\r\n\t        this._errHandler.reportError(this, re);\r\n\t        this._errHandler.recover(this, re);\r\n\t    } else {\r\n\t    \tthrow re;\r\n\t    }\r\n    } finally {\r\n        this.exitRule();\r\n    }\r\n    return localctx;\r\n};\r\n\r\nfunction StatContext(parser, parent, invokingState) {\r\n\tif(parent===undefined) {\r\n\t    parent = null;\r\n\t}\r\n\tif(invokingState===undefined || invokingState===null) {\r\n\t\tinvokingState = -1;\r\n\t}\r\n\tantlr4.ParserRuleContext.call(this, parent, invokingState);\r\n    this.parser = parser;\r\n    this.ruleIndex = ExprParser.RULE_stat;\r\n    return this;\r\n}\r\n\r\nStatContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\r\nStatContext.prototype.constructor = StatContext;\r\n\r\n\r\n \r\nStatContext.prototype.copyFrom = function(ctx) {\r\n    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\r\n};\r\n\r\n\r\nfunction PrintContext(parser, ctx) {\r\n\tStatContext.call(this, parser);\r\n    StatContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nPrintContext.prototype = Object.create(StatContext.prototype);\r\nPrintContext.prototype.constructor = PrintContext;\r\n\r\nExprParser.PrintContext = PrintContext;\r\n\r\nPrintContext.prototype.expr = function() {\r\n    return this.getTypedRuleContext(ExprContext,0);\r\n};\r\n\r\nPrintContext.prototype.NEWLINE = function() {\r\n    return this.getToken(ExprParser.NEWLINE, 0);\r\n};\r\nPrintContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitPrint(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction BlankContext(parser, ctx) {\r\n\tStatContext.call(this, parser);\r\n    StatContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nBlankContext.prototype = Object.create(StatContext.prototype);\r\nBlankContext.prototype.constructor = BlankContext;\r\n\r\nExprParser.BlankContext = BlankContext;\r\n\r\nBlankContext.prototype.NEWLINE = function() {\r\n    return this.getToken(ExprParser.NEWLINE, 0);\r\n};\r\nBlankContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitBlank(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction AssignContext(parser, ctx) {\r\n\tStatContext.call(this, parser);\r\n    StatContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nAssignContext.prototype = Object.create(StatContext.prototype);\r\nAssignContext.prototype.constructor = AssignContext;\r\n\r\nExprParser.AssignContext = AssignContext;\r\n\r\nAssignContext.prototype.ID = function() {\r\n    return this.getToken(ExprParser.ID, 0);\r\n};\r\n\r\nAssignContext.prototype.expr = function() {\r\n    return this.getTypedRuleContext(ExprContext,0);\r\n};\r\n\r\nAssignContext.prototype.NEWLINE = function() {\r\n    return this.getToken(ExprParser.NEWLINE, 0);\r\n};\r\nAssignContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitAssign(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\n\r\nExprParser.StatContext = StatContext;\r\n\r\nExprParser.prototype.stat = function() {\r\n\r\n    var localctx = new StatContext(this, this._ctx, this.state);\r\n    this.enterRule(localctx, 2, ExprParser.RULE_stat);\r\n    try {\r\n        this.state = 20;\r\n        this._errHandler.sync(this);\r\n        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);\r\n        switch(la_) {\r\n        case 1:\r\n            localctx = new PrintContext(this, localctx);\r\n            this.enterOuterAlt(localctx, 1);\r\n            this.state = 11;\r\n            this.expr(0);\r\n            this.state = 12;\r\n            this.match(ExprParser.NEWLINE);\r\n            break;\r\n\r\n        case 2:\r\n            localctx = new AssignContext(this, localctx);\r\n            this.enterOuterAlt(localctx, 2);\r\n            this.state = 14;\r\n            this.match(ExprParser.ID);\r\n            this.state = 15;\r\n            this.match(ExprParser.T__0);\r\n            this.state = 16;\r\n            this.expr(0);\r\n            this.state = 17;\r\n            this.match(ExprParser.NEWLINE);\r\n            break;\r\n\r\n        case 3:\r\n            localctx = new BlankContext(this, localctx);\r\n            this.enterOuterAlt(localctx, 3);\r\n            this.state = 19;\r\n            this.match(ExprParser.NEWLINE);\r\n            break;\r\n\r\n        }\r\n    } catch (re) {\r\n    \tif(re instanceof antlr4.error.RecognitionException) {\r\n\t        localctx.exception = re;\r\n\t        this._errHandler.reportError(this, re);\r\n\t        this._errHandler.recover(this, re);\r\n\t    } else {\r\n\t    \tthrow re;\r\n\t    }\r\n    } finally {\r\n        this.exitRule();\r\n    }\r\n    return localctx;\r\n};\r\n\r\nfunction ExprContext(parser, parent, invokingState) {\r\n\tif(parent===undefined) {\r\n\t    parent = null;\r\n\t}\r\n\tif(invokingState===undefined || invokingState===null) {\r\n\t\tinvokingState = -1;\r\n\t}\r\n\tantlr4.ParserRuleContext.call(this, parent, invokingState);\r\n    this.parser = parser;\r\n    this.ruleIndex = ExprParser.RULE_expr;\r\n    return this;\r\n}\r\n\r\nExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);\r\nExprContext.prototype.constructor = ExprContext;\r\n\r\n\r\n \r\nExprContext.prototype.copyFrom = function(ctx) {\r\n    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);\r\n};\r\n\r\nfunction OpExprContext(parser, ctx) {\r\n\tExprContext.call(this, parser);\r\n    this.left = null; // ExprContext;\r\n    this.op = null; // Token;\r\n    this.right = null; // ExprContext;\r\n    ExprContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nOpExprContext.prototype = Object.create(ExprContext.prototype);\r\nOpExprContext.prototype.constructor = OpExprContext;\r\n\r\nExprParser.OpExprContext = OpExprContext;\r\n\r\nOpExprContext.prototype.expr = function(i) {\r\n    if(i===undefined) {\r\n        i = null;\r\n    }\r\n    if(i===null) {\r\n        return this.getTypedRuleContexts(ExprContext);\r\n    } else {\r\n        return this.getTypedRuleContext(ExprContext,i);\r\n    }\r\n};\r\nOpExprContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitOpExpr(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction AtomExprContext(parser, ctx) {\r\n\tExprContext.call(this, parser);\r\n    ExprContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nAtomExprContext.prototype = Object.create(ExprContext.prototype);\r\nAtomExprContext.prototype.constructor = AtomExprContext;\r\n\r\nExprParser.AtomExprContext = AtomExprContext;\r\n\r\nAtomExprContext.prototype.INT = function() {\r\n    return this.getToken(ExprParser.INT, 0);\r\n};\r\nAtomExprContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitAtomExpr(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction ParenExprContext(parser, ctx) {\r\n\tExprContext.call(this, parser);\r\n    ExprContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nParenExprContext.prototype = Object.create(ExprContext.prototype);\r\nParenExprContext.prototype.constructor = ParenExprContext;\r\n\r\nExprParser.ParenExprContext = ParenExprContext;\r\n\r\nParenExprContext.prototype.expr = function() {\r\n    return this.getTypedRuleContext(ExprContext,0);\r\n};\r\nParenExprContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitParenExpr(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\nfunction IdExprContext(parser, ctx) {\r\n\tExprContext.call(this, parser);\r\n    ExprContext.prototype.copyFrom.call(this, ctx);\r\n    return this;\r\n}\r\n\r\nIdExprContext.prototype = Object.create(ExprContext.prototype);\r\nIdExprContext.prototype.constructor = IdExprContext;\r\n\r\nExprParser.IdExprContext = IdExprContext;\r\n\r\nIdExprContext.prototype.ID = function() {\r\n    return this.getToken(ExprParser.ID, 0);\r\n};\r\nIdExprContext.prototype.accept = function(visitor) {\r\n    if ( visitor instanceof ExprVisitor ) {\r\n        return visitor.visitIdExpr(this);\r\n    } else {\r\n        return visitor.visitChildren(this);\r\n    }\r\n};\r\n\r\n\r\n\r\nExprParser.prototype.expr = function(_p) {\r\n\tif(_p===undefined) {\r\n\t    _p = 0;\r\n\t}\r\n    var _parentctx = this._ctx;\r\n    var _parentState = this.state;\r\n    var localctx = new ExprContext(this, this._ctx, _parentState);\r\n    var _prevctx = localctx;\r\n    var _startState = 4;\r\n    this.enterRecursionRule(localctx, 4, ExprParser.RULE_expr, _p);\r\n    var _la = 0; // Token type\r\n    try {\r\n        this.enterOuterAlt(localctx, 1);\r\n        this.state = 29;\r\n        this._errHandler.sync(this);\r\n        switch(this._input.LA(1)) {\r\n        case ExprParser.T__5:\r\n            localctx = new ParenExprContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n\r\n            this.state = 23;\r\n            this.match(ExprParser.T__5);\r\n            this.state = 24;\r\n            this.expr(0);\r\n            this.state = 25;\r\n            this.match(ExprParser.T__6);\r\n            break;\r\n        case ExprParser.INT:\r\n            localctx = new AtomExprContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 27;\r\n            this.match(ExprParser.INT);\r\n            break;\r\n        case ExprParser.ID:\r\n            localctx = new IdExprContext(this, localctx);\r\n            this._ctx = localctx;\r\n            _prevctx = localctx;\r\n            this.state = 28;\r\n            this.match(ExprParser.ID);\r\n            break;\r\n        default:\r\n            throw new antlr4.error.NoViableAltException(this);\r\n        }\r\n        this._ctx.stop = this._input.LT(-1);\r\n        this.state = 39;\r\n        this._errHandler.sync(this);\r\n        var _alt = this._interp.adaptivePredict(this._input,4,this._ctx)\r\n        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {\r\n            if(_alt===1) {\r\n                if(this._parseListeners!==null) {\r\n                    this.triggerExitRuleEvent();\r\n                }\r\n                _prevctx = localctx;\r\n                this.state = 37;\r\n                this._errHandler.sync(this);\r\n                var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);\r\n                switch(la_) {\r\n                case 1:\r\n                    localctx = new OpExprContext(this, new ExprContext(this, _parentctx, _parentState));\r\n                    localctx.left = _prevctx;\r\n                    this.pushNewRecursionContext(localctx, _startState, ExprParser.RULE_expr);\r\n                    this.state = 31;\r\n                    if (!( this.precpred(this._ctx, 5))) {\r\n                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 5)\");\r\n                    }\r\n                    this.state = 32;\r\n                    localctx.op = this._input.LT(1);\r\n                    _la = this._input.LA(1);\r\n                    if(!(_la===ExprParser.T__1 || _la===ExprParser.T__2)) {\r\n                        localctx.op = this._errHandler.recoverInline(this);\r\n                    }\r\n                    else {\r\n                    \tthis._errHandler.reportMatch(this);\r\n                        this.consume();\r\n                    }\r\n                    this.state = 33;\r\n                    localctx.right = this.expr(6);\r\n                    break;\r\n\r\n                case 2:\r\n                    localctx = new OpExprContext(this, new ExprContext(this, _parentctx, _parentState));\r\n                    localctx.left = _prevctx;\r\n                    this.pushNewRecursionContext(localctx, _startState, ExprParser.RULE_expr);\r\n                    this.state = 34;\r\n                    if (!( this.precpred(this._ctx, 4))) {\r\n                        throw new antlr4.error.FailedPredicateException(this, \"this.precpred(this._ctx, 4)\");\r\n                    }\r\n                    this.state = 35;\r\n                    localctx.op = this._input.LT(1);\r\n                    _la = this._input.LA(1);\r\n                    if(!(_la===ExprParser.T__3 || _la===ExprParser.T__4)) {\r\n                        localctx.op = this._errHandler.recoverInline(this);\r\n                    }\r\n                    else {\r\n                    \tthis._errHandler.reportMatch(this);\r\n                        this.consume();\r\n                    }\r\n                    this.state = 36;\r\n                    localctx.right = this.expr(5);\r\n                    break;\r\n\r\n                } \r\n            }\r\n            this.state = 41;\r\n            this._errHandler.sync(this);\r\n            _alt = this._interp.adaptivePredict(this._input,4,this._ctx);\r\n        }\r\n\r\n    } catch( error) {\r\n        if(error instanceof antlr4.error.RecognitionException) {\r\n\t        localctx.exception = error;\r\n\t        this._errHandler.reportError(this, error);\r\n\t        this._errHandler.recover(this, error);\r\n\t    } else {\r\n\t    \tthrow error;\r\n\t    }\r\n    } finally {\r\n        this.unrollRecursionContexts(_parentctx)\r\n    }\r\n    return localctx;\r\n};\r\n\r\n\r\nExprParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {\r\n\tswitch(ruleIndex) {\r\n\tcase 2:\r\n\t\t\treturn this.expr_sempred(localctx, predIndex);\r\n    default:\r\n        throw \"No predicate with index:\" + ruleIndex;\r\n   }\r\n};\r\n\r\nExprParser.prototype.expr_sempred = function(localctx, predIndex) {\r\n\tswitch(predIndex) {\r\n\t\tcase 0:\r\n\t\t\treturn this.precpred(this._ctx, 5);\r\n\t\tcase 1:\r\n\t\t\treturn this.precpred(this._ctx, 4);\r\n\t\tdefault:\r\n\t\t\tthrow \"No predicate with index:\" + predIndex;\r\n\t}\r\n};\r\n\r\n\r\nexports.ExprParser = ExprParser;\r\n\n\n\n// WEBPACK FOOTER //\n// ./lib/parsers/ExprParser.js","// Generated from lib/Expr.g4 by ANTLR 4.7\r\n// jshint ignore: start\r\nvar antlr4 = require('antlr4/index');\r\n\r\n// This class defines a complete generic visitor for a parse tree produced by ExprParser.\r\n\r\nfunction ExprVisitor() {\r\n\tantlr4.tree.ParseTreeVisitor.call(this);\r\n\treturn this;\r\n}\r\n\r\nExprVisitor.prototype = Object.create(antlr4.tree.ParseTreeVisitor.prototype);\r\nExprVisitor.prototype.constructor = ExprVisitor;\r\n\r\n// Visit a parse tree produced by ExprParser#prog.\r\nExprVisitor.prototype.visitProg = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by ExprParser#print.\r\nExprVisitor.prototype.visitPrint = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by ExprParser#assign.\r\nExprVisitor.prototype.visitAssign = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by ExprParser#blank.\r\nExprVisitor.prototype.visitBlank = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by ExprParser#opExpr.\r\nExprVisitor.prototype.visitOpExpr = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by ExprParser#atomExpr.\r\nExprVisitor.prototype.visitAtomExpr = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by ExprParser#parenExpr.\r\nExprVisitor.prototype.visitParenExpr = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n// Visit a parse tree produced by ExprParser#idExpr.\r\nExprVisitor.prototype.visitIdExpr = function(ctx) {\r\n  return this.visitChildren(ctx);\r\n};\r\n\r\n\r\n\r\nexports.ExprVisitor = ExprVisitor;\n\n\n// WEBPACK FOOTER //\n// ./lib/parsers/ExprVisitor.js","import { InputStream } from 'antlr4/InputStream';\r\nimport { CommonTokenStream } from 'antlr4/CommonTokenStream';\r\nimport { BailErrorStrategy } from 'antlr4/error/ErrorStrategy';\r\nimport { ExprLexer } from './parsers/ExprLexer';\r\nimport { ExprParser } from './parsers/ExprParser';\r\nimport EvalVisitor from './EvalVisitor';\r\n\r\nexport default function run(input) {\r\n    var chars = new InputStream(input);\r\n    var lexer = new ExprLexer(chars);\r\n    lexer.removeErrorListeners();\r\n    var tokens = new CommonTokenStream(lexer);\r\n    var parser = new ExprParser(tokens);\r\n    parser._errHandler = new BailErrorStrategy();\r\n    try {\r\n        var tree = parser.prog();\r\n        var results = new EvalVisitor().visit(tree);\r\n        return results.pop();\r\n    } catch (ex) {\r\n        console.log('invalid input');\r\n        return false;\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/run.js","import { ExprVisitor } from './parsers/ExprVisitor';\r\n\r\nexport default class EvalVisitor extends ExprVisitor {\r\n    constructor() {\r\n        super();\r\n        this.memory = {};\r\n    }\r\n    visitAssign(ctx) {\r\n        var id = ctx.ID().getText();\r\n        var value = this.visit(ctx.expr());\r\n        this.memory[id] = value;\r\n        return value;\r\n    }\r\n    visitPrint(ctx) {\r\n        return this.visit(ctx.expr());\r\n    }\r\n    visitOpExpr(ctx) {\r\n        var left = this.visit(ctx.left);\r\n        var right = this.visit(ctx.right);\r\n        var op = ctx.op.text;\r\n        switch (op) {\r\n            case '*': return left * right;\r\n            case '/': return left / right;\r\n            case '+': return left + right;\r\n            case '-': return left - right;\r\n            default: throw \"Unknown operator \" + op;\r\n        }\r\n    }\r\n\r\n    visitAtomExpr(ctx) {\r\n        return Number(ctx.getText());\r\n    }\r\n\r\n    visitParenExpr(ctx) {\r\n        return this.visit(ctx.expr());\r\n    }\r\n\r\n    visitIdExpr(ctx) {\r\n        return this.memory[ctx.getText()];\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./lib/EvalVisitor.js"],"sourceRoot":""}